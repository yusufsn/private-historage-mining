line_no,diffmyers-HRegionServer.java,diffhistogram-HRegionServer.java,diffminimal-HRegionServer.java,diffpatience-HRegionServer.java
1348 ," @@ -2803', '1679 +2505', '100 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa "," @@ -2803', '930 +2505', '6 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa "," @@ -2803', '930 +2505', '6 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa "," @@ -2803', '930 +2505', '6 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa"
1364 , +  @override , -  } , -  } , -  }
1365 , +  public void updateregionfavorednodesmapping(string encodedregionname , - , - , -
1366 , +      list<org.apache.hadoop.hbase.protobuf.generated.hbaseprotos.servername> favorednodes) { , -  // start client methods , -  // start client methods , -  // start client methods
1367 , +    inetsocketaddress[] addr = new inetsocketaddress[favorednodes.size()]; , - , - , -
1368 , +    // refer to the comment on the declaration of regionfavorednodesmap on why , -  /** , -  /** , -  /**
1369 , +    // it is a map of region name to inetsocketaddress[] , -   * get data from a table. , -   * get data from a table. , -   * get data from a table.
1370 , +    for (int i = 0; i < favorednodes.size(); i++) { , -   * , -   * , -   *
1371 , +      addr[i] = inetsocketaddress.createunresolved(favorednodes.get(i).gethostname() , -   * @param controller the rpc controller , -   * @param controller the rpc controller , -   * @param controller the rpc controller
1372 , +          favorednodes.get(i).getport()); , -   * @param request the get request , -   * @param request the get request , -   * @param request the get request
1373 , +    } , -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
1374 ," +    regionfavorednodesmap.put(encodedregionname', 'addr); ", -   */ , -   */ , -   */
1375 , } , -  @override , -  @override , -  @override
1376 , - , -  public getresponse get(final rpccontroller controller , -  public getresponse get(final rpccontroller controller , -  public getresponse get(final rpccontroller controller
1377 , -  // start client methods , -      final getrequest request) throws serviceexception { , -      final getrequest request) throws serviceexception { , -      final getrequest request) throws serviceexception {
1378 ,  , -    long before = environmentedgemanager.currenttimemillis(); , -    long before = environmentedgemanager.currenttimemillis(); , -    long before = environmentedgemanager.currenttimemillis();
1379 , /** , -    try { , -    try { , -    try {
1380 , -   * get data from a table. , -      checkopen(); , -      checkopen(); , -      checkopen();
1381 , -   * , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
1382 , -   * @param controller the rpc controller , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion());
1383 , -   * @param request the get request , - , - , -
1384 , -   * @throws serviceexception , -      getresponse.builder builder = getresponse.newbuilder(); , -      getresponse.builder builder = getresponse.newbuilder(); , -      getresponse.builder builder = getresponse.newbuilder();
1385 , +   * return the favored nodes for a region given its encoded name. look at the , -      clientprotos.get get = request.getget(); , -      clientprotos.get get = request.getget(); , -      clientprotos.get get = request.getget();
1386 , +   * comment around {@link #regionfavorednodesmap} on why it is inetsocketaddress[] , -      boolean existence = null; , -      boolean existence = null; , -      boolean existence = null;
1387 , +   * @param encodedregionname , -      result r = null; , -      result r = null; , -      result r = null;
1388 , +   * @return array of favored locations , - , - , -
1389 , */ , -      if (get.hasclosestrowbefore() && get.getclosestrowbefore()) { , -      if (get.hasclosestrowbefore() && get.getclosestrowbefore()) { , -      if (get.hasclosestrowbefore() && get.getclosestrowbefore()) {
1390 , @override , -        if (get.getcolumncount() != 1) { , -        if (get.getcolumncount() != 1) { , -        if (get.getcolumncount() != 1) {
1391 , -  public getresponse get(final rpccontroller controller , -          throw new donotretryioexception( , -          throw new donotretryioexception( , -          throw new donotretryioexception(
1392 , -      final getrequest request) throws serviceexception { ," -            ""get closestrowbefore supports one and only one family now', 'not "" "," -            ""get closestrowbefore supports one and only one family now', 'not "" "," -            ""get closestrowbefore supports one and only one family now', 'not """
1393 , -    long before = environmentedgemanager.currenttimemillis(); ," -              + get.getcolumncount() + "" families""); "," -              + get.getcolumncount() + "" families""); "," -              + get.getcolumncount() + "" families"");"
1394 , -    try { , -        } , -        } , -        }
1395 , -      checkopen(); , -        byte[] row = get.getrow().tobytearray(); , -        byte[] row = get.getrow().tobytearray(); , -        byte[] row = get.getrow().tobytearray();
1396 , -      requestcount.increment(); , -        byte[] family = get.getcolumn(0).getfamily().tobytearray(); , -        byte[] family = get.getcolumn(0).getfamily().tobytearray(); , -        byte[] family = get.getcolumn(0).getfamily().tobytearray();
1397 , -      hregion region = getregion(request.getregion()); ," -        r = region.getclosestrowbefore(row', 'family); "," -        r = region.getclosestrowbefore(row', 'family); "," -        r = region.getclosestrowbefore(row', 'family);"
1398 , - , -      } else { , -      } else { , -      } else {
1399 , -      getresponse.builder builder = getresponse.newbuilder(); , -        get clientget = protobufutil.toget(get); , -        get clientget = protobufutil.toget(get); , -        get clientget = protobufutil.toget(get);
1400 , -      clientprotos.get get = request.getget(); , -        if (get.getexistenceonly() && region.getcoprocessorhost() != null) { , -        if (get.getexistenceonly() && region.getcoprocessorhost() != null) { , -        if (get.getexistenceonly() && region.getcoprocessorhost() != null) {
1401 , -      boolean existence = null; , -          existence = region.getcoprocessorhost().preexists(clientget); , -          existence = region.getcoprocessorhost().preexists(clientget); , -          existence = region.getcoprocessorhost().preexists(clientget);
1402 , -      result r = null; , -        } , -        } , -        }
1403 , - , -        if (existence == null) { , -        if (existence == null) { , -        if (existence == null) {
1404 , -      if (get.hasclosestrowbefore() && get.getclosestrowbefore()) { , -          r = region.get(clientget); , -          r = region.get(clientget); , -          r = region.get(clientget);
1405 , -        if (get.getcolumncount() != 1) { , -          if (get.getexistenceonly()) { , -          if (get.getexistenceonly()) { , -          if (get.getexistenceonly()) {
1406 , -          throw new donotretryioexception( , -            boolean exists = r.getexists(); , -            boolean exists = r.getexists(); , -            boolean exists = r.getexists();
1407 ," -            ""get closestrowbefore supports one and only one family now', 'not "" ", -            if (region.getcoprocessorhost() != null) { , -            if (region.getcoprocessorhost() != null) { , -            if (region.getcoprocessorhost() != null) {
1408 ," -              + get.getcolumncount() + "" families""); "," -              exists = region.getcoprocessorhost().postexists(clientget', 'exists); "," -              exists = region.getcoprocessorhost().postexists(clientget', 'exists); "," -              exists = region.getcoprocessorhost().postexists(clientget', 'exists);"
1409 , -        } , -            } , -            } , -            }
1410 , -        byte[] row = get.getrow().tobytearray(); , -            existence = exists; , -            existence = exists; , -            existence = exists;
1411 , -        byte[] family = get.getcolumn(0).getfamily().tobytearray(); , -          } , -          } , -          }
1412 ," -        r = region.getclosestrowbefore(row', 'family); ", -        } , -        } , -        }
1413 , -      } else { , -      } , -      } , -      }
1414 , -        get clientget = protobufutil.toget(get); , -      if (existence != null){ , -      if (existence != null){ , -      if (existence != null){
1415 , -        if (get.getexistenceonly() && region.getcoprocessorhost() != null) { , -        clientprotos.result pbr = protobufutil.toresult(existence); , -        clientprotos.result pbr = protobufutil.toresult(existence); , -        clientprotos.result pbr = protobufutil.toresult(existence);
1416 , -          existence = region.getcoprocessorhost().preexists(clientget); , -        builder.setresult(pbr); , -        builder.setresult(pbr); , -        builder.setresult(pbr);
1417 , -        } , -      } else  if (r != null) { , -      } else  if (r != null) { , -      } else  if (r != null) {
1418 , -        if (existence == null) { , -        clientprotos.result pbr = protobufutil.toresult(r); , -        clientprotos.result pbr = protobufutil.toresult(r); , -        clientprotos.result pbr = protobufutil.toresult(r);
1419 , -          r = region.get(clientget); , -        builder.setresult(pbr); , -        builder.setresult(pbr); , -        builder.setresult(pbr);
1420 , -          if (get.getexistenceonly()) { , -      } , -      } , -      }
1421 , -            boolean exists = r.getexists(); , -      return builder.build(); , -      return builder.build(); , -      return builder.build();
1422 , -            if (region.getcoprocessorhost() != null) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
1423 ," -              exists = region.getcoprocessorhost().postexists(clientget', 'exists); ", -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
1424 , +  public inetsocketaddress[] getfavorednodesforregion(string encodedregionname) { , -    } finally { , -    } finally { , -    } finally {
1425 , +    return regionfavorednodesmap.get(encodedregionname); , -      metricsregionserver.updateget(environmentedgemanager.currenttimemillis() - before); , -      metricsregionserver.updateget(environmentedgemanager.currenttimemillis() - before); , -      metricsregionserver.updateget(environmentedgemanager.currenttimemillis() - before);
1426 , } , -    } , -    } , -    }
1427 , -            existence = exists; , -  } , -  } , -  }
1428 , + , - , - , -
1429 , +  @override , - , - , -
1430 , +  public servernoncemanager getnoncemanager() { , -  /** , -  /** , -  /**
1431 , +    return this.noncemanager; , -   * mutate data in a table. , -   * mutate data in a table. , -   * mutate data in a table.
1432 , } , -   * , -   * , -   *
1433 , + , -   * @param rpcc the rpc controller , -   * @param rpcc the rpc controller , -   * @param rpcc the rpc controller
1434 , +  private static class movedregioninfo { , -   * @param request the mutate request , -   * @param request the mutate request , -   * @param request the mutate request
1435 , +    private final servername servername; , -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
1436 , +    private final long seqnum; , -   */ , -   */ , -   */
1437 , +    private final long ts; , -  @override , -  @override , -  @override
1438 , + , -  public mutateresponse mutate(final rpccontroller rpcc , -  public mutateresponse mutate(final rpccontroller rpcc , -  public mutateresponse mutate(final rpccontroller rpcc
1439 ," +    public movedregioninfo(servername servername', 'long closeseqnum) { ", -      final mutaterequest request) throws serviceexception { , -      final mutaterequest request) throws serviceexception { , -      final mutaterequest request) throws serviceexception {
1440 , +      this.servername = servername; ," [""-    // rpc controller is how we bring in data via the back door;  it is unprotobuf'ed data.""] "," [""-    // rpc controller is how we bring in data via the back door;  it is unprotobuf'ed data.""] "," [""-    // rpc controller is how we bring in data via the back door;  it is unprotobuf'ed data.""]"
1441 , +      this.seqnum = closeseqnum; , -    // it is also the conduit via which we pass back data. , -    // it is also the conduit via which we pass back data. , -    // it is also the conduit via which we pass back data.
1442 , +      ts = environmentedgemanager.currenttimemillis(); , -    payloadcarryingrpccontroller controller = (payloadcarryingrpccontroller)rpcc; , -    payloadcarryingrpccontroller controller = (payloadcarryingrpccontroller)rpcc; , -    payloadcarryingrpccontroller controller = (payloadcarryingrpccontroller)rpcc;
1443 , } , -    cellscanner cellscanner = controller != null? controller.cellscanner(): null; , -    cellscanner cellscanner = controller != null? controller.cellscanner(): null; , -    cellscanner cellscanner = controller != null? controller.cellscanner(): null;
1444 , + , -    // clear scanner so we are not holding on to reference across call. , -    // clear scanner so we are not holding on to reference across call. , -    // clear scanner so we are not holding on to reference across call.
1445 , +    public servername getservername() { , -    if (controller != null) controller.setcellscanner(null); , -    if (controller != null) controller.setcellscanner(null); , -    if (controller != null) controller.setcellscanner(null);
1446 , +      return servername; , -    try { , -    try { , -    try {
1447 , } , -      checkopen(); , -      checkopen(); , -      checkopen();
1448 , -      if (existence != null){ , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
1449 , -        clientprotos.result pbr = protobufutil.toresult(existence); , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion());
1450 , -        builder.setresult(pbr); , -      mutateresponse.builder builder = mutateresponse.newbuilder(); , -      mutateresponse.builder builder = mutateresponse.newbuilder(); , -      mutateresponse.builder builder = mutateresponse.newbuilder();
1451 , -      } else  if (r != null) { , -      mutationproto mutation = request.getmutation(); , -      mutationproto mutation = request.getmutation(); , -      mutationproto mutation = request.getmutation();
1452 , -        clientprotos.result pbr = protobufutil.toresult(r); , -      if (!region.getregioninfo().ismetatable()) { , -      if (!region.getregioninfo().ismetatable()) { , -      if (!region.getregioninfo().ismetatable()) {
1453 , -        builder.setresult(pbr); , -        cacheflusher.reclaimmemstorememory(); , -        cacheflusher.reclaimmemstorememory(); , -        cacheflusher.reclaimmemstorememory();
1454 , + , -      } , -      } , -      }
1455 , +    public long getseqnum() { , -      long noncegroup = request.hasnoncegroup() , -      long noncegroup = request.hasnoncegroup() , -      long noncegroup = request.hasnoncegroup()
1456 , +      return seqnum; , -          ? request.getnoncegroup() : hconstants.no_nonce; , -          ? request.getnoncegroup() : hconstants.no_nonce; , -          ? request.getnoncegroup() : hconstants.no_nonce;
1457 , } , -      result r = null; , -      result r = null; , -      result r = null;
1458 , -      return builder.build(); , -      boolean processed = null; , -      boolean processed = null; , -      boolean processed = null;
1459 , -    } catch (ioexception ie) { , -      mutationtype type = mutation.getmutatetype(); , -      mutationtype type = mutation.getmutatetype(); , -      mutationtype type = mutation.getmutatetype();
1460 , -      throw new serviceexception(ie); , -      switch (type) { , -      switch (type) { , -      switch (type) {
1461 , -    } finally { , -      case append: , -      case append: , -      case append:
1462 , -      metricsregionserver.updateget(environmentedgemanager.currenttimemillis() - before); ," [""-        // todo: this doesn't actually check anything.""] "," [""-        // todo: this doesn't actually check anything.""] "," [""-        // todo: this doesn't actually check anything.""]"
1463 , + ," -        r = append(region', 'mutation', 'cellscanner', 'noncegroup); "," -        r = append(region', 'mutation', 'cellscanner', 'noncegroup); "," -        r = append(region', 'mutation', 'cellscanner', 'noncegroup);"
1464 , +    public long getmovetime() { , -        break; , -        break; , -        break;
1465 , +      return ts; , -      case increment: , -      case increment: , -      case increment:
1466 , } ," [""-        // todo: this doesn't actually check anything.""] "," [""-        // todo: this doesn't actually check anything.""] "," [""-        // todo: this doesn't actually check anything.""]"
1467 , } ," -        r = increment(region', 'mutation', 'cellscanner', 'noncegroup); "," -        r = increment(region', 'mutation', 'cellscanner', 'noncegroup); "," -        r = increment(region', 'mutation', 'cellscanner', 'noncegroup);"
1468 ,  , -        break; , -        break; , -        break;
1469 , +  // this map will contains all the regions that we closed for a move. , -      case put: , -      case put: , -      case put:
1470 ," [""+  //  we add the time it was moved as we don't want to keep too old information""] "," -        put put = protobufutil.toput(mutation', 'cellscanner); "," -        put put = protobufutil.toput(mutation', 'cellscanner); "," -        put put = protobufutil.toput(mutation', 'cellscanner);"
1471 ," +  protected map<string', 'movedregioninfo> movedregions = ", -        if (request.hascondition()) { , -        if (request.hascondition()) { , -        if (request.hascondition()) {
1472 ," +      new concurrenthashmap<string', 'movedregioninfo>(3000); ", -          condition condition = request.getcondition(); , -          condition condition = request.getcondition(); , -          condition condition = request.getcondition();
1473 ,  , -          byte[] row = condition.getrow().tobytearray(); , -          byte[] row = condition.getrow().tobytearray(); , -          byte[] row = condition.getrow().tobytearray();
1474 , -  /** , -          byte[] family = condition.getfamily().tobytearray(); , -          byte[] family = condition.getfamily().tobytearray(); , -          byte[] family = condition.getfamily().tobytearray();
1475 , -   * mutate data in a table. , -          byte[] qualifier = condition.getqualifier().tobytearray(); , -          byte[] qualifier = condition.getqualifier().tobytearray(); , -          byte[] qualifier = condition.getqualifier().tobytearray();
1476 , -   * , -          compareop compareop = compareop.valueof(condition.getcomparetype().name()); , -          compareop compareop = compareop.valueof(condition.getcomparetype().name()); , -          compareop compareop = compareop.valueof(condition.getcomparetype().name());
1477 , -   * @param rpcc the rpc controller , -          bytearraycomparable comparator = , -          bytearraycomparable comparator = , -          bytearraycomparable comparator =
1478 , -   * @param request the mutate request , -            protobufutil.tocomparator(condition.getcomparator()); , -            protobufutil.tocomparator(condition.getcomparator()); , -            protobufutil.tocomparator(condition.getcomparator());
1479 , -   * @throws serviceexception , -          if (region.getcoprocessorhost() != null) { , -          if (region.getcoprocessorhost() != null) { , -          if (region.getcoprocessorhost() != null) {
1480 , -   */ , -            processed = region.getcoprocessorhost().precheckandput( , -            processed = region.getcoprocessorhost().precheckandput( , -            processed = region.getcoprocessorhost().precheckandput(
1481 , -  @override ," -              row', 'family', 'qualifier', 'compareop', 'comparator', 'put); "," -              row', 'family', 'qualifier', 'compareop', 'comparator', 'put); "," -              row', 'family', 'qualifier', 'compareop', 'comparator', 'put);"
1482 , -  public mutateresponse mutate(final rpccontroller rpcc , -          } , -          } , -          }
1483 , -      final mutaterequest request) throws serviceexception { , -          if (processed == null) { , -          if (processed == null) { , -          if (processed == null) {
1484 ," [""-    // rpc controller is how we bring in data via the back door;  it is unprotobuf'ed data.""] "," -            boolean result = region.checkandmutate(row', 'family "," -            boolean result = region.checkandmutate(row', 'family "," -            boolean result = region.checkandmutate(row', 'family"
1485 , -    // it is also the conduit via which we pass back data. ," -              qualifier', 'compareop', 'comparator', 'put', 'true); "," -              qualifier', 'compareop', 'comparator', 'put', 'true); "," -              qualifier', 'compareop', 'comparator', 'put', 'true);"
1486 , -    payloadcarryingrpccontroller controller = (payloadcarryingrpccontroller)rpcc; , -            if (region.getcoprocessorhost() != null) { , -            if (region.getcoprocessorhost() != null) { , -            if (region.getcoprocessorhost() != null) {
1487 , -    cellscanner cellscanner = controller != null? controller.cellscanner(): null; ," -              result = region.getcoprocessorhost().postcheckandput(row', 'family "," -              result = region.getcoprocessorhost().postcheckandput(row', 'family "," -              result = region.getcoprocessorhost().postcheckandput(row', 'family"
1488 , -    // clear scanner so we are not holding on to reference across call. ," -                qualifier', 'compareop', 'comparator', 'put', 'result); "," -                qualifier', 'compareop', 'comparator', 'put', 'result); "," -                qualifier', 'compareop', 'comparator', 'put', 'result);"
1489 , -    if (controller != null) controller.setcellscanner(null); , -            } , -            } , -            }
1490 , -    try { , -            processed = result; , -            processed = result; , -            processed = result;
1491 , -      checkopen(); , -          } , -          } , -          }
1492 , -      requestcount.increment(); , -        } else { , -        } else { , -        } else {
1493 , -      hregion region = getregion(request.getregion()); , -          region.put(put); , -          region.put(put); , -          region.put(put);
1494 , -      mutateresponse.builder builder = mutateresponse.newbuilder(); , -          processed = boolean.true; , -          processed = boolean.true; , -          processed = boolean.true;
1495 , -      mutationproto mutation = request.getmutation(); , -        } , -        } , -        }
1496 , -      if (!region.getregioninfo().ismetatable()) { , -        break; , -        break; , -        break;
1497 , -        cacheflusher.reclaimmemstorememory(); , -      case delete: , -      case delete: , -      case delete:
1498 , -      } ," -        delete delete = protobufutil.todelete(mutation', 'cellscanner); "," -        delete delete = protobufutil.todelete(mutation', 'cellscanner); "," -        delete delete = protobufutil.todelete(mutation', 'cellscanner);"
1499 , -      long noncegroup = request.hasnoncegroup() , -        if (request.hascondition()) { , -        if (request.hascondition()) { , -        if (request.hascondition()) {
1500 , -          ? request.getnoncegroup() : hconstants.no_nonce; , -          condition condition = request.getcondition(); , -          condition condition = request.getcondition(); , -          condition condition = request.getcondition();
1501 , -      result r = null; , -          byte[] row = condition.getrow().tobytearray(); , -          byte[] row = condition.getrow().tobytearray(); , -          byte[] row = condition.getrow().tobytearray();
1502 , -      boolean processed = null; , -          byte[] family = condition.getfamily().tobytearray(); , -          byte[] family = condition.getfamily().tobytearray(); , -          byte[] family = condition.getfamily().tobytearray();
1503 , -      mutationtype type = mutation.getmutatetype(); , -          byte[] qualifier = condition.getqualifier().tobytearray(); , -          byte[] qualifier = condition.getqualifier().tobytearray(); , -          byte[] qualifier = condition.getqualifier().tobytearray();
1504 , -      switch (type) { , -          compareop compareop = compareop.valueof(condition.getcomparetype().name()); , -          compareop compareop = compareop.valueof(condition.getcomparetype().name()); , -          compareop compareop = compareop.valueof(condition.getcomparetype().name());
1505 , -      case append: , -          bytearraycomparable comparator = , -          bytearraycomparable comparator = , -          bytearraycomparable comparator =
1506 ," [""-        // todo: this doesn't actually check anything.""] ", -            protobufutil.tocomparator(condition.getcomparator()); , -            protobufutil.tocomparator(condition.getcomparator()); , -            protobufutil.tocomparator(condition.getcomparator());
1507 ," -        r = append(region', 'mutation', 'cellscanner', 'noncegroup); ", -          if (region.getcoprocessorhost() != null) { , -          if (region.getcoprocessorhost() != null) { , -          if (region.getcoprocessorhost() != null) {
1508 , -        break; , -            processed = region.getcoprocessorhost().precheckanddelete( , -            processed = region.getcoprocessorhost().precheckanddelete( , -            processed = region.getcoprocessorhost().precheckanddelete(
1509 , -      case increment: ," -              row', 'family', 'qualifier', 'compareop', 'comparator', 'delete); "," -              row', 'family', 'qualifier', 'compareop', 'comparator', 'delete); "," -              row', 'family', 'qualifier', 'compareop', 'comparator', 'delete);"
1510 ," [""-        // todo: this doesn't actually check anything.""] ", -          } , -          } , -          }
1511 ," -        r = increment(region', 'mutation', 'cellscanner', 'noncegroup); ", -          if (processed == null) { , -          if (processed == null) { , -          if (processed == null) {
1512 , -        break; ," -            boolean result = region.checkandmutate(row', 'family "," -            boolean result = region.checkandmutate(row', 'family "," -            boolean result = region.checkandmutate(row', 'family"
1513 , -      case put: ," -              qualifier', 'compareop', 'comparator', 'delete', 'true); "," -              qualifier', 'compareop', 'comparator', 'delete', 'true); "," -              qualifier', 'compareop', 'comparator', 'delete', 'true);"
1514 ," -        put put = protobufutil.toput(mutation', 'cellscanner); ", -            if (region.getcoprocessorhost() != null) { , -            if (region.getcoprocessorhost() != null) { , -            if (region.getcoprocessorhost() != null) {
1515 , -        if (request.hascondition()) { ," -              result = region.getcoprocessorhost().postcheckanddelete(row', 'family "," -              result = region.getcoprocessorhost().postcheckanddelete(row', 'family "," -              result = region.getcoprocessorhost().postcheckanddelete(row', 'family"
1516 , -          condition condition = request.getcondition(); ," -                qualifier', 'compareop', 'comparator', 'delete', 'result); "," -                qualifier', 'compareop', 'comparator', 'delete', 'result); "," -                qualifier', 'compareop', 'comparator', 'delete', 'result);"
1517 , -          byte[] row = condition.getrow().tobytearray(); , -            } , -            } , -            }
1518 , -          byte[] family = condition.getfamily().tobytearray(); , -            processed = result; , -            processed = result; , -            processed = result;
1519 , -          byte[] qualifier = condition.getqualifier().tobytearray(); , -          } , -          } , -          }
1520 , -          compareop compareop = compareop.valueof(condition.getcomparetype().name()); , -        } else { , -        } else { , -        } else {
1521 , -          bytearraycomparable comparator = , -          region.delete(delete); , -          region.delete(delete); , -          region.delete(delete);
1522 , -            protobufutil.tocomparator(condition.getcomparator()); , -          processed = boolean.true; , -          processed = boolean.true; , -          processed = boolean.true;
1523 , -          if (region.getcoprocessorhost() != null) { , -        } , -        } , -        }
1524 , -            processed = region.getcoprocessorhost().precheckandput( , -        break; , -        break; , -        break;
1525 ," -              row', 'family', 'qualifier', 'compareop', 'comparator', 'put); ", -        default: , -        default: , -        default:
1526 , -          } , -          throw new donotretryioexception( , -          throw new donotretryioexception( , -          throw new donotretryioexception(
1527 , -          if (processed == null) { ," -            ""unsupported mutate type: "" + type.name()); "," -            ""unsupported mutate type: "" + type.name()); "," -            ""unsupported mutate type: "" + type.name());"
1528 ," -            boolean result = region.checkandmutate(row', 'family ", -      } , -      } , -      }
1529 ," -              qualifier', 'compareop', 'comparator', 'put', 'true); ", -      if (processed != null) builder.setprocessed(processed.booleanvalue()); , -      if (processed != null) builder.setprocessed(processed.booleanvalue()); , -      if (processed != null) builder.setprocessed(processed.booleanvalue());
1530 , -            if (region.getcoprocessorhost() != null) { ," -      addresult(builder', 'r', 'controller); "," -      addresult(builder', 'r', 'controller); "," -      addresult(builder', 'r', 'controller);"
1531 ," -              result = region.getcoprocessorhost().postcheckandput(row', 'family ", -      return builder.build(); , -      return builder.build(); , -      return builder.build();
1532 ," -                qualifier', 'compareop', 'comparator', 'put', 'result); ", -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
1533 , -            } , -      checkfilesystem(); , -      checkfilesystem(); , -      checkfilesystem();
1534 , -            processed = result; , -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
1535 , +  // we need a timeout. if not there is a risk of giving a wrong information: this would double , -    } , -    } , -    }
1536 , +  //  the number of network calls instead of reducing them. , -  } , -  } , -  }
1537 , +  private static final int timeout_region_moved = (2 * 60 * 1000); , - , - , -
1538 , + , - , - , -
1539 ," +  protected void addtomovedregions(string encodedname', 'servername destination', 'long closeseqnum) { ", -  /** , -  /** , -  /**
1540 ," +    if (servername.issamehostnameandport(destination', 'this.getservername())) { ", -   * @return true if current call supports cellblocks , -   * @return true if current call supports cellblocks , -   * @return true if current call supports cellblocks
1541 ," +      log.warn(""not adding moved region record: "" + encodedname + "" to self.""); ", -   */ , -   */ , -   */
1542 , +      return; , -  private boolean isclientcellblocksupport() { , -  private boolean isclientcellblocksupport() { , -  private boolean isclientcellblocksupport() {
1543 , } , -    rpccallcontext context = rpcserver.getcurrentcall(); , -    rpccallcontext context = rpcserver.getcurrentcall(); , -    rpccallcontext context = rpcserver.getcurrentcall();
1544 , -        } else { , -    return context != null && context.isclientcellblocksupport(); , -    return context != null && context.isclientcellblocksupport(); , -    return context != null && context.isclientcellblocksupport();
1545 , -          region.put(put); , -  } , -  } , -  }
1546 , -          processed = boolean.true; , - , - , -
1547 ," +    log.info(""adding moved region record: "" + encodedname + "" to "" ", -  private void addresult(final mutateresponse.builder builder , -  private void addresult(final mutateresponse.builder builder , -  private void addresult(final mutateresponse.builder builder
1548 ," +        + destination.getservername() + "":"" + destination.getport() "," -      final result result', 'final payloadcarryingrpccontroller rpcc) { "," -      final result result', 'final payloadcarryingrpccontroller rpcc) { "," -      final result result', 'final payloadcarryingrpccontroller rpcc) {"
1549 ," +        + "" as of "" + closeseqnum); ", -    if (result == null) return; , -    if (result == null) return; , -    if (result == null) return;
1550 ," +    movedregions.put(encodedname', 'new movedregioninfo(destination', 'closeseqnum)); ", -    if (isclientcellblocksupport()) { , -    if (isclientcellblocksupport()) { , -    if (isclientcellblocksupport()) {
1551 , } , -      builder.setresult(protobufutil.toresultnodata(result)); , -      builder.setresult(protobufutil.toresultnodata(result)); , -      builder.setresult(protobufutil.toresultnodata(result));
1552 , -        break; , -      rpcc.setcellscanner(result.cellscanner()); , -      rpcc.setcellscanner(result.cellscanner()); , -      rpcc.setcellscanner(result.cellscanner());
1553 , -      case delete: , -    } else { , -    } else { , -    } else {
1554 ," -        delete delete = protobufutil.todelete(mutation', 'cellscanner); ", -      clientprotos.result pbr = protobufutil.toresult(result); , -      clientprotos.result pbr = protobufutil.toresult(result); , -      clientprotos.result pbr = protobufutil.toresult(result);
1555 , -        if (request.hascondition()) { , -      builder.setresult(pbr); , -      builder.setresult(pbr); , -      builder.setresult(pbr);
1556 , -          condition condition = request.getcondition(); , -    } , -    } , -    }
1557 , -          byte[] row = condition.getrow().tobytearray(); , -  } , -  } , -  }
1558 , -          byte[] family = condition.getfamily().tobytearray(); , - , - , -
1559 , -          byte[] qualifier = condition.getqualifier().tobytearray(); , -  // , -  // , -  //
1560 , -          compareop compareop = compareop.valueof(condition.getcomparetype().name()); , -  // remote scanner interface , -  // remote scanner interface , -  // remote scanner interface
1561 , -          bytearraycomparable comparator = , -  // , -  // , -  //
1562 , -            protobufutil.tocomparator(condition.getcomparator()); , - , - , -
1563 , -          if (region.getcoprocessorhost() != null) { , -  /** , -  /** , -  /**
1564 , -            processed = region.getcoprocessorhost().precheckanddelete( , -   * scan data in a table. , -   * scan data in a table. , -   * scan data in a table.
1565 ," -              row', 'family', 'qualifier', 'compareop', 'comparator', 'delete); ", -   * , -   * , -   *
1566 , -          } , -   * @param controller the rpc controller , -   * @param controller the rpc controller , -   * @param controller the rpc controller
1567 , -          if (processed == null) { , -   * @param request the scan request , -   * @param request the scan request , -   * @param request the scan request
1568 ," -            boolean result = region.checkandmutate(row', 'family ", -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
1569 ," -              qualifier', 'compareop', 'comparator', 'delete', 'true); ", -   */ , -   */ , -   */
1570 , -            if (region.getcoprocessorhost() != null) { , -  @override , -  @override , -  @override
1571 ," -              result = region.getcoprocessorhost().postcheckanddelete(row', 'family "," -  public scanresponse scan(final rpccontroller controller', 'final scanrequest request) "," -  public scanresponse scan(final rpccontroller controller', 'final scanrequest request) "," -  public scanresponse scan(final rpccontroller controller', 'final scanrequest request)"
1572 ," -                qualifier', 'compareop', 'comparator', 'delete', 'result); ", -  throws serviceexception { , -  throws serviceexception { , -  throws serviceexception {
1573 , -            } , -    leases.lease lease = null; , -    leases.lease lease = null; , -    leases.lease lease = null;
1574 , -            processed = result; , -    string scannername = null; , -    string scannername = null; , -    string scannername = null;
1575 , + , -    try { , -    try { , -    try {
1576 , +  void removefrommovedregions(string encodedname) { , -      if (!request.hasscannerid() && !request.hasscan()) { , -      if (!request.hasscannerid() && !request.hasscan()) { , -      if (!request.hasscannerid() && !request.hasscan()) {
1577 , +    movedregions.remove(encodedname); , -        throw new donotretryioexception( , -        throw new donotretryioexception( , -        throw new donotretryioexception(
1578 , } ," -          ""missing required input: scannerid or scan""); "," -          ""missing required input: scannerid or scan""); "," -          ""missing required input: scannerid or scan"");"
1579 , + , -      } , -      } , -      }
1580 , +  private movedregioninfo getmovedregion(final string encodedregionname) { , -      long scannerid = -1; , -      long scannerid = -1; , -      long scannerid = -1;
1581 , +    movedregioninfo dest = movedregions.get(encodedregionname); , -      if (request.hasscannerid()) { , -      if (request.hasscannerid()) { , -      if (request.hasscannerid()) {
1582 , + , -        scannerid = request.getscannerid(); , -        scannerid = request.getscannerid(); , -        scannerid = request.getscannerid();
1583 , +    long now = environmentedgemanager.currenttimemillis(); , -        scannername = string.valueof(scannerid); , -        scannername = string.valueof(scannerid); , -        scannername = string.valueof(scannerid);
1584 , +    if (dest != null) { , -      } , -      } , -      }
1585 , +      if (dest.getmovetime() > (now - timeout_region_moved)) { , -      try { , -      try { , -      try {
1586 , +        return dest; , -        checkopen(); , -        checkopen(); , -        checkopen();
1587 , } else { , -      } catch (ioexception e) { , -      } catch (ioexception e) { , -      } catch (ioexception e) {
1588 , -          region.delete(delete); ," -        // if checkopen failed', 'server not running or filesystem gone "," -        // if checkopen failed', 'server not running or filesystem gone "," -        // if checkopen failed', 'server not running or filesystem gone"
1589 , -          processed = boolean.true; ," [""-        // cancel this lease; filesystem is gone or we're closing or something.""] "," [""-        // cancel this lease; filesystem is gone or we're closing or something.""] "," [""-        // cancel this lease; filesystem is gone or we're closing or something.""]"
1590 , -        } , -        if (scannername != null) { , -        if (scannername != null) { , -        if (scannername != null) {
1591 , -        break; , -          try { , -          try { , -          try {
1592 , -        default: , -            leases.cancellease(scannername); , -            leases.cancellease(scannername); , -            leases.cancellease(scannername);
1593 , -          throw new donotretryioexception( , -          } catch (leaseexception le) { , -          } catch (leaseexception le) { , -          } catch (leaseexception le) {
1594 ," -            ""unsupported mutate type: "" + type.name()); "," -            log.info(""server shutting down and client tried to access missing scanner "" + "," -            log.info(""server shutting down and client tried to access missing scanner "" + "," -            log.info(""server shutting down and client tried to access missing scanner "" +"
1595 , -      } , -              scannername); , -              scannername); , -              scannername);
1596 , -      if (processed != null) builder.setprocessed(processed.booleanvalue()); , -          } , -          } , -          }
1597 ," -      addresult(builder', 'r', 'controller); ", -        } , -        } , -        }
1598 , -      return builder.build(); , -        throw e; , -        throw e; , -        throw e;
1599 , -    } catch (ioexception ie) { , -      } , -      } , -      }
1600 , -      checkfilesystem(); , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
1601 , -      throw new serviceexception(ie); , - , - , -
1602 , +        movedregions.remove(encodedregionname); , -      int ttl = 0; , -      int ttl = 0; , -      int ttl = 0;
1603 , } , -      hregion region = null; , -      hregion region = null; , -      hregion region = null;
1604 , } , -      regionscanner scanner = null; , -      regionscanner scanner = null; , -      regionscanner scanner = null;
1605 ,  , -      regionscannerholder rsh = null; , -      regionscannerholder rsh = null; , -      regionscannerholder rsh = null;
1606 , +    return null; , -      boolean moreresults = true; , -      boolean moreresults = true; , -      boolean moreresults = true;
1607 , +  } , -      boolean closescanner = false; , -      boolean closescanner = false; , -      boolean closescanner = false;
1608 ,  , -      scanresponse.builder builder = scanresponse.newbuilder(); , -      scanresponse.builder builder = scanresponse.newbuilder(); , -      scanresponse.builder builder = scanresponse.newbuilder();
1609 , /** , -      if (request.hasclosescanner()) { , -      if (request.hasclosescanner()) { , -      if (request.hasclosescanner()) {
1610 , -   * @return true if current call supports cellblocks , -        closescanner = request.getclosescanner(); , -        closescanner = request.getclosescanner(); , -        closescanner = request.getclosescanner();
1611 , -   */ , -      } , -      } , -      }
1612 , -  private boolean isclientcellblocksupport() { , -      int rows = 1; , -      int rows = 1; , -      int rows = 1;
1613 , -    rpccallcontext context = rpcserver.getcurrentcall(); , -      if (request.hasnumberofrows()) { , -      if (request.hasnumberofrows()) { , -      if (request.hasnumberofrows()) {
1614 , -    return context != null && context.isclientcellblocksupport(); , -        rows = request.getnumberofrows(); , -        rows = request.getnumberofrows(); , -        rows = request.getnumberofrows();
1615 , -  } , -      } , -      } , -      }
1616 , - , -      if (request.hasscannerid()) { , -      if (request.hasscannerid()) { , -      if (request.hasscannerid()) {
1617 , -  private void addresult(final mutateresponse.builder builder , -        rsh = scanners.get(scannername); , -        rsh = scanners.get(scannername); , -        rsh = scanners.get(scannername);
1618 ," -      final result result', 'final payloadcarryingrpccontroller rpcc) { ", -        if (rsh == null) { , -        if (rsh == null) { , -        if (rsh == null) {
1619 , -    if (result == null) return; ," -          log.info(""client tried to access missing scanner "" + scannername); "," -          log.info(""client tried to access missing scanner "" + scannername); "," -          log.info(""client tried to access missing scanner "" + scannername);"
1620 , -    if (isclientcellblocksupport()) { , -          throw new unknownscannerexception( , -          throw new unknownscannerexception( , -          throw new unknownscannerexception(
1621 , -      builder.setresult(protobufutil.toresultnodata(result)); ," -            ""name: "" + scannername + ""', 'already closed?""); "," -            ""name: "" + scannername + ""', 'already closed?""); "," -            ""name: "" + scannername + ""', 'already closed?"");"
1622 , -      rpcc.setcellscanner(result.cellscanner()); , -        } , -        } , -        }
1623 , -    } else { , -        scanner = rsh.s; , -        scanner = rsh.s; , -        scanner = rsh.s;
1624 , -      clientprotos.result pbr = protobufutil.toresult(result); , -        hregioninfo hri = scanner.getregioninfo(); , -        hregioninfo hri = scanner.getregioninfo(); , -        hregioninfo hri = scanner.getregioninfo();
1625 , -      builder.setresult(pbr); , -        region = getregion(hri.getregionname()); , -        region = getregion(hri.getregionname()); , -        region = getregion(hri.getregionname());
1626 , -    } ," -        if (region != rsh.r) { // yes', 'should be the same instance "," -        if (region != rsh.r) { // yes', 'should be the same instance "," -        if (region != rsh.r) { // yes', 'should be the same instance"
1627 , -  } ," -          throw new notservingregionexception(""region was re-opened after the scanner"" "," -          throw new notservingregionexception(""region was re-opened after the scanner"" "," -          throw new notservingregionexception(""region was re-opened after the scanner"""
1628 , - ," -            + scannername + "" was created: "" + hri.getregionnameasstring()); "," -            + scannername + "" was created: "" + hri.getregionnameasstring()); "," -            + scannername + "" was created: "" + hri.getregionnameasstring());"
1629 , -  // , -        } , -        } , -        }
1630 , -  // remote scanner interface , -      } else { , -      } else { , -      } else {
1631 , -  // , -        region = getregion(request.getregion()); , -        region = getregion(request.getregion()); , -        region = getregion(request.getregion());
1632 , - , -        clientprotos.scan protoscan = request.getscan(); , -        clientprotos.scan protoscan = request.getscan(); , -        clientprotos.scan protoscan = request.getscan();
1633 , -  /** , -        boolean isloadingcfsondemandset = protoscan.hasloadcolumnfamiliesondemand(); , -        boolean isloadingcfsondemandset = protoscan.hasloadcolumnfamiliesondemand(); , -        boolean isloadingcfsondemandset = protoscan.hasloadcolumnfamiliesondemand();
1634 , -   * scan data in a table. , -        scan scan = protobufutil.toscan(protoscan); , -        scan scan = protobufutil.toscan(protoscan); , -        scan scan = protobufutil.toscan(protoscan);
1635 , -   * ," [""-        // if the request doesn't set this"", 'get the default region setting. "," [""-        // if the request doesn't set this"", 'get the default region setting. "," [""-        // if the request doesn't set this"", 'get the default region setting."
1636 , -   * @param controller the rpc controller , -        if (!isloadingcfsondemandset) { , -        if (!isloadingcfsondemandset) { , -        if (!isloadingcfsondemandset) {
1637 , -   * @param request the scan request , -          scan.setloadcolumnfamiliesondemand(region.isloadingcfsondemanddefault()); , -          scan.setloadcolumnfamiliesondemand(region.isloadingcfsondemanddefault()); , -          scan.setloadcolumnfamiliesondemand(region.isloadingcfsondemanddefault());
1638 , -   * @throws serviceexception , -        } , -        } , -        }
1639 , -   */ , -        scan.getattribute(scan.scan_attributes_metrics_enable); , -        scan.getattribute(scan.scan_attributes_metrics_enable); , -        scan.getattribute(scan.scan_attributes_metrics_enable);
1640 , -  @override , -        region.preparescanner(scan); , -        region.preparescanner(scan); , -        region.preparescanner(scan);
1641 ," -  public scanresponse scan(final rpccontroller controller', 'final scanrequest request) ", -        if (region.getcoprocessorhost() != null) { , -        if (region.getcoprocessorhost() != null) { , -        if (region.getcoprocessorhost() != null) {
1642 , -  throws serviceexception { , -          scanner = region.getcoprocessorhost().prescanneropen(scan); , -          scanner = region.getcoprocessorhost().prescanneropen(scan); , -          scanner = region.getcoprocessorhost().prescanneropen(scan);
1643 , -    leases.lease lease = null; , -        } , -        } , -        }
1644 , -    string scannername = null; , -        if (scanner == null) { , -        if (scanner == null) { , -        if (scanner == null) {
1645 , -    try { , -          scanner = region.getscanner(scan); , -          scanner = region.getscanner(scan); , -          scanner = region.getscanner(scan);
1646 , -      if (!request.hasscannerid() && !request.hasscan()) { , -        } , -        } , -        }
1647 , -        throw new donotretryioexception( , -        if (region.getcoprocessorhost() != null) { , -        if (region.getcoprocessorhost() != null) { , -        if (region.getcoprocessorhost() != null) {
1648 ," -          ""missing required input: scannerid or scan""); "," -          scanner = region.getcoprocessorhost().postscanneropen(scan', 'scanner); "," -          scanner = region.getcoprocessorhost().postscanneropen(scan', 'scanner); "," -          scanner = region.getcoprocessorhost().postscanneropen(scan', 'scanner);"
1649 , -      } , -        } , -        } , -        }
1650 , -      long scannerid = -1; ," -        scannerid = addscanner(scanner', 'region); "," -        scannerid = addscanner(scanner', 'region); "," -        scannerid = addscanner(scanner', 'region);"
1651 , -      if (request.hasscannerid()) { , -        scannername = string.valueof(scannerid); , -        scannername = string.valueof(scannerid); , -        scannername = string.valueof(scannerid);
1652 , -        scannerid = request.getscannerid(); , -        ttl = this.scannerleasetimeoutperiod; , -        ttl = this.scannerleasetimeoutperiod; , -        ttl = this.scannerleasetimeoutperiod;
1653 , -        scannername = string.valueof(scannerid); , -      } , -      } , -      }
1654 , -      } , - , - , -
1655 , -      try { , -      if (rows > 0) { , -      if (rows > 0) { , -      if (rows > 0) {
1656 , -        checkopen(); , -        // if nextcallseq does not match throw exception straight away. this needs to be , -        // if nextcallseq does not match throw exception straight away. this needs to be , -        // if nextcallseq does not match throw exception straight away. this needs to be
1657 , -      } catch (ioexception e) { , -        // performed even before checking of lease. , -        // performed even before checking of lease. , -        // performed even before checking of lease.
1658 ," -        // if checkopen failed', 'server not running or filesystem gone ", -        // see hbase-5974 , -        // see hbase-5974 , -        // see hbase-5974
1659 ," [""-        // cancel this lease; filesystem is gone or we're closing or something.""] ", -        if (request.hasnextcallseq()) { , -        if (request.hasnextcallseq()) { , -        if (request.hasnextcallseq()) {
1660 , -        if (scannername != null) { , -          if (rsh == null) { , -          if (rsh == null) { , -          if (rsh == null) {
1661 , -          try { , -            rsh = scanners.get(scannername); , -            rsh = scanners.get(scannername); , -            rsh = scanners.get(scannername);
1662 , -            leases.cancellease(scannername); , -          } , -          } , -          }
1663 , -          } catch (leaseexception le) { , -          if (rsh != null) { , -          if (rsh != null) { , -          if (rsh != null) {
1664 ," -            log.info(""server shutting down and client tried to access missing scanner "" + ", -            if (request.getnextcallseq() != rsh.nextcallseq) { , -            if (request.getnextcallseq() != rsh.nextcallseq) { , -            if (request.getnextcallseq() != rsh.nextcallseq) {
1665 , -              scannername); ," -              throw new outoforderscannernextexception(""expected nextcallseq: "" + rsh.nextcallseq "," -              throw new outoforderscannernextexception(""expected nextcallseq: "" + rsh.nextcallseq "," -              throw new outoforderscannernextexception(""expected nextcallseq: "" + rsh.nextcallseq"
1666 , -          } ," -                + "" but the nextcallseq got from client: "" + request.getnextcallseq() + "," -                + "" but the nextcallseq got from client: "" + request.getnextcallseq() + "," -                + "" but the nextcallseq got from client: "" + request.getnextcallseq() +"
1667 , -        } ," -                ""; request="" + textformat.shortdebugstring(request)); "," -                ""; request="" + textformat.shortdebugstring(request)); "," -                ""; request="" + textformat.shortdebugstring(request));"
1668 , -        throw e; , -            } , -            } , -            }
1669 , -      } , -            // increment the nextcallseq value which is the next expected from client. , -            // increment the nextcallseq value which is the next expected from client. , -            // increment the nextcallseq value which is the next expected from client.
1670 , -      requestcount.increment(); , -            rsh.nextcallseq++; , -            rsh.nextcallseq++; , -            rsh.nextcallseq++;
1671 , - , -          } , -          } , -          }
1672 , -      int ttl = 0; , -        } , -        } , -        }
1673 , -      hregion region = null; , -        try { , -        try { , -        try {
1674 , -      regionscanner scanner = null; , -          // remove lease while its being processed in server; protects against case , -          // remove lease while its being processed in server; protects against case , -          // remove lease while its being processed in server; protects against case
1675 , -      regionscannerholder rsh = null; , -          // where processing of request takes > lease expiration time. , -          // where processing of request takes > lease expiration time. , -          // where processing of request takes > lease expiration time.
1676 , -      boolean moreresults = true; , -          lease = leases.removelease(scannername); , -          lease = leases.removelease(scannername); , -          lease = leases.removelease(scannername);
1677 , -      boolean closescanner = false; , -          list<result> results = new arraylist<result>(rows); , -          list<result> results = new arraylist<result>(rows); , -          list<result> results = new arraylist<result>(rows);
1678 , -      scanresponse.builder builder = scanresponse.newbuilder(); , -          long currentscanresultsize = 0; , -          long currentscanresultsize = 0; , -          long currentscanresultsize = 0;
1679 , -      if (request.hasclosescanner()) { , - , - , -
1680 , -        closescanner = request.getclosescanner(); , -          boolean done = false; , -          boolean done = false; , -          boolean done = false;
1681 , -      } , -          // call coprocessor. get region info from scanner. , -          // call coprocessor. get region info from scanner. , -          // call coprocessor. get region info from scanner.
1682 , -      int rows = 1; , -          if (region != null && region.getcoprocessorhost() != null) { , -          if (region != null && region.getcoprocessorhost() != null) { , -          if (region != null && region.getcoprocessorhost() != null) {
1683 , -      if (request.hasnumberofrows()) { , -            boolean bypass = region.getcoprocessorhost().prescannernext( , -            boolean bypass = region.getcoprocessorhost().prescannernext( , -            boolean bypass = region.getcoprocessorhost().prescannernext(
1684 , -        rows = request.getnumberofrows(); ," -              scanner', 'results', 'rows); "," -              scanner', 'results', 'rows); "," -              scanner', 'results', 'rows);"
1685 , -      } , -            if (!results.isempty()) { , -            if (!results.isempty()) { , -            if (!results.isempty()) {
1686 , -      if (request.hasscannerid()) { , -              for (result r : results) { , -              for (result r : results) { , -              for (result r : results) {
1687 , -        rsh = scanners.get(scannername); , -                if (maxscannerresultsize < long.max_value){ , -                if (maxscannerresultsize < long.max_value){ , -                if (maxscannerresultsize < long.max_value){
1688 , -        if (rsh == null) { , -                  for (cell kv : r.rawcells()) { , -                  for (cell kv : r.rawcells()) { , -                  for (cell kv : r.rawcells()) {
1689 ," -          log.info(""client tried to access missing scanner "" + scannername); ", -                    // todo , -                    // todo , -                    // todo
1690 , -          throw new unknownscannerexception( , -                    currentscanresultsize += keyvalueutil.ensurekeyvalue(kv).heapsize(); , -                    currentscanresultsize += keyvalueutil.ensurekeyvalue(kv).heapsize(); , -                    currentscanresultsize += keyvalueutil.ensurekeyvalue(kv).heapsize();
1691 ," -            ""name: "" + scannername + ""', 'already closed?""); ", -                  } , -                  } , -                  }
1692 , -        } , -                } , -                } , -                }
1693 , -        scanner = rsh.s; , -              } , -              } , -              }
1694 , -        hregioninfo hri = scanner.getregioninfo(); , -            } , -            } , -            }
1695 , -        region = getregion(hri.getregionname()); , -            if (bypass != null && bypass.booleanvalue()) { , -            if (bypass != null && bypass.booleanvalue()) { , -            if (bypass != null && bypass.booleanvalue()) {
1696 ," -        if (region != rsh.r) { // yes', 'should be the same instance ", -              done = true; , -              done = true; , -              done = true;
1697 ," -          throw new notservingregionexception(""region was re-opened after the scanner"" ", -            } , -            } , -            }
1698 ," -            + scannername + "" was created: "" + hri.getregionnameasstring()); ", -          } , -          } , -          }
1699 , -        } , - , - , -
1700 , -      } else { , -          if (!done) { , -          if (!done) { , -          if (!done) {
1701 , -        region = getregion(request.getregion()); , -            long maxresultsize = scanner.getmaxresultsize(); , -            long maxresultsize = scanner.getmaxresultsize(); , -            long maxresultsize = scanner.getmaxresultsize();
1702 , -        clientprotos.scan protoscan = request.getscan(); , -            if (maxresultsize <= 0) { , -            if (maxresultsize <= 0) { , -            if (maxresultsize <= 0) {
1703 , -        boolean isloadingcfsondemandset = protoscan.hasloadcolumnfamiliesondemand(); , -              maxresultsize = maxscannerresultsize; , -              maxresultsize = maxscannerresultsize; , -              maxresultsize = maxscannerresultsize;
1704 , -        scan scan = protobufutil.toscan(protoscan); , -            } , -            } , -            }
1705 ," [""-        // if the request doesn't set this"", 'get the default region setting. ", -            list<cell> values = new arraylist<cell>(); , -            list<cell> values = new arraylist<cell>(); , -            list<cell> values = new arraylist<cell>();
1706 , -        if (!isloadingcfsondemandset) { , -            region.startregionoperation(operation.scan); , -            region.startregionoperation(operation.scan); , -            region.startregionoperation(operation.scan);
1707 , -          scan.setloadcolumnfamiliesondemand(region.isloadingcfsondemanddefault()); , -            try { , -            try { , -            try {
1708 , -        } , -              int i = 0; , -              int i = 0; , -              int i = 0;
1709 , -        scan.getattribute(scan.scan_attributes_metrics_enable); , -              synchronized(scanner) { , -              synchronized(scanner) { , -              synchronized(scanner) {
1710 , -        region.preparescanner(scan); , -                for (; i < rows , -                for (; i < rows , -                for (; i < rows
1711 , -        if (region.getcoprocessorhost() != null) { , -                    && currentscanresultsize < maxresultsize; ) { , -                    && currentscanresultsize < maxresultsize; ) { , -                    && currentscanresultsize < maxresultsize; ) {
1712 , -          scanner = region.getcoprocessorhost().prescanneropen(scan); , -                  // collect values to be returned here , -                  // collect values to be returned here , -                  // collect values to be returned here
1713 , -        } , -                  boolean morerows = scanner.nextraw(values); , -                  boolean morerows = scanner.nextraw(values); , -                  boolean morerows = scanner.nextraw(values);
1714 , -        if (scanner == null) { , -                  if (!values.isempty()) { , -                  if (!values.isempty()) { , -                  if (!values.isempty()) {
1715 , -          scanner = region.getscanner(scan); , -                    if (maxscannerresultsize < long.max_value){ , -                    if (maxscannerresultsize < long.max_value){ , -                    if (maxscannerresultsize < long.max_value){
1716 , -        } , -                      for (cell kv : values) { , -                      for (cell kv : values) { , -                      for (cell kv : values) {
1717 , -        if (region.getcoprocessorhost() != null) { , -                        currentscanresultsize += keyvalueutil.ensurekeyvalue(kv).heapsize(); , -                        currentscanresultsize += keyvalueutil.ensurekeyvalue(kv).heapsize(); , -                        currentscanresultsize += keyvalueutil.ensurekeyvalue(kv).heapsize();
1718 ," -          scanner = region.getcoprocessorhost().postscanneropen(scan', 'scanner); ", -                      } , -                      } , -                      }
1719 , -        } , -                    } , -                    } , -                    }
1720 ," -        scannerid = addscanner(scanner', 'region); ", -                    results.add(result.create(values)); , -                    results.add(result.create(values)); , -                    results.add(result.create(values));
1721 , -        scannername = string.valueof(scannerid); , -                    i++; , -                    i++; , -                    i++;
1722 , -        ttl = this.scannerleasetimeoutperiod; , -                  } , -                  } , -                  }
1723 , -      } , -                  if (!morerows) { , -                  if (!morerows) { , -                  if (!morerows) {
1724 , - , -                    break; , -                    break; , -                    break;
1725 , -      if (rows > 0) { , -                  } , -                  } , -                  }
1726 , -        // if nextcallseq does not match throw exception straight away. this needs to be , -                  values.clear(); , -                  values.clear(); , -                  values.clear();
1727 , -        // performed even before checking of lease. , -                } , -                } , -                }
1728 , -        // see hbase-5974 , -              } , -              } , -              }
1729 , -        if (request.hasnextcallseq()) { , -              region.readrequestscount.add(i); , -              region.readrequestscount.add(i); , -              region.readrequestscount.add(i);
1730 , -          if (rsh == null) { , -            } finally { , -            } finally { , -            } finally {
1731 , -            rsh = scanners.get(scannername); , -              region.closeregionoperation(); , -              region.closeregionoperation(); , -              region.closeregionoperation();
1732 , -          } , -            } , -            } , -            }
1733 , -          if (rsh != null) { , - , - , -
1734 , -            if (request.getnextcallseq() != rsh.nextcallseq) { , -            // coprocessor postnext hook , -            // coprocessor postnext hook , -            // coprocessor postnext hook
1735 ," -              throw new outoforderscannernextexception(""expected nextcallseq: "" + rsh.nextcallseq ", -            if (region != null && region.getcoprocessorhost() != null) { , -            if (region != null && region.getcoprocessorhost() != null) { , -            if (region != null && region.getcoprocessorhost() != null) {
1736 ," -                + "" but the nextcallseq got from client: "" + request.getnextcallseq() + "," -              region.getcoprocessorhost().postscannernext(scanner', 'results', 'rows', 'true); "," -              region.getcoprocessorhost().postscannernext(scanner', 'results', 'rows', 'true); "," -              region.getcoprocessorhost().postscannernext(scanner', 'results', 'rows', 'true);"
1737 ," -                ""; request="" + textformat.shortdebugstring(request)); ", -            } , -            } , -            }
1738 , -            } , -          } , -          } , -          }
1739 , -            // increment the nextcallseq value which is the next expected from client. , - , - , -
1740 , -            rsh.nextcallseq++; ," [""-          // if the scanner's filter - if any - is done with the scan""] "," [""-          // if the scanner's filter - if any - is done with the scan""] "," [""-          // if the scanner's filter - if any - is done with the scan""]"
1741 , -          } , -          // and wants to tell the client to stop the scan. this is done by passing , -          // and wants to tell the client to stop the scan. this is done by passing , -          // and wants to tell the client to stop the scan. this is done by passing
1742 , -        } ," -          // a null result', 'and setting moreresults to false. "," -          // a null result', 'and setting moreresults to false. "," -          // a null result', 'and setting moreresults to false."
1743 , -        try { , -          if (scanner.isfilterdone() && results.isempty()) { , -          if (scanner.isfilterdone() && results.isempty()) { , -          if (scanner.isfilterdone() && results.isempty()) {
1744 , -          // remove lease while its being processed in server; protects against case , -            moreresults = false; , -            moreresults = false; , -            moreresults = false;
1745 , -          // where processing of request takes > lease expiration time. , -            results = null; , -            results = null; , -            results = null;
1746 , -          lease = leases.removelease(scannername); , -          } else { , -          } else { , -          } else {
1747 , -          list<result> results = new arraylist<result>(rows); ," -            addresults(builder', 'results', 'controller); "," -            addresults(builder', 'results', 'controller); "," -            addresults(builder', 'results', 'controller);"
1748 , -          long currentscanresultsize = 0; , -          } , -          } , -          }
1749 , - , -        } finally { , -        } finally { , -        } finally {
1750 , -          boolean done = false; ," [""-          // we're done. on way out re-add the above removed lease.""] "," [""-          // we're done. on way out re-add the above removed lease.""] "," [""-          // we're done. on way out re-add the above removed lease.""]"
1751 , -          // call coprocessor. get region info from scanner. , -          // adding resets expiration time on lease. , -          // adding resets expiration time on lease. , -          // adding resets expiration time on lease.
1752 , -          if (region != null && region.getcoprocessorhost() != null) { , -          if (scanners.containskey(scannername)) { , -          if (scanners.containskey(scannername)) { , -          if (scanners.containskey(scannername)) {
1753 , -            boolean bypass = region.getcoprocessorhost().prescannernext( , -            if (lease != null) leases.addlease(lease); , -            if (lease != null) leases.addlease(lease); , -            if (lease != null) leases.addlease(lease);
1754 ," -              scanner', 'results', 'rows); ", -            ttl = this.scannerleasetimeoutperiod; , -            ttl = this.scannerleasetimeoutperiod; , -            ttl = this.scannerleasetimeoutperiod;
1755 , -            if (!results.isempty()) { , -          } , -          } , -          }
1756 , -              for (result r : results) { , -        } , -        } , -        }
1757 , -                if (maxscannerresultsize < long.max_value){ , -      } , -      } , -      }
1758 , -                  for (cell kv : r.rawcells()) { , - , - , -
1759 , -                    // todo , -      if (!moreresults || closescanner) { , -      if (!moreresults || closescanner) { , -      if (!moreresults || closescanner) {
1760 , -                    currentscanresultsize += keyvalueutil.ensurekeyvalue(kv).heapsize(); , -        ttl = 0; , -        ttl = 0; , -        ttl = 0;
1761 , -                  } , -        moreresults = false; , -        moreresults = false; , -        moreresults = false;
1762 , -                } , -        if (region != null && region.getcoprocessorhost() != null) { , -        if (region != null && region.getcoprocessorhost() != null) { , -        if (region != null && region.getcoprocessorhost() != null) {
1763 , -              } , -          if (region.getcoprocessorhost().prescannerclose(scanner)) { , -          if (region.getcoprocessorhost().prescannerclose(scanner)) { , -          if (region.getcoprocessorhost().prescannerclose(scanner)) {
1764 , -            } , -            return builder.build(); // bypass , -            return builder.build(); // bypass , -            return builder.build(); // bypass
1765 , -            if (bypass != null && bypass.booleanvalue()) { , -          } , -          } , -          }
1766 , -              done = true; , -        } , -        } , -        }
1767 , -            } , -        rsh = scanners.remove(scannername); , -        rsh = scanners.remove(scannername); , -        rsh = scanners.remove(scannername);
1768 , -          } , -        if (rsh != null) { , -        if (rsh != null) { , -        if (rsh != null) {
1769 , - , -          scanner = rsh.s; , -          scanner = rsh.s; , -          scanner = rsh.s;
1770 , -          if (!done) { , -          scanner.close(); , -          scanner.close(); , -          scanner.close();
1771 , -            long maxresultsize = scanner.getmaxresultsize(); , -          leases.cancellease(scannername); , -          leases.cancellease(scannername); , -          leases.cancellease(scannername);
1772 , -            if (maxresultsize <= 0) { , -          if (region != null && region.getcoprocessorhost() != null) { , -          if (region != null && region.getcoprocessorhost() != null) { , -          if (region != null && region.getcoprocessorhost() != null) {
1773 , -              maxresultsize = maxscannerresultsize; , -            region.getcoprocessorhost().postscannerclose(scanner); , -            region.getcoprocessorhost().postscannerclose(scanner); , -            region.getcoprocessorhost().postscannerclose(scanner);
1774 , -            } , -          } , -          } , -          }
1775 , -            list<cell> values = new arraylist<cell>(); , -        } , -        } , -        }
1776 , -            region.startregionoperation(operation.scan); , -      } , -      } , -      }
1777 , -            try { , - , - , -
1778 , -              int i = 0; , -      if (ttl > 0) { , -      if (ttl > 0) { , -      if (ttl > 0) {
1779 , -              synchronized(scanner) { , -        builder.setttl(ttl); , -        builder.setttl(ttl); , -        builder.setttl(ttl);
1780 , -                for (; i < rows , -      } , -      } , -      }
1781 , -                    && currentscanresultsize < maxresultsize; ) { , -      builder.setscannerid(scannerid); , -      builder.setscannerid(scannerid); , -      builder.setscannerid(scannerid);
1782 , -                  // collect values to be returned here , -      builder.setmoreresults(moreresults); , -      builder.setmoreresults(moreresults); , -      builder.setmoreresults(moreresults);
1783 , -                  boolean morerows = scanner.nextraw(values); , -      return builder.build(); , -      return builder.build(); , -      return builder.build();
1784 , -                  if (!values.isempty()) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
1785 , -                    if (maxscannerresultsize < long.max_value){ , -      if (scannername != null && ie instanceof notservingregionexception) { , -      if (scannername != null && ie instanceof notservingregionexception) { , -      if (scannername != null && ie instanceof notservingregionexception) {
1786 , -                      for (cell kv : values) { , -        regionscannerholder rsh = scanners.remove(scannername); , -        regionscannerholder rsh = scanners.remove(scannername); , -        regionscannerholder rsh = scanners.remove(scannername);
1787 , -                        currentscanresultsize += keyvalueutil.ensurekeyvalue(kv).heapsize(); , -        if (rsh != null) { , -        if (rsh != null) { , -        if (rsh != null) {
1788 , -                      } , -          try { , -          try { , -          try {
1789 , -                    } , -            regionscanner scanner = rsh.s; , -            regionscanner scanner = rsh.s; , -            regionscanner scanner = rsh.s;
1790 , -                    results.add(result.create(values)); , -            scanner.close(); , -            scanner.close(); , -            scanner.close();
1791 , -                    i++; , -            leases.cancellease(scannername); , -            leases.cancellease(scannername); , -            leases.cancellease(scannername);
1792 , -                  } , -          } catch (ioexception e) {} , -          } catch (ioexception e) {} , -          } catch (ioexception e) {}
1793 , -                  if (!morerows) { , -        } , -        } , -        }
1794 , -                    break; , -      } , -      } , -      }
1795 , -                  } , -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
1796 , -                  values.clear(); , -    } , -    } , -    }
1797 , -                } , -  } , -  } , -  }
1798 , -              } , - , - , -
1799 , -              region.readrequestscount.add(i); ," -  private void addresults(final scanresponse.builder builder', 'final list<result> results "," -  private void addresults(final scanresponse.builder builder', 'final list<result> results "," -  private void addresults(final scanresponse.builder builder', 'final list<result> results"
1800 , -            } finally { , -      final rpccontroller controller) { , -      final rpccontroller controller) { , -      final rpccontroller controller) {
1801 , -              region.closeregionoperation(); , -    if (results == null || results.isempty()) return; , -    if (results == null || results.isempty()) return; , -    if (results == null || results.isempty()) return;
1802 , -            } , -    if (isclientcellblocksupport()) { , -    if (isclientcellblocksupport()) { , -    if (isclientcellblocksupport()) {
1803 , - , -      for (result res : results) { , -      for (result res : results) { , -      for (result res : results) {
1804 , -            // coprocessor postnext hook , -        builder.addcellsperresult(res.size()); , -        builder.addcellsperresult(res.size()); , -        builder.addcellsperresult(res.size());
1805 , -            if (region != null && region.getcoprocessorhost() != null) { , -      } , -      } , -      }
1806 ," -              region.getcoprocessorhost().postscannernext(scanner', 'results', 'rows', 'true); ", -      ((payloadcarryingrpccontroller)controller). , -      ((payloadcarryingrpccontroller)controller). , -      ((payloadcarryingrpccontroller)controller).
1807 , -            } , -        setcellscanner(cellutil.createcellscanner(results)); , -        setcellscanner(cellutil.createcellscanner(results)); , -        setcellscanner(cellutil.createcellscanner(results));
1808 , -          } , -    } else { , -    } else { , -    } else {
1809 , - , -      for (result res: results) { , -      for (result res: results) { , -      for (result res: results) {
1810 ," [""-          // if the scanner's filter - if any - is done with the scan""] ", -        clientprotos.result pbr = protobufutil.toresult(res); , -        clientprotos.result pbr = protobufutil.toresult(res); , -        clientprotos.result pbr = protobufutil.toresult(res);
1811 , -          // and wants to tell the client to stop the scan. this is done by passing , -        builder.addresults(pbr); , -        builder.addresults(pbr); , -        builder.addresults(pbr);
1812 ," -          // a null result', 'and setting moreresults to false. ", -      } , -      } , -      }
1813 , -          if (scanner.isfilterdone() && results.isempty()) { , -    } , -    } , -    }
1814 , -            moreresults = false; , -  } , -  } , -  }
1815 , -            results = null; , - , - , -
1816 , -          } else { , -  /** , -  /** , -  /**
1817 ," -            addresults(builder', 'results', 'controller); ", -   * atomically bulk load several hfiles into an open region , -   * atomically bulk load several hfiles into an open region , -   * atomically bulk load several hfiles into an open region
1818 , -          } ," -   * @return true if successful', 'false is failed but recoverably (no action) "," -   * @return true if successful', 'false is failed but recoverably (no action) "," -   * @return true if successful', 'false is failed but recoverably (no action)"
1819 , -        } finally { , -   * @throws ioexception if failed unrecoverably , -   * @throws ioexception if failed unrecoverably , -   * @throws ioexception if failed unrecoverably
1820 ," [""-          // we're done. on way out re-add the above removed lease.""] ", -   */ , -   */ , -   */
1821 , -          // adding resets expiration time on lease. , -  @override , -  @override , -  @override
1822 , -          if (scanners.containskey(scannername)) { , -  public bulkloadhfileresponse bulkloadhfile(final rpccontroller controller , -  public bulkloadhfileresponse bulkloadhfile(final rpccontroller controller , -  public bulkloadhfileresponse bulkloadhfile(final rpccontroller controller
1823 , -            if (lease != null) leases.addlease(lease); , -      final bulkloadhfilerequest request) throws serviceexception { , -      final bulkloadhfilerequest request) throws serviceexception { , -      final bulkloadhfilerequest request) throws serviceexception {
1824 , -            ttl = this.scannerleasetimeoutperiod; , -    try { , -    try { , -    try {
1825 , -          } , -      checkopen(); , -      checkopen(); , -      checkopen();
1826 , -        } , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
1827 , -      } , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion());
1828 , - ," -      list<pair<byte[]', 'string>> familypaths = new arraylist<pair<byte[]', 'string>>(); "," -      list<pair<byte[]', 'string>> familypaths = new arraylist<pair<byte[]', 'string>>(); "," -      list<pair<byte[]', 'string>> familypaths = new arraylist<pair<byte[]', 'string>>();"
1829 , -      if (!moreresults || closescanner) { , -      for (familypath familypath: request.getfamilypathlist()) { , -      for (familypath familypath: request.getfamilypathlist()) { , -      for (familypath familypath: request.getfamilypathlist()) {
1830 , -        ttl = 0; ," -        familypaths.add(new pair<byte[]', 'string>(familypath.getfamily().tobytearray() "," -        familypaths.add(new pair<byte[]', 'string>(familypath.getfamily().tobytearray() "," -        familypaths.add(new pair<byte[]', 'string>(familypath.getfamily().tobytearray()"
1831 , -        moreresults = false; , -          familypath.getpath())); , -          familypath.getpath())); , -          familypath.getpath()));
1832 , -        if (region != null && region.getcoprocessorhost() != null) { , -      } , -      } , -      }
1833 , -          if (region.getcoprocessorhost().prescannerclose(scanner)) { , -      boolean bypass = false; , -      boolean bypass = false; , -      boolean bypass = false;
1834 , -            return builder.build(); // bypass , -      if (region.getcoprocessorhost() != null) { , -      if (region.getcoprocessorhost() != null) { , -      if (region.getcoprocessorhost() != null) {
1835 , -          } , -        bypass = region.getcoprocessorhost().prebulkloadhfile(familypaths); , -        bypass = region.getcoprocessorhost().prebulkloadhfile(familypaths); , -        bypass = region.getcoprocessorhost().prebulkloadhfile(familypaths);
1836 , -        } , -      } , -      } , -      }
1837 , -        rsh = scanners.remove(scannername); , -      boolean loaded = false; , -      boolean loaded = false; , -      boolean loaded = false;
1838 , -        if (rsh != null) { , -      if (!bypass) { , -      if (!bypass) { , -      if (!bypass) {
1839 , -          scanner = rsh.s; ," -        loaded = region.bulkloadhfiles(familypaths', 'request.getassignseqnum()); "," -        loaded = region.bulkloadhfiles(familypaths', 'request.getassignseqnum()); "," -        loaded = region.bulkloadhfiles(familypaths', 'request.getassignseqnum());"
1840 , -          scanner.close(); , -      } , -      } , -      }
1841 , -          leases.cancellease(scannername); , -      if (region.getcoprocessorhost() != null) { , -      if (region.getcoprocessorhost() != null) { , -      if (region.getcoprocessorhost() != null) {
1842 , -          if (region != null && region.getcoprocessorhost() != null) { ," -        loaded = region.getcoprocessorhost().postbulkloadhfile(familypaths', 'loaded); "," -        loaded = region.getcoprocessorhost().postbulkloadhfile(familypaths', 'loaded); "," -        loaded = region.getcoprocessorhost().postbulkloadhfile(familypaths', 'loaded);"
1843 , -            region.getcoprocessorhost().postscannerclose(scanner); , -      } , -      } , -      }
1844 , -          } , -      bulkloadhfileresponse.builder builder = bulkloadhfileresponse.newbuilder(); , -      bulkloadhfileresponse.builder builder = bulkloadhfileresponse.newbuilder(); , -      bulkloadhfileresponse.builder builder = bulkloadhfileresponse.newbuilder();
1845 , -        } , -      builder.setloaded(loaded); , -      builder.setloaded(loaded); , -      builder.setloaded(loaded);
1846 , -      } , -      return builder.build(); , -      return builder.build(); , -      return builder.build();
1847 , - , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
1848 , -      if (ttl > 0) { , -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
1849 , -        builder.setttl(ttl); , -    } , -    } , -    }
1850 , -      } , -  } , -  } , -  }
1851 , -      builder.setscannerid(scannerid); , - , - , -
1852 , -      builder.setmoreresults(moreresults); , -  @override , -  @override , -  @override
1853 , -      return builder.build(); , -  public coprocessorserviceresponse execservice(final rpccontroller controller , -  public coprocessorserviceresponse execservice(final rpccontroller controller , -  public coprocessorserviceresponse execservice(final rpccontroller controller
1854 , -    } catch (ioexception ie) { , -      final coprocessorservicerequest request) throws serviceexception { , -      final coprocessorservicerequest request) throws serviceexception { , -      final coprocessorservicerequest request) throws serviceexception {
1855 , -      if (scannername != null && ie instanceof notservingregionexception) { , -    try { , -    try { , -    try {
1856 , -        regionscannerholder rsh = scanners.remove(scannername); , -      checkopen(); , -      checkopen(); , -      checkopen();
1857 , -        if (rsh != null) { , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
1858 , -          try { , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion());
1859 , -            regionscanner scanner = rsh.s; ," -      message result = execserviceonregion(region', 'request.getcall()); "," -      message result = execserviceonregion(region', 'request.getcall()); "," -      message result = execserviceonregion(region', 'request.getcall());"
1860 , -            scanner.close(); , -      coprocessorserviceresponse.builder builder = , -      coprocessorserviceresponse.builder builder = , -      coprocessorserviceresponse.builder builder =
1861 , -            leases.cancellease(scannername); , -          coprocessorserviceresponse.newbuilder(); , -          coprocessorserviceresponse.newbuilder(); , -          coprocessorserviceresponse.newbuilder();
1862 , -          } catch (ioexception e) {} , -      builder.setregion(requestconverter.buildregionspecifier( , -      builder.setregion(requestconverter.buildregionspecifier( , -      builder.setregion(requestconverter.buildregionspecifier(
1863 , -        } ," -          regionspecifiertype.region_name', 'region.getregionname())); "," -          regionspecifiertype.region_name', 'region.getregionname())); "," -          regionspecifiertype.region_name', 'region.getregionname()));"
1864 , -      } , -      builder.setvalue( , -      builder.setvalue( , -      builder.setvalue(
1865 , -      throw new serviceexception(ie); , -          builder.getvaluebuilder().setname(result.getclass().getname()) , -          builder.getvaluebuilder().setname(result.getclass().getname()) , -          builder.getvaluebuilder().setname(result.getclass().getname())
1866 , -    } , -              .setvalue(result.tobytestring())); , -              .setvalue(result.tobytestring())); , -              .setvalue(result.tobytestring()));
1867 , -  } , -      return builder.build(); , -      return builder.build(); , -      return builder.build();
1868 , - , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
1869 ," -  private void addresults(final scanresponse.builder builder', 'final list<result> results ", -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
1870 , -      final rpccontroller controller) { , -    } , -    } , -    }
1871 , -    if (results == null || results.isempty()) return; , -  } , -  } , -  }
1872 , -    if (isclientcellblocksupport()) { , - , - , -
1873 , -      for (result res : results) { , -  private message execserviceonregion(hregion region , -  private message execserviceonregion(hregion region , -  private message execserviceonregion(hregion region
1874 , -        builder.addcellsperresult(res.size()); , -      final clientprotos.coprocessorservicecall servicecall) throws ioexception { , -      final clientprotos.coprocessorservicecall servicecall) throws ioexception { , -      final clientprotos.coprocessorservicecall servicecall) throws ioexception {
1875 , -      } , -    // ignore the passed in controller (from the serialized call) , -    // ignore the passed in controller (from the serialized call) , -    // ignore the passed in controller (from the serialized call)
1876 , -      ((payloadcarryingrpccontroller)controller). , -    serverrpccontroller execcontroller = new serverrpccontroller(); , -    serverrpccontroller execcontroller = new serverrpccontroller(); , -    serverrpccontroller execcontroller = new serverrpccontroller();
1877 , -        setcellscanner(cellutil.createcellscanner(results)); ," -    message result = region.execservice(execcontroller', 'servicecall); "," -    message result = region.execservice(execcontroller', 'servicecall); "," -    message result = region.execservice(execcontroller', 'servicecall);"
1878 , -    } else { , -    if (execcontroller.getfailedon() != null) { , -    if (execcontroller.getfailedon() != null) { , -    if (execcontroller.getfailedon() != null) {
1879 , -      for (result res: results) { , -      throw execcontroller.getfailedon(); , -      throw execcontroller.getfailedon(); , -      throw execcontroller.getfailedon();
1880 , -        clientprotos.result pbr = protobufutil.toresult(res); , -    } , -    } , -    }
1881 , -        builder.addresults(pbr); , -    return result; , -    return result; , -    return result;
1882 , -      } , -  } , -  } , -  }
1883 , -    } , - , - , -
1884 , -  } , -  /** , -  /** , -  /**
1885 , - ," -   * execute multiple actions on a table: get', 'mutate', 'and/or execcoprocessor "," -   * execute multiple actions on a table: get', 'mutate', 'and/or execcoprocessor "," -   * execute multiple actions on a table: get', 'mutate', 'and/or execcoprocessor"
1886 , -  /** , -   * , -   * , -   *
1887 , -   * atomically bulk load several hfiles into an open region , -   * @param rpcc the rpc controller , -   * @param rpcc the rpc controller , -   * @param rpcc the rpc controller
1888 ," -   * @return true if successful', 'false is failed but recoverably (no action) ", -   * @param request the multi request , -   * @param request the multi request , -   * @param request the multi request
1889 , -   * @throws ioexception if failed unrecoverably , -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
1892 , -  public bulkloadhfileresponse bulkloadhfile(final rpccontroller controller ," -  public multiresponse multi(final rpccontroller rpcc', 'final multirequest request) "," -  public multiresponse multi(final rpccontroller rpcc', 'final multirequest request) "," -  public multiresponse multi(final rpccontroller rpcc', 'final multirequest request)"
1893 , -      final bulkloadhfilerequest request) throws serviceexception { , -  throws serviceexception { , -  throws serviceexception { , -  throws serviceexception {
1896 , -      requestcount.increment(); , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
1897 , -      hregion region = getregion(request.getregion()); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
1898 ," -      list<pair<byte[]', 'string>> familypaths = new arraylist<pair<byte[]', 'string>>(); ", -    } , -    } , -    }
1899 , -      for (familypath familypath: request.getfamilypathlist()) { , - , - , -
1900 ," -        familypaths.add(new pair<byte[]', 'string>(familypath.getfamily().tobytearray() "," [""-    // rpc controller is how we bring in data via the back door;  it is unprotobuf'ed data.""] "," [""-    // rpc controller is how we bring in data via the back door;  it is unprotobuf'ed data.""] "," [""-    // rpc controller is how we bring in data via the back door;  it is unprotobuf'ed data.""]"
1901 , -          familypath.getpath())); , -    // it is also the conduit via which we pass back data. , -    // it is also the conduit via which we pass back data. , -    // it is also the conduit via which we pass back data.
1902 , -      } , -    payloadcarryingrpccontroller controller = (payloadcarryingrpccontroller)rpcc; , -    payloadcarryingrpccontroller controller = (payloadcarryingrpccontroller)rpcc; , -    payloadcarryingrpccontroller controller = (payloadcarryingrpccontroller)rpcc;
1903 , -      boolean bypass = false; , -    cellscanner cellscanner = controller != null ? controller.cellscanner(): null; , -    cellscanner cellscanner = controller != null ? controller.cellscanner(): null; , -    cellscanner cellscanner = controller != null ? controller.cellscanner(): null;
1904 , -      if (region.getcoprocessorhost() != null) { , -    if (controller != null) controller.setcellscanner(null); , -    if (controller != null) controller.setcellscanner(null); , -    if (controller != null) controller.setcellscanner(null);
1905 , -        bypass = region.getcoprocessorhost().prebulkloadhfile(familypaths); , - , - , -
1906 , -      } , -    long noncegroup = request.hasnoncegroup() ? request.getnoncegroup() : hconstants.no_nonce; , -    long noncegroup = request.hasnoncegroup() ? request.getnoncegroup() : hconstants.no_nonce; , -    long noncegroup = request.hasnoncegroup() ? request.getnoncegroup() : hconstants.no_nonce;
1907 , -      boolean loaded = false; , - , - , -
1908 , -      if (!bypass) { ," [""-    // this will contain all the cells that we need to return. it's created later"", 'if needed. "," [""-    // this will contain all the cells that we need to return. it's created later"", 'if needed. "," [""-    // this will contain all the cells that we need to return. it's created later"", 'if needed."
1909 ," -        loaded = region.bulkloadhfiles(familypaths', 'request.getassignseqnum()); ", -    list<cellscannable> cellstoreturn = null; , -    list<cellscannable> cellstoreturn = null; , -    list<cellscannable> cellstoreturn = null;
1910 , -      } , -    multiresponse.builder responsebuilder = multiresponse.newbuilder(); , -    multiresponse.builder responsebuilder = multiresponse.newbuilder(); , -    multiresponse.builder responsebuilder = multiresponse.newbuilder();
1911 , -      if (region.getcoprocessorhost() != null) { , -    regionactionresult.builder regionactionresultbuilder = regionactionresult.newbuilder(); , -    regionactionresult.builder regionactionresultbuilder = regionactionresult.newbuilder(); , -    regionactionresult.builder regionactionresultbuilder = regionactionresult.newbuilder();
1912 ," -        loaded = region.getcoprocessorhost().postbulkloadhfile(familypaths', 'loaded); ", - , - , -
1913 , -      } , -    for (regionaction regionaction : request.getregionactionlist()) { , -    for (regionaction regionaction : request.getregionactionlist()) { , -    for (regionaction regionaction : request.getregionactionlist()) {
1914 , -      bulkloadhfileresponse.builder builder = bulkloadhfileresponse.newbuilder(); , -      this.requestcount.add(regionaction.getactioncount()); , -      this.requestcount.add(regionaction.getactioncount()); , -      this.requestcount.add(regionaction.getactioncount());
1915 , -      builder.setloaded(loaded); , -      hregion region; , -      hregion region; , -      hregion region;
1916 , -      return builder.build(); , -      regionactionresultbuilder.clear(); , -      regionactionresultbuilder.clear(); , -      regionactionresultbuilder.clear();
1917 , -    } catch (ioexception ie) { , -      try { , -      try { , -      try {
1918 , -      throw new serviceexception(ie); , -        region = getregion(regionaction.getregion()); , -        region = getregion(regionaction.getregion()); , -        region = getregion(regionaction.getregion());
1919 , -    } , -      } catch (ioexception e) { , -      } catch (ioexception e) { , -      } catch (ioexception e) {
1920 , -  } , -        regionactionresultbuilder.setexception(responseconverter.buildexception(e)); , -        regionactionresultbuilder.setexception(responseconverter.buildexception(e)); , -        regionactionresultbuilder.setexception(responseconverter.buildexception(e));
1921 , - , -        responsebuilder.addregionactionresult(regionactionresultbuilder.build()); , -        responsebuilder.addregionactionresult(regionactionresultbuilder.build()); , -        responsebuilder.addregionactionresult(regionactionresultbuilder.build());
1922 , -  @override ," [""-        continue;  // for this region it's a failure.""] "," [""-        continue;  // for this region it's a failure.""] "," [""-        continue;  // for this region it's a failure.""]"
1923 , -  public coprocessorserviceresponse execservice(final rpccontroller controller , -      } , -      } , -      }
1924 , -      final coprocessorservicerequest request) throws serviceexception { , - , - , -
1925 , -    try { , -      if (regionaction.hasatomic() && regionaction.getatomic()) { , -      if (regionaction.hasatomic() && regionaction.getatomic()) { , -      if (regionaction.hasatomic() && regionaction.getatomic()) {
1926 , -      checkopen(); , -        // how does this call happen?  it may need some work to play well w/ the surroundings. , -        // how does this call happen?  it may need some work to play well w/ the surroundings. , -        // how does this call happen?  it may need some work to play well w/ the surroundings.
1927 , -      requestcount.increment(); , -        // need to return an item per action along w/ action index.  todo. , -        // need to return an item per action along w/ action index.  todo. , -        // need to return an item per action along w/ action index.  todo.
1928 , -      hregion region = getregion(request.getregion()); , -        try { , -        try { , -        try {
1929 ," -      message result = execserviceonregion(region', 'request.getcall()); "," -          mutaterows(region', 'regionaction.getactionlist()', 'cellscanner); "," -          mutaterows(region', 'regionaction.getactionlist()', 'cellscanner); "," -          mutaterows(region', 'regionaction.getactionlist()', 'cellscanner);"
1930 , -      coprocessorserviceresponse.builder builder = , -        } catch (ioexception e) { , -        } catch (ioexception e) { , -        } catch (ioexception e) {
1931 , -          coprocessorserviceresponse.newbuilder(); ," [""-          // as it's atomic"", ""we may expect it's a global failure.""] "," [""-          // as it's atomic"", ""we may expect it's a global failure.""] "," [""-          // as it's atomic"", ""we may expect it's a global failure.""]"
1932 , -      builder.setregion(requestconverter.buildregionspecifier( , -          regionactionresultbuilder.setexception(responseconverter.buildexception(e)); , -          regionactionresultbuilder.setexception(responseconverter.buildexception(e)); , -          regionactionresultbuilder.setexception(responseconverter.buildexception(e));
1933 ," -          regionspecifiertype.region_name', 'region.getregionname())); ", -        } , -        } , -        }
1934 , -      builder.setvalue( , -      } else { , -      } else { , -      } else {
1935 , -          builder.getvaluebuilder().setname(result.getclass().getname()) , -        // dononatomicregionmutation manages the exception internally , -        // dononatomicregionmutation manages the exception internally , -        // dononatomicregionmutation manages the exception internally
1936 , -              .setvalue(result.tobytestring())); ," -        cellstoreturn = dononatomicregionmutation(region', 'regionaction', 'cellscanner "," -        cellstoreturn = dononatomicregionmutation(region', 'regionaction', 'cellscanner "," -        cellstoreturn = dononatomicregionmutation(region', 'regionaction', 'cellscanner"
1937 , -      return builder.build(); ," -            regionactionresultbuilder', 'cellstoreturn', 'noncegroup); "," -            regionactionresultbuilder', 'cellstoreturn', 'noncegroup); "," -            regionactionresultbuilder', 'cellstoreturn', 'noncegroup);"
1938 , -    } catch (ioexception ie) { , -      } , -      } , -      }
1939 , -      throw new serviceexception(ie); , -      responsebuilder.addregionactionresult(regionactionresultbuilder.build()); , -      responsebuilder.addregionactionresult(regionactionresultbuilder.build()); , -      responsebuilder.addregionactionresult(regionactionresultbuilder.build());
1941 , -  } , -    // load the controller with the cells to return. , -    // load the controller with the cells to return. , -    // load the controller with the cells to return.
1942 , - , -    if (cellstoreturn != null && !cellstoreturn.isempty() && controller != null) { , -    if (cellstoreturn != null && !cellstoreturn.isempty() && controller != null) { , -    if (cellstoreturn != null && !cellstoreturn.isempty() && controller != null) {
1943 , -  private message execserviceonregion(hregion region , -      controller.setcellscanner(cellutil.createcellscanner(cellstoreturn)); , -      controller.setcellscanner(cellutil.createcellscanner(cellstoreturn)); , -      controller.setcellscanner(cellutil.createcellscanner(cellstoreturn));
1944 , -      final clientprotos.coprocessorservicecall servicecall) throws ioexception { , -    } , -    } , -    }
1945 , -    // ignore the passed in controller (from the serialized call) , -    return responsebuilder.build(); , -    return responsebuilder.build(); , -    return responsebuilder.build();
1946 , -    serverrpccontroller execcontroller = new serverrpccontroller(); , -  } , -  } , -  }
1947 ," -    message result = region.execservice(execcontroller', 'servicecall); ", - , - , -
1948 , -    if (execcontroller.getfailedon() != null) { , -  /** , -  /** , -  /**
1949 , -      throw execcontroller.getfailedon(); ," -   * run through the regionmutation <code>rm</code> and per mutation', 'do the work', 'and then when "," -   * run through the regionmutation <code>rm</code> and per mutation', 'do the work', 'and then when "," -   * run through the regionmutation <code>rm</code> and per mutation', 'do the work', 'and then when"
1950 , -    } ," -   * done', 'add an instance of a {@link resultorexception} that corresponds to each mutation. "," -   * done', 'add an instance of a {@link resultorexception} that corresponds to each mutation. "," -   * done', 'add an instance of a {@link resultorexception} that corresponds to each mutation."
1951 , -    return result; , -   * @param region , -   * @param region , -   * @param region
1952 , -  } , -   * @param actions , -   * @param actions , -   * @param actions
1953 , - , -   * @param cellscanner , -   * @param cellscanner , -   * @param cellscanner
1954 , -  /** , -   * @param builder , -   * @param builder , -   * @param builder
1955 ," -   * execute multiple actions on a table: get', 'mutate', 'and/or execcoprocessor ", -   * @param cellstoreturn  could be null. may be allocated in this method.  this is what this , -   * @param cellstoreturn  could be null. may be allocated in this method.  this is what this , -   * @param cellstoreturn  could be null. may be allocated in this method.  this is what this
1956 , -   * ," [""-   * method returns as a 'result'.""] "," [""-   * method returns as a 'result'.""] "," [""-   * method returns as a 'result'.""]"
1957 , -   * @param rpcc the rpc controller , -   * @return return the <code>cellscanner</code> passed , -   * @return return the <code>cellscanner</code> passed , -   * @return return the <code>cellscanner</code> passed
1958 , -   * @param request the multi request , -   */ , -   */ , -   */
1959 , -   * @throws serviceexception , -  private list<cellscannable> dononatomicregionmutation(final hregion region , -  private list<cellscannable> dononatomicregionmutation(final hregion region , -  private list<cellscannable> dononatomicregionmutation(final hregion region
1960 , -   */ ," -      final regionaction actions', 'final cellscanner cellscanner "," -      final regionaction actions', 'final cellscanner cellscanner "," -      final regionaction actions', 'final cellscanner cellscanner"
1961 , -  @override ," -      final regionactionresult.builder builder', 'list<cellscannable> cellstoreturn', 'long noncegroup) { "," -      final regionactionresult.builder builder', 'list<cellscannable> cellstoreturn', 'long noncegroup) { "," -      final regionactionresult.builder builder', 'list<cellscannable> cellstoreturn', 'long noncegroup) {"
1962 ," -  public multiresponse multi(final rpccontroller rpcc', 'final multirequest request) ", -    // gather up contiguous puts and deletes in this mutations list.  idea is that rather than do , -    // gather up contiguous puts and deletes in this mutations list.  idea is that rather than do , -    // gather up contiguous puts and deletes in this mutations list.  idea is that rather than do
1963 , -  throws serviceexception { ," -    // one at a time', 'we instead pass them in batch.  be aware that the corresponding "," -    // one at a time', 'we instead pass them in batch.  be aware that the corresponding "," -    // one at a time', 'we instead pass them in batch.  be aware that the corresponding"
1964 , -    try { , -    // resultorexception instance that matches each put or delete is then added down in the , -    // resultorexception instance that matches each put or delete is then added down in the , -    // resultorexception instance that matches each put or delete is then added down in the
1965 , -      checkopen(); , -    // dobatchop call.  we should be staying aligned though the put and delete are deferred/batched , -    // dobatchop call.  we should be staying aligned though the put and delete are deferred/batched , -    // dobatchop call.  we should be staying aligned though the put and delete are deferred/batched
1966 , -    } catch (ioexception ie) { , -    list<clientprotos.action> mutations = null; , -    list<clientprotos.action> mutations = null; , -    list<clientprotos.action> mutations = null;
1967 , -      throw new serviceexception(ie); , -    for (clientprotos.action action: actions.getactionlist()) { , -    for (clientprotos.action action: actions.getactionlist()) { , -    for (clientprotos.action action: actions.getactionlist()) {
1968 , -    } , -      clientprotos.resultorexception.builder resultorexceptionbuilder = null; , -      clientprotos.resultorexception.builder resultorexceptionbuilder = null; , -      clientprotos.resultorexception.builder resultorexceptionbuilder = null;
1969 , - , -      try { , -      try { , -      try {
1970 ," [""-    // rpc controller is how we bring in data via the back door;  it is unprotobuf'ed data.""] ", -        result r = null; , -        result r = null; , -        result r = null;
1971 , -    // it is also the conduit via which we pass back data. , -        if (action.hasget()) { , -        if (action.hasget()) { , -        if (action.hasget()) {
1972 , -    payloadcarryingrpccontroller controller = (payloadcarryingrpccontroller)rpcc; , -          get get = protobufutil.toget(action.getget()); , -          get get = protobufutil.toget(action.getget()); , -          get get = protobufutil.toget(action.getget());
1973 , -    cellscanner cellscanner = controller != null ? controller.cellscanner(): null; , -          r = region.get(get); , -          r = region.get(get); , -          r = region.get(get);
1974 , -    if (controller != null) controller.setcellscanner(null); , -        } else if (action.hasservicecall()) { , -        } else if (action.hasservicecall()) { , -        } else if (action.hasservicecall()) {
1975 , - , -          resultorexceptionbuilder = resultorexception.newbuilder(); , -          resultorexceptionbuilder = resultorexception.newbuilder(); , -          resultorexceptionbuilder = resultorexception.newbuilder();
1976 , -    long noncegroup = request.hasnoncegroup() ? request.getnoncegroup() : hconstants.no_nonce; , -          try { , -          try { , -          try {
1977 , - ," -            message result = execserviceonregion(region', 'action.getservicecall()); "," -            message result = execserviceonregion(region', 'action.getservicecall()); "," -            message result = execserviceonregion(region', 'action.getservicecall());"
1978 ," [""-    // this will contain all the cells that we need to return. it's created later"", 'if needed. ", -            clientprotos.coprocessorserviceresult.builder serviceresultbuilder = , -            clientprotos.coprocessorserviceresult.builder serviceresultbuilder = , -            clientprotos.coprocessorserviceresult.builder serviceresultbuilder =
1979 , -    list<cellscannable> cellstoreturn = null; , -                clientprotos.coprocessorserviceresult.newbuilder(); , -                clientprotos.coprocessorserviceresult.newbuilder(); , -                clientprotos.coprocessorserviceresult.newbuilder();
1980 , -    multiresponse.builder responsebuilder = multiresponse.newbuilder(); , -            resultorexceptionbuilder.setserviceresult( , -            resultorexceptionbuilder.setserviceresult( , -            resultorexceptionbuilder.setserviceresult(
1981 , -    regionactionresult.builder regionactionresultbuilder = regionactionresult.newbuilder(); , -                serviceresultbuilder.setvalue( , -                serviceresultbuilder.setvalue( , -                serviceresultbuilder.setvalue(
1982 , - , -                  serviceresultbuilder.getvaluebuilder() , -                  serviceresultbuilder.getvaluebuilder() , -                  serviceresultbuilder.getvaluebuilder()
1983 , -    for (regionaction regionaction : request.getregionactionlist()) { , -                    .setname(result.getclass().getname()) , -                    .setname(result.getclass().getname()) , -                    .setname(result.getclass().getname())
1984 , -      this.requestcount.add(regionaction.getactioncount()); , -                    .setvalue(result.tobytestring()))); , -                    .setvalue(result.tobytestring()))); , -                    .setvalue(result.tobytestring())));
1985 , -      hregion region; , -          } catch (ioexception ioe) { , -          } catch (ioexception ioe) { , -          } catch (ioexception ioe) {
1986 , -      regionactionresultbuilder.clear(); , -            resultorexceptionbuilder.setexception(responseconverter.buildexception(ioe)); , -            resultorexceptionbuilder.setexception(responseconverter.buildexception(ioe)); , -            resultorexceptionbuilder.setexception(responseconverter.buildexception(ioe));
1987 , -      try { , -          } , -          } , -          }
1988 , -        region = getregion(regionaction.getregion()); , -        } else if (action.hasmutation()) { , -        } else if (action.hasmutation()) { , -        } else if (action.hasmutation()) {
1989 , -      } catch (ioexception e) { , -          mutationtype type = action.getmutation().getmutatetype(); , -          mutationtype type = action.getmutation().getmutatetype(); , -          mutationtype type = action.getmutation().getmutatetype();
1990 , -        regionactionresultbuilder.setexception(responseconverter.buildexception(e)); , -          if (type != mutationtype.put && type != mutationtype.delete && mutations != null && , -          if (type != mutationtype.put && type != mutationtype.delete && mutations != null && , -          if (type != mutationtype.put && type != mutationtype.delete && mutations != null &&
1991 , -        responsebuilder.addregionactionresult(regionactionresultbuilder.build()); , -              !mutations.isempty()) { , -              !mutations.isempty()) { , -              !mutations.isempty()) {
1992 ," [""-        continue;  // for this region it's a failure.""] ", -            // flush out any puts or deletes already collected. , -            // flush out any puts or deletes already collected. , -            // flush out any puts or deletes already collected.
1993 , -      } ," -            dobatchop(builder', 'region', 'mutations', 'cellscanner); "," -            dobatchop(builder', 'region', 'mutations', 'cellscanner); "," -            dobatchop(builder', 'region', 'mutations', 'cellscanner);"
1994 , - , -            mutations.clear(); , -            mutations.clear(); , -            mutations.clear();
1995 , -      if (regionaction.hasatomic() && regionaction.getatomic()) { , -          } , -          } , -          }
1996 , -        // how does this call happen?  it may need some work to play well w/ the surroundings. , -          switch (type) { , -          switch (type) { , -          switch (type) {
1997 , -        // need to return an item per action along w/ action index.  todo. , -          case append: , -          case append: , -          case append:
1998 , -        try { ," -            r = append(region', 'action.getmutation()', 'cellscanner', 'noncegroup); "," -            r = append(region', 'action.getmutation()', 'cellscanner', 'noncegroup); "," -            r = append(region', 'action.getmutation()', 'cellscanner', 'noncegroup);"
1999 ," -          mutaterows(region', 'regionaction.getactionlist()', 'cellscanner); ", -            break; , -            break; , -            break;
2000 , -        } catch (ioexception e) { , -          case increment: , -          case increment: , -          case increment:
2001 ," [""-          // as it's atomic"", ""we may expect it's a global failure.""] "," -            r = increment(region', 'action.getmutation()', 'cellscanner', 'noncegroup); "," -            r = increment(region', 'action.getmutation()', 'cellscanner', 'noncegroup); "," -            r = increment(region', 'action.getmutation()', 'cellscanner', 'noncegroup);"
2002 , -          regionactionresultbuilder.setexception(responseconverter.buildexception(e)); , -            break; , -            break; , -            break;
2003 , -        } , -          case put: , -          case put: , -          case put:
2004 , -      } else { , -          case delete: , -          case delete: , -          case delete:
2005 , -        // dononatomicregionmutation manages the exception internally , -            // collect the individual mutations and apply in a batch , -            // collect the individual mutations and apply in a batch , -            // collect the individual mutations and apply in a batch
2006 ," -        cellstoreturn = dononatomicregionmutation(region', 'regionaction', 'cellscanner ", -            if (mutations == null) { , -            if (mutations == null) { , -            if (mutations == null) {
2007 ," -            regionactionresultbuilder', 'cellstoreturn', 'noncegroup); ", -              mutations = new arraylist<clientprotos.action>(actions.getactioncount()); , -              mutations = new arraylist<clientprotos.action>(actions.getactioncount()); , -              mutations = new arraylist<clientprotos.action>(actions.getactioncount());
2008 , -      } , -            } , -            } , -            }
2009 , -      responsebuilder.addregionactionresult(regionactionresultbuilder.build()); , -            mutations.add(action); , -            mutations.add(action); , -            mutations.add(action);
2010 , -    } , -            break; , -            break; , -            break;
2011 , -    // load the controller with the cells to return. , -          default: , -          default: , -          default:
2012 , -    if (cellstoreturn != null && !cellstoreturn.isempty() && controller != null) { ," -            throw new donotretryioexception(""unsupported mutate type: "" + type.name()); "," -            throw new donotretryioexception(""unsupported mutate type: "" + type.name()); "," -            throw new donotretryioexception(""unsupported mutate type: "" + type.name());"
2013 , -      controller.setcellscanner(cellutil.createcellscanner(cellstoreturn)); , -          } , -          } , -          }
2014 , -    } , -        } else { , -        } else { , -        } else {
2015 , -    return responsebuilder.build(); ," -          throw new hbaseioexception(""unexpected action type""); "," -          throw new hbaseioexception(""unexpected action type""); "," -          throw new hbaseioexception(""unexpected action type"");"
2016 , -  } , -        } , -        } , -        }
2017 , - , -        if (r != null) { , -        if (r != null) { , -        if (r != null) {
2018 , -  /** , -          clientprotos.result pbresult = null; , -          clientprotos.result pbresult = null; , -          clientprotos.result pbresult = null;
2019 ," -   * run through the regionmutation <code>rm</code> and per mutation', 'do the work', 'and then when ", -          if (isclientcellblocksupport()) { , -          if (isclientcellblocksupport()) { , -          if (isclientcellblocksupport()) {
2020 ," -   * done', 'add an instance of a {@link resultorexception} that corresponds to each mutation. ", -            pbresult = protobufutil.toresultnodata(r); , -            pbresult = protobufutil.toresultnodata(r); , -            pbresult = protobufutil.toresultnodata(r);
2021 , -   * @param region , -            //  hard to guess the size here.  just make a rough guess. , -            //  hard to guess the size here.  just make a rough guess. , -            //  hard to guess the size here.  just make a rough guess.
2022 , -   * @param actions , -            if (cellstoreturn == null) cellstoreturn = new arraylist<cellscannable>(); , -            if (cellstoreturn == null) cellstoreturn = new arraylist<cellscannable>(); , -            if (cellstoreturn == null) cellstoreturn = new arraylist<cellscannable>();
2023 , -   * @param cellscanner , -            cellstoreturn.add(r); , -            cellstoreturn.add(r); , -            cellstoreturn.add(r);
2024 , -   * @param builder , -          } else { , -          } else { , -          } else {
2025 , -   * @param cellstoreturn  could be null. may be allocated in this method.  this is what this , -            pbresult = protobufutil.toresult(r); , -            pbresult = protobufutil.toresult(r); , -            pbresult = protobufutil.toresult(r);
2026 ," [""-   * method returns as a 'result'.""] ", -          } , -          } , -          }
2027 , -   * @return return the <code>cellscanner</code> passed , -          resultorexceptionbuilder = , -          resultorexceptionbuilder = , -          resultorexceptionbuilder =
2028 , -   */ , -            clientprotos.resultorexception.newbuilder().setresult(pbresult); , -            clientprotos.resultorexception.newbuilder().setresult(pbresult); , -            clientprotos.resultorexception.newbuilder().setresult(pbresult);
2029 , -  private list<cellscannable> dononatomicregionmutation(final hregion region , -        } , -        } , -        }
2030 ," -      final regionaction actions', 'final cellscanner cellscanner ", -        // could get to here and there was no result and no exception.  presumes we added , -        // could get to here and there was no result and no exception.  presumes we added , -        // could get to here and there was no result and no exception.  presumes we added
2031 ," -      final regionactionresult.builder builder', 'list<cellscannable> cellstoreturn', 'long noncegroup) { ", -        // a put or delete to the collecting mutations list for adding later.  in this , -        // a put or delete to the collecting mutations list for adding later.  in this , -        // a put or delete to the collecting mutations list for adding later.  in this
2032 , -    // gather up contiguous puts and deletes in this mutations list.  idea is that rather than do , -        // case the corresponding resultorexception instance for the put or delete will be added , -        // case the corresponding resultorexception instance for the put or delete will be added , -        // case the corresponding resultorexception instance for the put or delete will be added
2033 ," -    // one at a time', 'we instead pass them in batch.  be aware that the corresponding ", -        // down in the dobatchop method call rather than up here. , -        // down in the dobatchop method call rather than up here. , -        // down in the dobatchop method call rather than up here.
2034 , -    // resultorexception instance that matches each put or delete is then added down in the , -      } catch (ioexception ie) { , -      } catch (ioexception ie) { , -      } catch (ioexception ie) {
2035 , -    // dobatchop call.  we should be staying aligned though the put and delete are deferred/batched , -        resultorexceptionbuilder = resultorexception.newbuilder(). , -        resultorexceptionbuilder = resultorexception.newbuilder(). , -        resultorexceptionbuilder = resultorexception.newbuilder().
2036 , -    list<clientprotos.action> mutations = null; , -          setexception(responseconverter.buildexception(ie)); , -          setexception(responseconverter.buildexception(ie)); , -          setexception(responseconverter.buildexception(ie));
2037 , -    for (clientprotos.action action: actions.getactionlist()) { , -      } , -      } , -      }
2038 , -      clientprotos.resultorexception.builder resultorexceptionbuilder = null; , -      if (resultorexceptionbuilder != null) { , -      if (resultorexceptionbuilder != null) { , -      if (resultorexceptionbuilder != null) {
2039 , -      try { , -        // propagate index. , -        // propagate index. , -        // propagate index.
2040 , -        result r = null; , -        resultorexceptionbuilder.setindex(action.getindex()); , -        resultorexceptionbuilder.setindex(action.getindex()); , -        resultorexceptionbuilder.setindex(action.getindex());
2041 , -        if (action.hasget()) { , -        builder.addresultorexception(resultorexceptionbuilder.build()); , -        builder.addresultorexception(resultorexceptionbuilder.build()); , -        builder.addresultorexception(resultorexceptionbuilder.build());
2042 , -          get get = protobufutil.toget(action.getget()); , -      } , -      } , -      }
2043 , -          r = region.get(get); , -    } , -    } , -    }
2044 , -        } else if (action.hasservicecall()) { , -    // finish up any outstanding mutations , -    // finish up any outstanding mutations , -    // finish up any outstanding mutations
2045 , -          resultorexceptionbuilder = resultorexception.newbuilder(); , -    if (mutations != null && !mutations.isempty()) { , -    if (mutations != null && !mutations.isempty()) { , -    if (mutations != null && !mutations.isempty()) {
2046 , -          try { ," -      dobatchop(builder', 'region', 'mutations', 'cellscanner); "," -      dobatchop(builder', 'region', 'mutations', 'cellscanner); "," -      dobatchop(builder', 'region', 'mutations', 'cellscanner);"
2047 ," -            message result = execserviceonregion(region', 'action.getservicecall()); ", -    } , -    } , -    }
2048 , -            clientprotos.coprocessorserviceresult.builder serviceresultbuilder = , -    return cellstoreturn; , -    return cellstoreturn; , -    return cellstoreturn;
2049 , -                clientprotos.coprocessorserviceresult.newbuilder(); , -  } , -  } , -  }
2050 , -            resultorexceptionbuilder.setserviceresult( , - , - , -
2051 , -                serviceresultbuilder.setvalue( , -// end client methods , -// end client methods , -// end client methods
2052 , -                  serviceresultbuilder.getvaluebuilder() , -// start admin methods , -// start admin methods , -// start admin methods
2053 , -                    .setname(result.getclass().getname()) , - , - , -
2054 , -                    .setvalue(result.tobytestring()))); , -  @override , -  @override , -  @override
2055 , -          } catch (ioexception ioe) { , -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos)
2056 , -            resultorexceptionbuilder.setexception(responseconverter.buildexception(ioe)); , -  public getregioninforesponse getregioninfo(final rpccontroller controller , -  public getregioninforesponse getregioninfo(final rpccontroller controller , -  public getregioninforesponse getregioninfo(final rpccontroller controller
2057 , -          } , -      final getregioninforequest request) throws serviceexception { , -      final getregioninforequest request) throws serviceexception { , -      final getregioninforequest request) throws serviceexception {
2058 , -        } else if (action.hasmutation()) { , -    try { , -    try { , -    try {
2059 , -          mutationtype type = action.getmutation().getmutatetype(); , -      checkopen(); , -      checkopen(); , -      checkopen();
2060 , -          if (type != mutationtype.put && type != mutationtype.delete && mutations != null && , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
2061 , -              !mutations.isempty()) { , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion());
2062 , -            // flush out any puts or deletes already collected. , -      hregioninfo info = region.getregioninfo(); , -      hregioninfo info = region.getregioninfo(); , -      hregioninfo info = region.getregioninfo();
2063 ," -            dobatchop(builder', 'region', 'mutations', 'cellscanner); ", -      getregioninforesponse.builder builder = getregioninforesponse.newbuilder(); , -      getregioninforesponse.builder builder = getregioninforesponse.newbuilder(); , -      getregioninforesponse.builder builder = getregioninforesponse.newbuilder();
2064 , -            mutations.clear(); , -      builder.setregioninfo(hregioninfo.convert(info)); , -      builder.setregioninfo(hregioninfo.convert(info)); , -      builder.setregioninfo(hregioninfo.convert(info));
2065 , -          } , -      if (request.hascompactionstate() && request.getcompactionstate()) { , -      if (request.hascompactionstate() && request.getcompactionstate()) { , -      if (request.hascompactionstate() && request.getcompactionstate()) {
2066 , -          switch (type) { , -        builder.setcompactionstate(region.getcompactionstate()); , -        builder.setcompactionstate(region.getcompactionstate()); , -        builder.setcompactionstate(region.getcompactionstate());
2067 , -          case append: , -      } , -      } , -      }
2068 ," -            r = append(region', 'action.getmutation()', 'cellscanner', 'noncegroup); ", -      builder.setisrecovering(region.isrecovering()); , -      builder.setisrecovering(region.isrecovering()); , -      builder.setisrecovering(region.isrecovering());
2069 , -            break; , -      return builder.build(); , -      return builder.build(); , -      return builder.build();
2070 , -          case increment: , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
2071 ," -            r = increment(region', 'action.getmutation()', 'cellscanner', 'noncegroup); ", -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
2072 , -            break; , -    } , -    } , -    }
2073 , -          case put: , -  } , -  } , -  }
2074 , -          case delete: , - , - , -
2075 , -            // collect the individual mutations and apply in a batch , -  @override , -  @override , -  @override
2076 , -            if (mutations == null) { , -  public getstorefileresponse getstorefile(final rpccontroller controller , -  public getstorefileresponse getstorefile(final rpccontroller controller , -  public getstorefileresponse getstorefile(final rpccontroller controller
2077 , -              mutations = new arraylist<clientprotos.action>(actions.getactioncount()); , -      final getstorefilerequest request) throws serviceexception { , -      final getstorefilerequest request) throws serviceexception { , -      final getstorefilerequest request) throws serviceexception {
2078 , -            } , -    try { , -    try { , -    try {
2079 , -            mutations.add(action); , -      checkopen(); , -      checkopen(); , -      checkopen();
2080 , -            break; , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion());
2081 , -          default: , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
2082 ," -            throw new donotretryioexception(""unsupported mutate type: "" + type.name()); ", -      set<byte[]> columnfamilies; , -      set<byte[]> columnfamilies; , -      set<byte[]> columnfamilies;
2083 , -          } , -      if (request.getfamilycount() == 0) { , -      if (request.getfamilycount() == 0) { , -      if (request.getfamilycount() == 0) {
2084 , -        } else { , -        columnfamilies = region.getstores().keyset(); , -        columnfamilies = region.getstores().keyset(); , -        columnfamilies = region.getstores().keyset();
2085 ," -          throw new hbaseioexception(""unexpected action type""); ", -      } else { , -      } else { , -      } else {
2086 , -        } , -        columnfamilies = new treeset<byte[]>(bytes.bytes_rawcomparator); , -        columnfamilies = new treeset<byte[]>(bytes.bytes_rawcomparator); , -        columnfamilies = new treeset<byte[]>(bytes.bytes_rawcomparator);
2087 , -        if (r != null) { , -        for (bytestring cf: request.getfamilylist()) { , -        for (bytestring cf: request.getfamilylist()) { , -        for (bytestring cf: request.getfamilylist()) {
2088 , -          clientprotos.result pbresult = null; , -          columnfamilies.add(cf.tobytearray()); , -          columnfamilies.add(cf.tobytearray()); , -          columnfamilies.add(cf.tobytearray());
2089 , -          if (isclientcellblocksupport()) { , -        } , -        } , -        }
2090 , -            pbresult = protobufutil.toresultnodata(r); , -      } , -      } , -      }
2091 , -            //  hard to guess the size here.  just make a rough guess. , -      int ncf = columnfamilies.size(); , -      int ncf = columnfamilies.size(); , -      int ncf = columnfamilies.size();
2092 , -            if (cellstoreturn == null) cellstoreturn = new arraylist<cellscannable>(); , -      list<string>  filelist = region.getstorefilelist( , -      list<string>  filelist = region.getstorefilelist( , -      list<string>  filelist = region.getstorefilelist(
2093 , -            cellstoreturn.add(r); , -        columnfamilies.toarray(new byte[ncf][])); , -        columnfamilies.toarray(new byte[ncf][])); , -        columnfamilies.toarray(new byte[ncf][]));
2094 , -          } else { , -      getstorefileresponse.builder builder = getstorefileresponse.newbuilder(); , -      getstorefileresponse.builder builder = getstorefileresponse.newbuilder(); , -      getstorefileresponse.builder builder = getstorefileresponse.newbuilder();
2095 , -            pbresult = protobufutil.toresult(r); , -      builder.addallstorefile(filelist); , -      builder.addallstorefile(filelist); , -      builder.addallstorefile(filelist);
2096 , -          } , -      return builder.build(); , -      return builder.build(); , -      return builder.build();
2097 , -          resultorexceptionbuilder = , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
2098 , -            clientprotos.resultorexception.newbuilder().setresult(pbresult); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
2099 , -        } , -    } , -    } , -    }
2100 , -        // could get to here and there was no result and no exception.  presumes we added , -  } , -  } , -  }
2101 , -        // a put or delete to the collecting mutations list for adding later.  in this , - , - , -
2102 , -        // case the corresponding resultorexception instance for the put or delete will be added , -  @override , -  @override , -  @override
2103 , -        // down in the dobatchop method call rather than up here. , -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos)
2104 , -      } catch (ioexception ie) { , -  public getonlineregionresponse getonlineregion(final rpccontroller controller , -  public getonlineregionresponse getonlineregion(final rpccontroller controller , -  public getonlineregionresponse getonlineregion(final rpccontroller controller
2105 , -        resultorexceptionbuilder = resultorexception.newbuilder(). , -      final getonlineregionrequest request) throws serviceexception { , -      final getonlineregionrequest request) throws serviceexception { , -      final getonlineregionrequest request) throws serviceexception {
2106 , -          setexception(responseconverter.buildexception(ie)); , -    try { , -    try { , -    try {
2107 , -      } , -      checkopen(); , -      checkopen(); , -      checkopen();
2108 , -      if (resultorexceptionbuilder != null) { , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
2109 , -        // propagate index. , -      list<hregioninfo> list = new arraylist<hregioninfo>(onlineregions.size()); , -      list<hregioninfo> list = new arraylist<hregioninfo>(onlineregions.size()); , -      list<hregioninfo> list = new arraylist<hregioninfo>(onlineregions.size());
2110 , -        resultorexceptionbuilder.setindex(action.getindex()); , -      for (hregion region: this.onlineregions.values()) { , -      for (hregion region: this.onlineregions.values()) { , -      for (hregion region: this.onlineregions.values()) {
2111 , -        builder.addresultorexception(resultorexceptionbuilder.build()); , -        list.add(region.getregioninfo()); , -        list.add(region.getregioninfo()); , -        list.add(region.getregioninfo());
2113 , -    } , -      collections.sort(list); , -      collections.sort(list); , -      collections.sort(list);
2114 , -    // finish up any outstanding mutations , -      return responseconverter.buildgetonlineregionresponse(list); , -      return responseconverter.buildgetonlineregionresponse(list); , -      return responseconverter.buildgetonlineregionresponse(list);
2115 , -    if (mutations != null && !mutations.isempty()) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
2116 ," -      dobatchop(builder', 'region', 'mutations', 'cellscanner); ", -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
2118 , -    return cellstoreturn; , -  } , -  } , -  }
2119 , -  } , - , - , -
2120 , - , -  // region open/close direct rpcs , -  // region open/close direct rpcs , -  // region open/close direct rpcs
2121 , -// end client methods , - , - , -
2122 , -// start admin methods , -  /** , -  /** , -  /**
2123 , - , -   * open asynchronously a region or a set of regions on the region server. , -   * open asynchronously a region or a set of regions on the region server. , -   * open asynchronously a region or a set of regions on the region server.
2124 , -  @override , -   * , -   * , -   *
2125 , -  @qospriority(priority=hconstants.high_qos) ," -   * the opening is coordinated by zookeeper', 'and this method requires the znode to be created "," -   * the opening is coordinated by zookeeper', 'and this method requires the znode to be created "," -   * the opening is coordinated by zookeeper', 'and this method requires the znode to be created"
2126 , -  public getregioninforesponse getregioninfo(final rpccontroller controller ," -   *  before being called. as a consequence', 'this method should be called only from the master. "," -   *  before being called. as a consequence', 'this method should be called only from the master. "," -   *  before being called. as a consequence', 'this method should be called only from the master."
2127 , -      final getregioninforequest request) throws serviceexception { , -   * <p> , -   * <p> , -   * <p>
2128 , -    try { , -   * different manages states for the region are:<ul> , -   * different manages states for the region are:<ul> , -   * different manages states for the region are:<ul>
2129 , -      checkopen(); , -   *  <li>region not opened: the region opening will start asynchronously.</li> , -   *  <li>region not opened: the region opening will start asynchronously.</li> , -   *  <li>region not opened: the region opening will start asynchronously.</li>
2130 , -      requestcount.increment(); , -   *  <li>a close is already in progress: this is considered as an error.</li> , -   *  <li>a close is already in progress: this is considered as an error.</li> , -   *  <li>a close is already in progress: this is considered as an error.</li>
2131 , -      hregion region = getregion(request.getregion()); , -   *  <li>an open is already in progress: this new open request will be ignored. this is important , -   *  <li>an open is already in progress: this new open request will be ignored. this is important , -   *  <li>an open is already in progress: this new open request will be ignored. this is important
2132 , -      hregioninfo info = region.getregioninfo(); , -   *  because the master can do multiple requests if it crashes.</li> , -   *  because the master can do multiple requests if it crashes.</li> , -   *  because the master can do multiple requests if it crashes.</li>
2133 , -      getregioninforesponse.builder builder = getregioninforesponse.newbuilder(); , -   *  <li>the region is already opened:  this new open request will be ignored./li> , -   *  <li>the region is already opened:  this new open request will be ignored./li> , -   *  <li>the region is already opened:  this new open request will be ignored./li>
2134 , -      builder.setregioninfo(hregioninfo.convert(info)); , -   *  </ul> , -   *  </ul> , -   *  </ul>
2135 , -      if (request.hascompactionstate() && request.getcompactionstate()) { , -   * </p> , -   * </p> , -   * </p>
2136 , -        builder.setcompactionstate(region.getcompactionstate()); , -   * <p> , -   * <p> , -   * <p>
2137 , -      } ," -   * bulk assign: if there are more than 1 region to open', 'it will be considered as a bulk assign. "," -   * bulk assign: if there are more than 1 region to open', 'it will be considered as a bulk assign. "," -   * bulk assign: if there are more than 1 region to open', 'it will be considered as a bulk assign."
2138 , -      builder.setisrecovering(region.isrecovering()); ," -   * for a single region opening', 'errors are sent through a serviceexception. for bulk assign "," -   * for a single region opening', 'errors are sent through a serviceexception. for bulk assign "," -   * for a single region opening', 'errors are sent through a serviceexception. for bulk assign"
2139 , -      return builder.build(); , -   * errors are put in the response as failed_opening. , -   * errors are put in the response as failed_opening. , -   * errors are put in the response as failed_opening.
2140 , -    } catch (ioexception ie) { , -   * </p> , -   * </p> , -   * </p>
2141 , -      throw new serviceexception(ie); , -   * @param controller the rpc controller , -   * @param controller the rpc controller , -   * @param controller the rpc controller
2142 , -    } , -   * @param request the request , -   * @param request the request , -   * @param request the request
2143 , -  } , -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
2144 , - , -   */ , -   */ , -   */
2146 , -  public getstorefileresponse getstorefile(final rpccontroller controller , -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos)
2147 , -      final getstorefilerequest request) throws serviceexception { , -  public openregionresponse openregion(final rpccontroller controller , -  public openregionresponse openregion(final rpccontroller controller , -  public openregionresponse openregion(final rpccontroller controller
2148 , -    try { , -      final openregionrequest request) throws serviceexception { , -      final openregionrequest request) throws serviceexception { , -      final openregionrequest request) throws serviceexception {
2149 , -      checkopen(); , -    try { , -    try { , -    try {
2150 , -      hregion region = getregion(request.getregion()); , -      checkopen(); , -      checkopen(); , -      checkopen();
2151 , -      requestcount.increment(); , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
2152 , -      set<byte[]> columnfamilies; , -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
2153 , -      if (request.getfamilycount() == 0) { , -    } , -    } , -    }
2154 , -        columnfamilies = region.getstores().keyset(); , -    requestcount.increment(); , -    requestcount.increment(); , -    requestcount.increment();
2155 , -      } else { , -    if (request.hasserverstartcode() && this.servernamefrommasterpov != null) { , -    if (request.hasserverstartcode() && this.servernamefrommasterpov != null) { , -    if (request.hasserverstartcode() && this.servernamefrommasterpov != null) {
2156 , -        columnfamilies = new treeset<byte[]>(bytes.bytes_rawcomparator); , -      // check that we are the same server that this rpc is intended for. , -      // check that we are the same server that this rpc is intended for. , -      // check that we are the same server that this rpc is intended for.
2157 , -        for (bytestring cf: request.getfamilylist()) { , -      long serverstartcode = request.getserverstartcode(); , -      long serverstartcode = request.getserverstartcode(); , -      long serverstartcode = request.getserverstartcode();
2158 , -          columnfamilies.add(cf.tobytearray()); , -      if (this.servernamefrommasterpov.getstartcode() !=  serverstartcode) { , -      if (this.servernamefrommasterpov.getstartcode() !=  serverstartcode) { , -      if (this.servernamefrommasterpov.getstartcode() !=  serverstartcode) {
2159 , -        } ," -        throw new serviceexception(new donotretryioexception(""this rpc was intended for a "" + "," -        throw new serviceexception(new donotretryioexception(""this rpc was intended for a "" + "," -        throw new serviceexception(new donotretryioexception(""this rpc was intended for a "" +"
2160 , -      } ," -            ""different server with startcode: "" + serverstartcode + ""', 'this server is: "" "," -            ""different server with startcode: "" + serverstartcode + ""', 'this server is: "" "," -            ""different server with startcode: "" + serverstartcode + ""', 'this server is: """
2161 , -      int ncf = columnfamilies.size(); , -            + this.servernamefrommasterpov)); , -            + this.servernamefrommasterpov)); , -            + this.servernamefrommasterpov));
2162 , -      list<string>  filelist = region.getstorefilelist( , -      } , -      } , -      }
2163 , -        columnfamilies.toarray(new byte[ncf][])); , -    } , -    } , -    }
2164 , -      getstorefileresponse.builder builder = getstorefileresponse.newbuilder(); , -    openregionresponse.builder builder = openregionresponse.newbuilder(); , -    openregionresponse.builder builder = openregionresponse.newbuilder(); , -    openregionresponse.builder builder = openregionresponse.newbuilder();
2165 , -      builder.addallstorefile(filelist); , -    final int regioncount = request.getopeninfocount(); , -    final int regioncount = request.getopeninfocount(); , -    final int regioncount = request.getopeninfocount();
2166 , -      return builder.build(); ," -    final map<tablename', 'htabledescriptor> htds = "," -    final map<tablename', 'htabledescriptor> htds = "," -    final map<tablename', 'htabledescriptor> htds ="
2167 , -    } catch (ioexception ie) { ," -        new hashmap<tablename', 'htabledescriptor>(regioncount); "," -        new hashmap<tablename', 'htabledescriptor>(regioncount); "," -        new hashmap<tablename', 'htabledescriptor>(regioncount);"
2168 , -      throw new serviceexception(ie); , -    final boolean isbulkassign = regioncount > 1; , -    final boolean isbulkassign = regioncount > 1; , -    final boolean isbulkassign = regioncount > 1;
2169 , -    } , -    for (regionopeninfo regionopeninfo : request.getopeninfolist()) { , -    for (regionopeninfo regionopeninfo : request.getopeninfolist()) { , -    for (regionopeninfo regionopeninfo : request.getopeninfolist()) {
2170 , -  } , -      final hregioninfo region = hregioninfo.convert(regionopeninfo.getregion()); , -      final hregioninfo region = hregioninfo.convert(regionopeninfo.getregion()); , -      final hregioninfo region = hregioninfo.convert(regionopeninfo.getregion());
2172 , -  @override , -      int versionofofflinenode = -1; , -      int versionofofflinenode = -1; , -      int versionofofflinenode = -1;
2173 , -  @qospriority(priority=hconstants.high_qos) , -      if (regionopeninfo.hasversionofofflinenode()) { , -      if (regionopeninfo.hasversionofofflinenode()) { , -      if (regionopeninfo.hasversionofofflinenode()) {
2174 , -  public getonlineregionresponse getonlineregion(final rpccontroller controller , -        versionofofflinenode = regionopeninfo.getversionofofflinenode(); , -        versionofofflinenode = regionopeninfo.getversionofofflinenode(); , -        versionofofflinenode = regionopeninfo.getversionofofflinenode();
2175 , -      final getonlineregionrequest request) throws serviceexception { , -      } , -      } , -      }
2176 , -    try { , -      htabledescriptor htd; , -      htabledescriptor htd; , -      htabledescriptor htd;
2177 , -      checkopen(); , -      try { , -      try { , -      try {
2178 , -      requestcount.increment(); , -        final hregion onlineregion = getfromonlineregions(region.getencodedname()); , -        final hregion onlineregion = getfromonlineregions(region.getencodedname()); , -        final hregion onlineregion = getfromonlineregions(region.getencodedname());
2179 , -      list<hregioninfo> list = new arraylist<hregioninfo>(onlineregions.size()); , -        if (onlineregion != null) { , -        if (onlineregion != null) { , -        if (onlineregion != null) {
2180 , -      for (hregion region: this.onlineregions.values()) { , -          //check if the region can actually be opened. , -          //check if the region can actually be opened. , -          //check if the region can actually be opened.
2181 , -        list.add(region.getregioninfo()); , -          if (onlineregion.getcoprocessorhost() != null) { , -          if (onlineregion.getcoprocessorhost() != null) { , -          if (onlineregion.getcoprocessorhost() != null) {
2182 , -      } , -            onlineregion.getcoprocessorhost().preopen(); , -            onlineregion.getcoprocessorhost().preopen(); , -            onlineregion.getcoprocessorhost().preopen();
2183 , -      collections.sort(list); , -          } , -          } , -          }
2184 , -      return responseconverter.buildgetonlineregionresponse(list); , -          // see hbase-5094. cross check with hbase:meta if still this rs is owning , -          // see hbase-5094. cross check with hbase:meta if still this rs is owning , -          // see hbase-5094. cross check with hbase:meta if still this rs is owning
2185 , -    } catch (ioexception ie) { , -          // the region. , -          // the region. , -          // the region.
2186 , -      throw new serviceexception(ie); ," -          pair<hregioninfo', 'servername> p = metareader.getregion( "," -          pair<hregioninfo', 'servername> p = metareader.getregion( "," -          pair<hregioninfo', 'servername> p = metareader.getregion("
2187 , -    } ," -              this.catalogtracker', 'region.getregionname()); "," -              this.catalogtracker', 'region.getregionname()); "," -              this.catalogtracker', 'region.getregionname());"
2188 , -  } , -          if (this.getservername().equals(p.getsecond())) { , -          if (this.getservername().equals(p.getsecond())) { , -          if (this.getservername().equals(p.getsecond())) {
2189 , - , -            boolean closing = regionsintransitioninrs.get(region.getencodednameasbytes()); , -            boolean closing = regionsintransitioninrs.get(region.getencodednameasbytes()); , -            boolean closing = regionsintransitioninrs.get(region.getencodednameasbytes());
2190 , -  // region open/close direct rpcs , -            // map regionsintransitioninrsonly has an entry for a region only if the region , -            // map regionsintransitioninrsonly has an entry for a region only if the region , -            // map regionsintransitioninrsonly has an entry for a region only if the region
2191 , - ," -            // is in transition on this rs', 'so here closing can be null. if not null', 'it can "," -            // is in transition on this rs', 'so here closing can be null. if not null', 'it can "," -            // is in transition on this rs', 'so here closing can be null. if not null', 'it can"
2192 , -  /** , -            // be true or false. true means the region is opening on this rs; while false , -            // be true or false. true means the region is opening on this rs; while false , -            // be true or false. true means the region is opening on this rs; while false
2193 , -   * open asynchronously a region or a set of regions on the region server. , -            // means the region is closing. only return already_opened if not closing (i.e. , -            // means the region is closing. only return already_opened if not closing (i.e. , -            // means the region is closing. only return already_opened if not closing (i.e.
2194 , -   * ," -            // not in transition any more', 'or still transition to open. "," -            // not in transition any more', 'or still transition to open. "," -            // not in transition any more', 'or still transition to open."
2195 ," -   * the opening is coordinated by zookeeper', 'and this method requires the znode to be created ", -            if (!boolean.false.equals(closing) , -            if (!boolean.false.equals(closing) , -            if (!boolean.false.equals(closing)
2196 ," -   *  before being called. as a consequence', 'this method should be called only from the master. ", -                && getfromonlineregions(region.getencodedname()) != null) { , -                && getfromonlineregions(region.getencodedname()) != null) { , -                && getfromonlineregions(region.getencodedname()) != null) {
2197 , -   * <p> ," -              log.warn(""attempted open of "" + region.getencodedname() "," -              log.warn(""attempted open of "" + region.getencodedname() "," -              log.warn(""attempted open of "" + region.getencodedname()"
2198 , -   * different manages states for the region are:<ul> ," -                + "" but already online on this server""); "," -                + "" but already online on this server""); "," -                + "" but already online on this server"");"
2199 , -   *  <li>region not opened: the region opening will start asynchronously.</li> , -              builder.addopeningstate(regionopeningstate.already_opened); , -              builder.addopeningstate(regionopeningstate.already_opened); , -              builder.addopeningstate(regionopeningstate.already_opened);
2200 , -   *  <li>a close is already in progress: this is considered as an error.</li> , -              continue; , -              continue; , -              continue;
2201 , -   *  <li>an open is already in progress: this new open request will be ignored. this is important , -            } , -            } , -            }
2202 , -   *  because the master can do multiple requests if it crashes.</li> , -          } else { , -          } else { , -          } else {
2203 , -   *  <li>the region is already opened:  this new open request will be ignored./li> ," -            log.warn(""the region "" + region.getencodedname() + "" is online on this server"" + "," -            log.warn(""the region "" + region.getencodedname() + "" is online on this server"" + "," -            log.warn(""the region "" + region.getencodedname() + "" is online on this server"" +"
2204 , -   *  </ul> ," -                "" but hbase:meta does not have this server - continue opening.""); "," -                "" but hbase:meta does not have this server - continue opening.""); "," -                "" but hbase:meta does not have this server - continue opening."");"
2205 , -   * </p> ," -            removefromonlineregions(onlineregion', 'null); "," -            removefromonlineregions(onlineregion', 'null); "," -            removefromonlineregions(onlineregion', 'null);"
2206 , -   * <p> , -          } , -          } , -          }
2207 ," -   * bulk assign: if there are more than 1 region to open', 'it will be considered as a bulk assign. ", -        } , -        } , -        }
2208 ," -   * for a single region opening', 'errors are sent through a serviceexception. for bulk assign "," -        log.info(""open "" + region.getregionnameasstring()); "," -        log.info(""open "" + region.getregionnameasstring()); "," -        log.info(""open "" + region.getregionnameasstring());"
2209 , -   * errors are put in the response as failed_opening. , -        htd = htds.get(region.gettable()); , -        htd = htds.get(region.gettable()); , -        htd = htds.get(region.gettable());
2210 , -   * </p> , -        if (htd == null) { , -        if (htd == null) { , -        if (htd == null) {
2211 , -   * @param controller the rpc controller , -          htd = this.tabledescriptors.get(region.gettable()); , -          htd = this.tabledescriptors.get(region.gettable()); , -          htd = this.tabledescriptors.get(region.gettable());
2212 , -   * @param request the request ," -          htds.put(region.gettable()', 'htd); "," -          htds.put(region.gettable()', 'htd); "," -          htds.put(region.gettable()', 'htd);"
2213 , -   * @throws serviceexception , -        } , -        } , -        }
2214 , -   */ , - , - , -
2215 , -  @override , -        final boolean previous = this.regionsintransitioninrs.putifabsent( , -        final boolean previous = this.regionsintransitioninrs.putifabsent( , -        final boolean previous = this.regionsintransitioninrs.putifabsent(
2216 , -  @qospriority(priority=hconstants.high_qos) ," -            region.getencodednameasbytes()', 'boolean.true); "," -            region.getencodednameasbytes()', 'boolean.true); "," -            region.getencodednameasbytes()', 'boolean.true);"
2217 , -  public openregionresponse openregion(final rpccontroller controller , - , - , -
2218 , -      final openregionrequest request) throws serviceexception { , -        if (boolean.false.equals(previous)) { , -        if (boolean.false.equals(previous)) { , -        if (boolean.false.equals(previous)) {
2219 , -    try { , -          // there is a close in progress. we need to mark this open as failed in zk. , -          // there is a close in progress. we need to mark this open as failed in zk. , -          // there is a close in progress. we need to mark this open as failed in zk.
2220 , -      checkopen(); , -          openregionhandler. , -          openregionhandler. , -          openregionhandler.
2221 , -    } catch (ioexception ie) { ," -              trytransitionfromofflinetofailedopen(this', 'region', 'versionofofflinenode); "," -              trytransitionfromofflinetofailedopen(this', 'region', 'versionofofflinenode); "," -              trytransitionfromofflinetofailedopen(this', 'region', 'versionofofflinenode);"
2222 , -      throw new serviceexception(ie); , - , - , -
2223 , -    } ," -          throw new regionalreadyintransitionexception(""received open for the region:"" + "," -          throw new regionalreadyintransitionexception(""received open for the region:"" + "," -          throw new regionalreadyintransitionexception(""received open for the region:"" +"
2224 , -    requestcount.increment(); ," -              region.getregionnameasstring() + ""', 'which we are already trying to close ""); "," -              region.getregionnameasstring() + ""', 'which we are already trying to close ""); "," -              region.getregionnameasstring() + ""', 'which we are already trying to close "");"
2225 , -    if (request.hasserverstartcode() && this.servernamefrommasterpov != null) { , -        } , -        } , -        }
2226 , -      // check that we are the same server that this rpc is intended for. , - , - , -
2227 , -      long serverstartcode = request.getserverstartcode(); , -        if (boolean.true.equals(previous)) { , -        if (boolean.true.equals(previous)) { , -        if (boolean.true.equals(previous)) {
2228 , -      if (this.servernamefrommasterpov.getstartcode() !=  serverstartcode) { ," -          // an open is in progress. this is supported', ""but let's log this.""] "," -          // an open is in progress. this is supported', ""but let's log this.""] "," -          // an open is in progress. this is supported', ""but let's log this.""]"
2229 ," -        throw new serviceexception(new donotretryioexception(""this rpc was intended for a "" + "," -          log.info(""receiving open for the region:"" + "," -          log.info(""receiving open for the region:"" + "," -          log.info(""receiving open for the region:"" +"
2230 ," -            ""different server with startcode: "" + serverstartcode + ""', 'this server is: "" "," -              region.getregionnameasstring() + ""', 'which we are already trying to open"" + "," -              region.getregionnameasstring() + ""', 'which we are already trying to open"" + "," -              region.getregionnameasstring() + ""', 'which we are already trying to open"" +"
2231 , -            + this.servernamefrommasterpov)); ," -              "" - ignoring this new request for this region.""); "," -              "" - ignoring this new request for this region.""); "," -              "" - ignoring this new request for this region."");"
2232 , -      } , -        } , -        } , -        }
2233 , -    } , - , - , -
2234 , -    openregionresponse.builder builder = openregionresponse.newbuilder(); ," -        // we are opening this region. if it moves back and forth for whatever reason', ""we don't""] "," -        // we are opening this region. if it moves back and forth for whatever reason', ""we don't""] "," -        // we are opening this region. if it moves back and forth for whatever reason', ""we don't""]"
2235 , -    final int regioncount = request.getopeninfocount(); , -        // want to keep returning the stale moved record while we are opening/if we close again. , -        // want to keep returning the stale moved record while we are opening/if we close again. , -        // want to keep returning the stale moved record while we are opening/if we close again.
2236 ," -    final map<tablename', 'htabledescriptor> htds = ", -        removefrommovedregions(region.getencodedname()); , -        removefrommovedregions(region.getencodedname()); , -        removefrommovedregions(region.getencodedname());
2237 ," -        new hashmap<tablename', 'htabledescriptor>(regioncount); ", - , - , -
2238 , -    final boolean isbulkassign = regioncount > 1; , -        if (previous == null) { , -        if (previous == null) { , -        if (previous == null) {
2239 , -    for (regionopeninfo regionopeninfo : request.getopeninfolist()) { , -          // check if the region to be opened is marked in recovering state in zk , -          // check if the region to be opened is marked in recovering state in zk , -          // check if the region to be opened is marked in recovering state in zk
2240 , -      final hregioninfo region = hregioninfo.convert(regionopeninfo.getregion()); , -          if (this.distributedlogreplay , -          if (this.distributedlogreplay , -          if (this.distributedlogreplay
2241 , - , -              && splitlogmanager.isregionmarkedrecoveringinzk(this.getzookeeper() , -              && splitlogmanager.isregionmarkedrecoveringinzk(this.getzookeeper() , -              && splitlogmanager.isregionmarkedrecoveringinzk(this.getzookeeper()
2242 , -      int versionofofflinenode = -1; , -            region.getencodedname())) { , -            region.getencodedname())) { , -            region.getencodedname())) {
2243 , -      if (regionopeninfo.hasversionofofflinenode()) { ," -            this.recoveringregions.put(region.getencodedname()', 'null); "," -            this.recoveringregions.put(region.getencodedname()', 'null); "," -            this.recoveringregions.put(region.getencodedname()', 'null);"
2244 , -        versionofofflinenode = regionopeninfo.getversionofofflinenode(); , -          } , -          } , -          }
2245 , -      } ," -          // if there is no action in progress', 'we can submit a specific handler. "," -          // if there is no action in progress', 'we can submit a specific handler. "," -          // if there is no action in progress', 'we can submit a specific handler."
2246 , -      htabledescriptor htd; , -          // need to pass the expected version in the constructor. , -          // need to pass the expected version in the constructor. , -          // need to pass the expected version in the constructor.
2247 , -      try { , -          if (region.ismetaregion()) { , -          if (region.ismetaregion()) { , -          if (region.ismetaregion()) {
2248 , -        final hregion onlineregion = getfromonlineregions(region.getencodedname()); ," -            this.service.submit(new openmetahandler(this', 'this', 'region', 'htd "," -            this.service.submit(new openmetahandler(this', 'this', 'region', 'htd "," -            this.service.submit(new openmetahandler(this', 'this', 'region', 'htd"
2249 , -        if (onlineregion != null) { , -                versionofofflinenode)); , -                versionofofflinenode)); , -                versionofofflinenode));
2250 , -          //check if the region can actually be opened. , -          } else { , -          } else { , -          } else {
2251 , -          if (onlineregion.getcoprocessorhost() != null) { , -            updateregionfavorednodesmapping(region.getencodedname() , -            updateregionfavorednodesmapping(region.getencodedname() , -            updateregionfavorednodesmapping(region.getencodedname()
2252 , -            onlineregion.getcoprocessorhost().preopen(); , -                regionopeninfo.getfavorednodeslist()); , -                regionopeninfo.getfavorednodeslist()); , -                regionopeninfo.getfavorednodeslist());
2253 , -          } ," -            this.service.submit(new openregionhandler(this', 'this', 'region', 'htd "," -            this.service.submit(new openregionhandler(this', 'this', 'region', 'htd "," -            this.service.submit(new openregionhandler(this', 'this', 'region', 'htd"
2254 , -          // see hbase-5094. cross check with hbase:meta if still this rs is owning , -                versionofofflinenode)); , -                versionofofflinenode)); , -                versionofofflinenode));
2255 , -          // the region. , -          } , -          } , -          }
2256 ," -          pair<hregioninfo', 'servername> p = metareader.getregion( ", -        } , -        } , -        }
2257 ," -              this.catalogtracker', 'region.getregionname()); ", - , - , -
2258 , -          if (this.getservername().equals(p.getsecond())) { , -        builder.addopeningstate(regionopeningstate.opened); , -        builder.addopeningstate(regionopeningstate.opened); , -        builder.addopeningstate(regionopeningstate.opened);
2259 , -            boolean closing = regionsintransitioninrs.get(region.getencodednameasbytes()); , - , - , -
2260 , -            // map regionsintransitioninrsonly has an entry for a region only if the region , -      } catch (keeperexception zookeeperex) { , -      } catch (keeperexception zookeeperex) { , -      } catch (keeperexception zookeeperex) {
2261 ," -            // is in transition on this rs', 'so here closing can be null. if not null', 'it can "," -        log.error(""can\'t retrieve recovering state from zookeeper""', 'zookeeperex); "," -        log.error(""can\'t retrieve recovering state from zookeeper""', 'zookeeperex); "," -        log.error(""can\'t retrieve recovering state from zookeeper""', 'zookeeperex);"
2262 , -            // be true or false. true means the region is opening on this rs; while false , -        throw new serviceexception(zookeeperex); , -        throw new serviceexception(zookeeperex); , -        throw new serviceexception(zookeeperex);
2263 , -            // means the region is closing. only return already_opened if not closing (i.e. , -      } catch (ioexception ie) { , -      } catch (ioexception ie) { , -      } catch (ioexception ie) {
2264 ," -            // not in transition any more', 'or still transition to open. "," -        log.warn(""failed opening region "" + region.getregionnameasstring()', 'ie); "," -        log.warn(""failed opening region "" + region.getregionnameasstring()', 'ie); "," -        log.warn(""failed opening region "" + region.getregionnameasstring()', 'ie);"
2265 , -            if (!boolean.false.equals(closing) , -        if (isbulkassign) { , -        if (isbulkassign) { , -        if (isbulkassign) {
2266 , -                && getfromonlineregions(region.getencodedname()) != null) { , -          builder.addopeningstate(regionopeningstate.failed_opening); , -          builder.addopeningstate(regionopeningstate.failed_opening); , -          builder.addopeningstate(regionopeningstate.failed_opening);
2267 ," -              log.warn(""attempted open of "" + region.getencodedname() ", -        } else { , -        } else { , -        } else {
2268 ," -                + "" but already online on this server""); ", -          throw new serviceexception(ie); , -          throw new serviceexception(ie); , -          throw new serviceexception(ie);
2269 , -              builder.addopeningstate(regionopeningstate.already_opened); , -        } , -        } , -        }
2270 , -              continue; , -      } , -      } , -      }
2271 , -            } , -    } , -    } , -    }
2272 , -          } else { , - , - , -
2273 ," -            log.warn(""the region "" + region.getencodedname() + "" is online on this server"" + ", -    return builder.build(); , -    return builder.build(); , -    return builder.build();
2274 ," -                "" but hbase:meta does not have this server - continue opening.""); ", -  } , -  } , -  }
2275 ," -            removefromonlineregions(onlineregion', 'null); ", - , - , -
2276 , -          } , @override , @override , @override
2277 , -        } , public void updateregionfavorednodesmapping(string encodedregionname , public void updateregionfavorednodesmapping(string encodedregionname , public void updateregionfavorednodesmapping(string encodedregionname
2278 ," -        log.info(""open "" + region.getregionnameasstring()); ", list<org.apache.hadoop.hbase.protobuf.generated.hbaseprotos.servername> favorednodes) { , list<org.apache.hadoop.hbase.protobuf.generated.hbaseprotos.servername> favorednodes) { , list<org.apache.hadoop.hbase.protobuf.generated.hbaseprotos.servername> favorednodes) {
2279 , -        htd = htds.get(region.gettable()); ," @@ -3751', '666 +2529', '11 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa "," @@ -3751', '666 +2529', '11 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa "," @@ -3751', '666 +2529', '11 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa"
2280 , -        if (htd == null) { , return regionfavorednodesmap.get(encodedregionname); , return regionfavorednodesmap.get(encodedregionname); , return regionfavorednodesmap.get(encodedregionname);
2281 , -          htd = this.tabledescriptors.get(region.gettable()); , } , } , }
2282 ," -          htds.put(region.gettable()', 'htd); ",  ,  , 
2283 , -        } , -  /** , -  /** , -  /**
2284 , - , -   * close a region on the region server. , -   * close a region on the region server. , -   * close a region on the region server.
2285 , -        final boolean previous = this.regionsintransitioninrs.putifabsent( , -   * , -   * , -   *
2286 ," -            region.getencodednameasbytes()', 'boolean.true); ", -   * @param controller the rpc controller , -   * @param controller the rpc controller , -   * @param controller the rpc controller
2287 , - , -   * @param request the request , -   * @param request the request , -   * @param request the request
2288 , -        if (boolean.false.equals(previous)) { , -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
2289 , -          // there is a close in progress. we need to mark this open as failed in zk. , -   */ , -   */ , -   */
2290 , -          openregionhandler. , -  @override , -  @override , -  @override
2291 ," -              trytransitionfromofflinetofailedopen(this', 'region', 'versionofofflinenode); ", -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos)
2292 , - , -  public closeregionresponse closeregion(final rpccontroller controller , -  public closeregionresponse closeregion(final rpccontroller controller , -  public closeregionresponse closeregion(final rpccontroller controller
2293 ," -          throw new regionalreadyintransitionexception(""received open for the region:"" + ", -      final closeregionrequest request) throws serviceexception { , -      final closeregionrequest request) throws serviceexception { , -      final closeregionrequest request) throws serviceexception {
2294 ," -              region.getregionnameasstring() + ""', 'which we are already trying to close ""); ", -    int versionofclosingnode = -1; , -    int versionofclosingnode = -1; , -    int versionofclosingnode = -1;
2295 , -        } , -    if (request.hasversionofclosingnode()) { , -    if (request.hasversionofclosingnode()) { , -    if (request.hasversionofclosingnode()) {
2296 , - , -      versionofclosingnode = request.getversionofclosingnode(); , -      versionofclosingnode = request.getversionofclosingnode(); , -      versionofclosingnode = request.getversionofclosingnode();
2297 , -        if (boolean.true.equals(previous)) { , -    } , -    } , -    }
2298 ," -          // an open is in progress. this is supported', ""but let's log this.""] ", -    boolean zk = request.gettransitioninzk(); , -    boolean zk = request.gettransitioninzk(); , -    boolean zk = request.gettransitioninzk();
2299 ," -          log.info(""receiving open for the region:"" + ", -    final servername sn = (request.hasdestinationserver() ? , -    final servername sn = (request.hasdestinationserver() ? , -    final servername sn = (request.hasdestinationserver() ?
2300 ," -              region.getregionnameasstring() + ""', 'which we are already trying to open"" + ", -      protobufutil.toservername(request.getdestinationserver()) : null); , -      protobufutil.toservername(request.getdestinationserver()) : null); , -      protobufutil.toservername(request.getdestinationserver()) : null);
2301 ," -              "" - ignoring this new request for this region.""); ", - , - , -
2302 , -        } , -    try { , -    try { , -    try {
2303 , - , -      checkopen(); , -      checkopen(); , -      checkopen();
2304 ," -        // we are opening this region. if it moves back and forth for whatever reason', ""we don't""] ", -      if (request.hasserverstartcode() && this.servernamefrommasterpov != null) { , -      if (request.hasserverstartcode() && this.servernamefrommasterpov != null) { , -      if (request.hasserverstartcode() && this.servernamefrommasterpov != null) {
2305 , -        // want to keep returning the stale moved record while we are opening/if we close again. , -        // check that we are the same server that this rpc is intended for. , -        // check that we are the same server that this rpc is intended for. , -        // check that we are the same server that this rpc is intended for.
2306 , -        removefrommovedregions(region.getencodedname()); , -        long serverstartcode = request.getserverstartcode(); , -        long serverstartcode = request.getserverstartcode(); , -        long serverstartcode = request.getserverstartcode();
2307 , - , -        if (this.servernamefrommasterpov.getstartcode() !=  serverstartcode) { , -        if (this.servernamefrommasterpov.getstartcode() !=  serverstartcode) { , -        if (this.servernamefrommasterpov.getstartcode() !=  serverstartcode) {
2308 , -        if (previous == null) { ," -          throw new serviceexception(new donotretryioexception(""this rpc was intended for a "" + "," -          throw new serviceexception(new donotretryioexception(""this rpc was intended for a "" + "," -          throw new serviceexception(new donotretryioexception(""this rpc was intended for a "" +"
2309 , -          // check if the region to be opened is marked in recovering state in zk ," -              ""different server with startcode: "" + serverstartcode + ""', 'this server is: "" "," -              ""different server with startcode: "" + serverstartcode + ""', 'this server is: "" "," -              ""different server with startcode: "" + serverstartcode + ""', 'this server is: """
2310 , -          if (this.distributedlogreplay , -              + this.servernamefrommasterpov)); , -              + this.servernamefrommasterpov)); , -              + this.servernamefrommasterpov));
2311 , -              && splitlogmanager.isregionmarkedrecoveringinzk(this.getzookeeper() , -        } , -        } , -        }
2312 , -            region.getencodedname())) { , -      } , -      } , -      }
2313 ," -            this.recoveringregions.put(region.getencodedname()', 'null); ", -      final string encodedregionname = protobufutil.getregionencodedname(request.getregion()); , -      final string encodedregionname = protobufutil.getregionencodedname(request.getregion()); , -      final string encodedregionname = protobufutil.getregionencodedname(request.getregion());
2314 , -          } , - , - , -
2315 ," -          // if there is no action in progress', 'we can submit a specific handler. "," [""-      // can be null if we're calling close on a region that's not online""] "," [""-      // can be null if we're calling close on a region that's not online""] "," [""-      // can be null if we're calling close on a region that's not online""]"
2316 , -          // need to pass the expected version in the constructor. , -      final hregion region = this.getfromonlineregions(encodedregionname); , -      final hregion region = this.getfromonlineregions(encodedregionname); , -      final hregion region = this.getfromonlineregions(encodedregionname);
2317 , -          if (region.ismetaregion()) { , -      if ((region  != null) && (region .getcoprocessorhost() != null)) { , -      if ((region  != null) && (region .getcoprocessorhost() != null)) { , -      if ((region  != null) && (region .getcoprocessorhost() != null)) {
2318 ," -            this.service.submit(new openmetahandler(this', 'this', 'region', 'htd ", -        region.getcoprocessorhost().preclose(false); , -        region.getcoprocessorhost().preclose(false); , -        region.getcoprocessorhost().preclose(false);
2319 , -                versionofofflinenode)); , -      } , -      } , -      }
2320 , -          } else { , - , - , -
2321 , -            updateregionfavorednodesmapping(region.getencodedname() , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
2322 , -                regionopeninfo.getfavorednodeslist()); ," -      log.info(""close "" + encodedregionname + ""', 'via zk="" + (zk ? ""yes"" : ""no"") + "," -      log.info(""close "" + encodedregionname + ""', 'via zk="" + (zk ? ""yes"" : ""no"") + "," -      log.info(""close "" + encodedregionname + ""', 'via zk="" + (zk ? ""yes"" : ""no"") +"
2323 ," -            this.service.submit(new openregionhandler(this', 'this', 'region', 'htd "," -        ""', 'znode version="" + versionofclosingnode + ""', 'on "" + sn); "," -        ""', 'znode version="" + versionofclosingnode + ""', 'on "" + sn); "," -        ""', 'znode version="" + versionofclosingnode + ""', 'on "" + sn);"
2324 , -                versionofofflinenode)); , - , - , -
2325 , -          } ," -      boolean closed = closeregion(encodedregionname', 'false', 'zk', 'versionofclosingnode', 'sn); "," -      boolean closed = closeregion(encodedregionname', 'false', 'zk', 'versionofclosingnode', 'sn); "," -      boolean closed = closeregion(encodedregionname', 'false', 'zk', 'versionofclosingnode', 'sn);"
2326 , -        } , -      closeregionresponse.builder builder = closeregionresponse.newbuilder().setclosed(closed); , -      closeregionresponse.builder builder = closeregionresponse.newbuilder().setclosed(closed); , -      closeregionresponse.builder builder = closeregionresponse.newbuilder().setclosed(closed);
2327 , - , -      return builder.build(); , -      return builder.build(); , -      return builder.build();
2328 , -        builder.addopeningstate(regionopeningstate.opened); , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
2329 , - , -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
2330 , -      } catch (keeperexception zookeeperex) { , -    } , -    } , -    }
2331 ," -        log.error(""can\'t retrieve recovering state from zookeeper""', 'zookeeperex); ", -  } , -  } , -  }
2332 , -        throw new serviceexception(zookeeperex); , - , - , -
2333 , -      } catch (ioexception ie) { , -  /** , -  /** , -  /**
2334 ," -        log.warn(""failed opening region "" + region.getregionnameasstring()', 'ie); ", -   * flush a region on the region server. , -   * flush a region on the region server. , -   * flush a region on the region server.
2335 , -        if (isbulkassign) { , -   * , -   * , -   *
2336 , -          builder.addopeningstate(regionopeningstate.failed_opening); , -   * @param controller the rpc controller , -   * @param controller the rpc controller , -   * @param controller the rpc controller
2337 , -        } else { , -   * @param request the request , -   * @param request the request , -   * @param request the request
2338 , -          throw new serviceexception(ie); , -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
2339 , -        } , -   */ , -   */ , -   */
2340 , -      } , -  @override , -  @override , -  @override
2341 , -    } , -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos)
2342 , - , -  public flushregionresponse flushregion(final rpccontroller controller , -  public flushregionresponse flushregion(final rpccontroller controller , -  public flushregionresponse flushregion(final rpccontroller controller
2343 , -    return builder.build(); , -      final flushregionrequest request) throws serviceexception { , -      final flushregionrequest request) throws serviceexception { , -      final flushregionrequest request) throws serviceexception {
2344 , -  } , -    try { , -    try { , -    try {
2345 , - , -      checkopen(); , -      checkopen(); , -      checkopen();
2346 , -  @override , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
2347 , -  public void updateregionfavorednodesmapping(string encodedregionname , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion());
2348 , -      list<org.apache.hadoop.hbase.protobuf.generated.hbaseprotos.servername> favorednodes) { ," -      log.info(""flushing "" + region.getregionnameasstring()); "," -      log.info(""flushing "" + region.getregionnameasstring()); "," -      log.info(""flushing "" + region.getregionnameasstring());"
2349 , -    inetsocketaddress[] addr = new inetsocketaddress[favorednodes.size()]; , -      boolean shouldflush = true; , -      boolean shouldflush = true; , -      boolean shouldflush = true;
2350 , -    // refer to the comment on the declaration of regionfavorednodesmap on why , -      if (request.hasifolderthants()) { , -      if (request.hasifolderthants()) { , -      if (request.hasifolderthants()) {
2351 , -    // it is a map of region name to inetsocketaddress[] , -        shouldflush = region.getlastflushtime() < request.getifolderthants(); , -        shouldflush = region.getlastflushtime() < request.getifolderthants(); , -        shouldflush = region.getlastflushtime() < request.getifolderthants();
2352 , -    for (int i = 0; i < favorednodes.size(); i++) { , -      } , -      } , -      }
2353 , -      addr[i] = inetsocketaddress.createunresolved(favorednodes.get(i).gethostname() , -      flushregionresponse.builder builder = flushregionresponse.newbuilder(); , -      flushregionresponse.builder builder = flushregionresponse.newbuilder(); , -      flushregionresponse.builder builder = flushregionresponse.newbuilder();
2354 , -          favorednodes.get(i).getport()); , -      if (shouldflush) { , -      if (shouldflush) { , -      if (shouldflush) {
2355 , -    } , -        boolean result = region.flushcache(); , -        boolean result = region.flushcache(); , -        boolean result = region.flushcache();
2356 ," -    regionfavorednodesmap.put(encodedregionname', 'addr); ", -        if (result) { , -        if (result) { , -        if (result) {
2357 , -  } , -          this.compactsplitthread.requestsystemcompaction(region , -          this.compactsplitthread.requestsystemcompaction(region , -          this.compactsplitthread.requestsystemcompaction(region
2358 , - ," -              ""compaction through user triggered flush""); "," -              ""compaction through user triggered flush""); "," -              ""compaction through user triggered flush"");"
2359 , -  /** , -        } , -        } , -        }
2360 , -   * return the favored nodes for a region given its encoded name. look at the , -        builder.setflushed(result); , -        builder.setflushed(result); , -        builder.setflushed(result);
2361 , -   * comment around {@link #regionfavorednodesmap} on why it is inetsocketaddress[] , -      } , -      } , -      }
2362 , -   * @param encodedregionname , -      builder.setlastflushtime(region.getlastflushtime()); , -      builder.setlastflushtime(region.getlastflushtime()); , -      builder.setlastflushtime(region.getlastflushtime());
2363 , -   * @return array of favored locations , -      return builder.build(); , -      return builder.build(); , -      return builder.build();
2364 , -   */ , -    } catch (droppedsnapshotexception ex) { , -    } catch (droppedsnapshotexception ex) { , -    } catch (droppedsnapshotexception ex) {
2365 , -  @override , -      // cache flush can fail in a few places. if it fails in a critical , -      // cache flush can fail in a few places. if it fails in a critical , -      // cache flush can fail in a few places. if it fails in a critical
2366 , -  public inetsocketaddress[] getfavorednodesforregion(string encodedregionname) { ," -      // section', 'we get a droppedsnapshotexception and a replay of hlog "," -      // section', 'we get a droppedsnapshotexception and a replay of hlog "," -      // section', 'we get a droppedsnapshotexception and a replay of hlog"
2367 , -    return regionfavorednodesmap.get(encodedregionname); , -      // is required. currently the only way to do this is a restart of , -      // is required. currently the only way to do this is a restart of , -      // is required. currently the only way to do this is a restart of
2368 , -  } , -      // the server. , -      // the server. , -      // the server.
2369 , - ," -      abort(""replay of hlog required. forcing server shutdown""', 'ex); "," -      abort(""replay of hlog required. forcing server shutdown""', 'ex); "," -      abort(""replay of hlog required. forcing server shutdown""', 'ex);"
2370 , -  /** , -      throw new serviceexception(ex); , -      throw new serviceexception(ex); , -      throw new serviceexception(ex);
2371 , -   * close a region on the region server. , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
2372 , -   * , -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
2373 , -   * @param controller the rpc controller , -    } , -    } , -    }
2374 , -   * @param request the request , -  } , -  } , -  }
2375 , -   * @throws serviceexception , - , - , -
2376 , -   */ , -  /** , -  /** , -  /**
2377 , -  @override , -   * split a region on the region server. , -   * split a region on the region server. , -   * split a region on the region server.
2378 , -  @qospriority(priority=hconstants.high_qos) , -   * , -   * , -   *
2379 , -  public closeregionresponse closeregion(final rpccontroller controller , -   * @param controller the rpc controller , -   * @param controller the rpc controller , -   * @param controller the rpc controller
2380 , -      final closeregionrequest request) throws serviceexception { , -   * @param request the request , -   * @param request the request , -   * @param request the request
2381 , -    int versionofclosingnode = -1; , -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
2382 , -    if (request.hasversionofclosingnode()) { , -   */ , -   */ , -   */
2383 , -      versionofclosingnode = request.getversionofclosingnode(); , -  @override , -  @override , -  @override
2384 , -    } , -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos)
2385 , -    boolean zk = request.gettransitioninzk(); , -  public splitregionresponse splitregion(final rpccontroller controller , -  public splitregionresponse splitregion(final rpccontroller controller , -  public splitregionresponse splitregion(final rpccontroller controller
2386 , -    final servername sn = (request.hasdestinationserver() ? , -      final splitregionrequest request) throws serviceexception { , -      final splitregionrequest request) throws serviceexception { , -      final splitregionrequest request) throws serviceexception {
2387 , -      protobufutil.toservername(request.getdestinationserver()) : null); , -    try { , -    try { , -    try {
2388 , - , -      checkopen(); , -      checkopen(); , -      checkopen();
2389 , -    try { , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
2390 , -      checkopen(); , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion());
2391 , -      if (request.hasserverstartcode() && this.servernamefrommasterpov != null) { , -      region.startregionoperation(operation.split_region); , -      region.startregionoperation(operation.split_region); , -      region.startregionoperation(operation.split_region);
2392 , -        // check that we are the same server that this rpc is intended for. ," -      log.info(""splitting "" + region.getregionnameasstring()); "," -      log.info(""splitting "" + region.getregionnameasstring()); "," -      log.info(""splitting "" + region.getregionnameasstring());"
2393 , -        long serverstartcode = request.getserverstartcode(); , -      region.flushcache(); , -      region.flushcache(); , -      region.flushcache();
2394 , -        if (this.servernamefrommasterpov.getstartcode() !=  serverstartcode) { , -      byte[] splitpoint = null; , -      byte[] splitpoint = null; , -      byte[] splitpoint = null;
2395 ," -          throw new serviceexception(new donotretryioexception(""this rpc was intended for a "" + ", -      if (request.hassplitpoint()) { , -      if (request.hassplitpoint()) { , -      if (request.hassplitpoint()) {
2396 ," -              ""different server with startcode: "" + serverstartcode + ""', 'this server is: "" ", -        splitpoint = request.getsplitpoint().tobytearray(); , -        splitpoint = request.getsplitpoint().tobytearray(); , -        splitpoint = request.getsplitpoint().tobytearray();
2397 , -              + this.servernamefrommasterpov)); , -      } , -      } , -      }
2398 , -        } , -      region.forcesplit(splitpoint); , -      region.forcesplit(splitpoint); , -      region.forcesplit(splitpoint);
2399 , -      } ," -      compactsplitthread.requestsplit(region', 'region.checksplit()); "," -      compactsplitthread.requestsplit(region', 'region.checksplit()); "," -      compactsplitthread.requestsplit(region', 'region.checksplit());"
2400 , -      final string encodedregionname = protobufutil.getregionencodedname(request.getregion()); , -      return splitregionresponse.newbuilder().build(); , -      return splitregionresponse.newbuilder().build(); , -      return splitregionresponse.newbuilder().build();
2401 , - , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
2402 ," [""-      // can be null if we're calling close on a region that's not online""] ", -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
2403 , -      final hregion region = this.getfromonlineregions(encodedregionname); , -    } , -    } , -    }
2404 , -      if ((region  != null) && (region .getcoprocessorhost() != null)) { , -  } , -  } , -  }
2405 , -        region.getcoprocessorhost().preclose(false); , - , - , -
2406 , -      } , -  /** , -  /** , -  /**
2407 , - , -   * merge regions on the region server. , -   * merge regions on the region server. , -   * merge regions on the region server.
2408 , -      requestcount.increment(); , -   * , -   * , -   *
2409 ," -      log.info(""close "" + encodedregionname + ""', 'via zk="" + (zk ? ""yes"" : ""no"") + ", -   * @param controller the rpc controller , -   * @param controller the rpc controller , -   * @param controller the rpc controller
2410 ," -        ""', 'znode version="" + versionofclosingnode + ""', 'on "" + sn); ", -   * @param request the request , -   * @param request the request , -   * @param request the request
2411 , - , -   * @return merge regions response , -   * @return merge regions response , -   * @return merge regions response
2412 ," -      boolean closed = closeregion(encodedregionname', 'false', 'zk', 'versionofclosingnode', 'sn); ", -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
2413 , -      closeregionresponse.builder builder = closeregionresponse.newbuilder().setclosed(closed); , -   */ , -   */ , -   */
2414 , -      return builder.build(); , -  @override , -  @override , -  @override
2415 , -    } catch (ioexception ie) { , -  @qospriority(priority = hconstants.high_qos) , -  @qospriority(priority = hconstants.high_qos) , -  @qospriority(priority = hconstants.high_qos)
2416 , -      throw new serviceexception(ie); , -  public mergeregionsresponse mergeregions(final rpccontroller controller , -  public mergeregionsresponse mergeregions(final rpccontroller controller , -  public mergeregionsresponse mergeregions(final rpccontroller controller
2417 , -    } , -      final mergeregionsrequest request) throws serviceexception { , -      final mergeregionsrequest request) throws serviceexception { , -      final mergeregionsrequest request) throws serviceexception {
2418 , -  } , -    try { , -    try { , -    try {
2419 , - , -      checkopen(); , -      checkopen(); , -      checkopen();
2420 , -  /** , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
2421 , -   * flush a region on the region server. , -      hregion regiona = getregion(request.getregiona()); , -      hregion regiona = getregion(request.getregiona()); , -      hregion regiona = getregion(request.getregiona());
2422 , -   * , -      hregion regionb = getregion(request.getregionb()); , -      hregion regionb = getregion(request.getregionb()); , -      hregion regionb = getregion(request.getregionb());
2423 , -   * @param controller the rpc controller , -      boolean forcible = request.getforcible(); , -      boolean forcible = request.getforcible(); , -      boolean forcible = request.getforcible();
2424 , -   * @param request the request , -      regiona.startregionoperation(operation.merge_region); , -      regiona.startregionoperation(operation.merge_region); , -      regiona.startregionoperation(operation.merge_region);
2425 , -   * @throws serviceexception , -      regionb.startregionoperation(operation.merge_region); , -      regionb.startregionoperation(operation.merge_region); , -      regionb.startregionoperation(operation.merge_region);
2426 , -   */ ," -      log.info(""receiving merging request for  "" + regiona + ""', '"" + regionb "," -      log.info(""receiving merging request for  "" + regiona + ""', '"" + regionb "," -      log.info(""receiving merging request for  "" + regiona + ""', '"" + regionb"
2427 , -  @override ," -          + ""', 'forcible="" + forcible); "," -          + ""', 'forcible="" + forcible); "," -          + ""', 'forcible="" + forcible);"
2428 , -  @qospriority(priority=hconstants.high_qos) , -      regiona.flushcache(); , -      regiona.flushcache(); , -      regiona.flushcache();
2429 , -  public flushregionresponse flushregion(final rpccontroller controller , -      regionb.flushcache(); , -      regionb.flushcache(); , -      regionb.flushcache();
2430 , -      final flushregionrequest request) throws serviceexception { ," -      compactsplitthread.requestregionsmerge(regiona', 'regionb', 'forcible); "," -      compactsplitthread.requestregionsmerge(regiona', 'regionb', 'forcible); "," -      compactsplitthread.requestregionsmerge(regiona', 'regionb', 'forcible);"
2431 , -    try { , -      return mergeregionsresponse.newbuilder().build(); , -      return mergeregionsresponse.newbuilder().build(); , -      return mergeregionsresponse.newbuilder().build();
2432 , -      checkopen(); , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
2433 , -      requestcount.increment(); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
2434 , -      hregion region = getregion(request.getregion()); , -    } , -    } , -    }
2435 ," -      log.info(""flushing "" + region.getregionnameasstring()); ", -  } , -  } , -  }
2436 , -      boolean shouldflush = true; , - , - , -
2437 , -      if (request.hasifolderthants()) { , -  /** , -  /** , -  /**
2438 , -        shouldflush = region.getlastflushtime() < request.getifolderthants(); , -   * compact a region on the region server. , -   * compact a region on the region server. , -   * compact a region on the region server.
2439 , -      } , -   * , -   * , -   *
2440 , -      flushregionresponse.builder builder = flushregionresponse.newbuilder(); , -   * @param controller the rpc controller , -   * @param controller the rpc controller , -   * @param controller the rpc controller
2441 , -      if (shouldflush) { , -   * @param request the request , -   * @param request the request , -   * @param request the request
2442 , -        boolean result = region.flushcache(); , -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
2443 , -        if (result) { , -   */ , -   */ , -   */
2444 , -          this.compactsplitthread.requestsystemcompaction(region , -  @override , -  @override , -  @override
2445 ," -              ""compaction through user triggered flush""); ", -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos) , -  @qospriority(priority=hconstants.high_qos)
2446 , -        } , -  public compactregionresponse compactregion(final rpccontroller controller , -  public compactregionresponse compactregion(final rpccontroller controller , -  public compactregionresponse compactregion(final rpccontroller controller
2447 , -        builder.setflushed(result); , -      final compactregionrequest request) throws serviceexception { , -      final compactregionrequest request) throws serviceexception { , -      final compactregionrequest request) throws serviceexception {
2448 , -      } , -    try { , -    try { , -    try {
2449 , -      builder.setlastflushtime(region.getlastflushtime()); , -      checkopen(); , -      checkopen(); , -      checkopen();
2450 , -      return builder.build(); , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
2451 , -    } catch (droppedsnapshotexception ex) { , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion()); , -      hregion region = getregion(request.getregion());
2452 , -      // cache flush can fail in a few places. if it fails in a critical , -      region.startregionoperation(operation.compact_region); , -      region.startregionoperation(operation.compact_region); , -      region.startregionoperation(operation.compact_region);
2453 ," -      // section', 'we get a droppedsnapshotexception and a replay of hlog "," -      log.info(""compacting "" + region.getregionnameasstring()); "," -      log.info(""compacting "" + region.getregionnameasstring()); "," -      log.info(""compacting "" + region.getregionnameasstring());"
2454 , -      // is required. currently the only way to do this is a restart of , -      boolean major = false; , -      boolean major = false; , -      boolean major = false;
2455 , -      // the server. , -      byte [] family = null; , -      byte [] family = null; , -      byte [] family = null;
2456 ," -      abort(""replay of hlog required. forcing server shutdown""', 'ex); ", -      store store = null; , -      store store = null; , -      store store = null;
2457 , -      throw new serviceexception(ex); , -      if (request.hasfamily()) { , -      if (request.hasfamily()) { , -      if (request.hasfamily()) {
2458 , -    } catch (ioexception ie) { , -        family = request.getfamily().tobytearray(); , -        family = request.getfamily().tobytearray(); , -        family = request.getfamily().tobytearray();
2459 , -      throw new serviceexception(ie); , -        store = region.getstore(family); , -        store = region.getstore(family); , -        store = region.getstore(family);
2460 , -    } , -        if (store == null) { , -        if (store == null) { , -        if (store == null) {
2461 , -  } ," -          throw new serviceexception(new ioexception(""column family "" + bytes.tostring(family) + "," -          throw new serviceexception(new ioexception(""column family "" + bytes.tostring(family) + "," -          throw new serviceexception(new ioexception(""column family "" + bytes.tostring(family) +"
2462 , - ," -            "" does not exist in region "" + region.getregionnameasstring())); "," -            "" does not exist in region "" + region.getregionnameasstring())); "," -            "" does not exist in region "" + region.getregionnameasstring()));"
2463 , -  /** , -        } , -        } , -        }
2464 , -   * split a region on the region server. , -      } , -      } , -      }
2465 , -   * , -      if (request.hasmajor()) { , -      if (request.hasmajor()) { , -      if (request.hasmajor()) {
2466 , -   * @param controller the rpc controller , -        major = request.getmajor(); , -        major = request.getmajor(); , -        major = request.getmajor();
2467 , -   * @param request the request , -      } , -      } , -      }
2468 , -   * @throws serviceexception , -      if (major) { , -      if (major) { , -      if (major) {
2469 , -   */ , -        if (family != null) { , -        if (family != null) { , -        if (family != null) {
2470 , -  @override , -          store.triggermajorcompaction(); , -          store.triggermajorcompaction(); , -          store.triggermajorcompaction();
2471 , -  @qospriority(priority=hconstants.high_qos) , -        } else { , -        } else { , -        } else {
2472 , -  public splitregionresponse splitregion(final rpccontroller controller , -          region.triggermajorcompaction(); , -          region.triggermajorcompaction(); , -          region.triggermajorcompaction();
2473 , -      final splitregionrequest request) throws serviceexception { , -        } , -        } , -        }
2474 , -    try { , -      } , -      } , -      }
2475 , -      checkopen(); , - , - , -
2476 , -      requestcount.increment(); ," -      string familylogmsg = (family != null)?"" for column family: "" + bytes.tostring(family):""""; "," -      string familylogmsg = (family != null)?"" for column family: "" + bytes.tostring(family):""""; "," -      string familylogmsg = (family != null)?"" for column family: "" + bytes.tostring(family):"""";"
2477 , -      hregion region = getregion(request.getregion()); ," -      log.trace(""user-triggered compaction requested for region "" + "," -      log.trace(""user-triggered compaction requested for region "" + "," -      log.trace(""user-triggered compaction requested for region "" +"
2478 , -      region.startregionoperation(operation.split_region); , -        region.getregionnameasstring() + familylogmsg); , -        region.getregionnameasstring() + familylogmsg); , -        region.getregionnameasstring() + familylogmsg);
2479 ," -      log.info(""splitting "" + region.getregionnameasstring()); "," -      string log = ""user-triggered "" + (major ? ""major "" : """") + ""compaction"" + familylogmsg; "," -      string log = ""user-triggered "" + (major ? ""major "" : """") + ""compaction"" + familylogmsg; "," -      string log = ""user-triggered "" + (major ? ""major "" : """") + ""compaction"" + familylogmsg;"
2480 , -      region.flushcache(); , -      if(family != null) { , -      if(family != null) { , -      if(family != null) {
2481 , -      byte[] splitpoint = null; ," -        compactsplitthread.requestcompaction(region', 'store', 'log "," -        compactsplitthread.requestcompaction(region', 'store', 'log "," -        compactsplitthread.requestcompaction(region', 'store', 'log"
2482 , -      if (request.hassplitpoint()) { ," -          store.priority_user', 'null); "," -          store.priority_user', 'null); "," -          store.priority_user', 'null);"
2483 , -        splitpoint = request.getsplitpoint().tobytearray(); , -      } else { , -      } else { , -      } else {
2484 , -      } ," -        compactsplitthread.requestcompaction(region', 'log "," -        compactsplitthread.requestcompaction(region', 'log "," -        compactsplitthread.requestcompaction(region', 'log"
2485 , -      region.forcesplit(splitpoint); ," -          store.priority_user', 'null); "," -          store.priority_user', 'null); "," -          store.priority_user', 'null);"
2486 ," -      compactsplitthread.requestsplit(region', 'region.checksplit()); ", -      } , -      } , -      }
2487 , -      return splitregionresponse.newbuilder().build(); , -      return compactregionresponse.newbuilder().build(); , -      return compactregionresponse.newbuilder().build(); , -      return compactregionresponse.newbuilder().build();
2494 , -   * merge regions on the region server. , -   * replicate wal entries on the region server. , -   * replicate wal entries on the region server. , -   * replicate wal entries on the region server.
2498 , -   * @return merge regions response , -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
2499 , -   * @throws serviceexception , -   */ , -   */ , -   */
2500 , -   */ , -  @override , -  @override , -  @override
2501 , -  @override , -  @qospriority(priority=hconstants.replication_qos) , -  @qospriority(priority=hconstants.replication_qos) , -  @qospriority(priority=hconstants.replication_qos)
2502 , -  @qospriority(priority = hconstants.high_qos) , -  public replicatewalentryresponse replicatewalentry(final rpccontroller controller , -  public replicatewalentryresponse replicatewalentry(final rpccontroller controller , -  public replicatewalentryresponse replicatewalentry(final rpccontroller controller
2503 , -  public mergeregionsresponse mergeregions(final rpccontroller controller , -      final replicatewalentryrequest request) , -      final replicatewalentryrequest request) , -      final replicatewalentryrequest request)
2504 , -      final mergeregionsrequest request) throws serviceexception { , -  throws serviceexception { , -  throws serviceexception { , -  throws serviceexception {
2506 , -      checkopen(); , -      if (replicationsinkhandler != null) { , -      if (replicationsinkhandler != null) { , -      if (replicationsinkhandler != null) {
2507 , -      requestcount.increment(); , -        checkopen(); , -        checkopen(); , -        checkopen();
2508 , -      hregion regiona = getregion(request.getregiona()); , -        requestcount.increment(); , -        requestcount.increment(); , -        requestcount.increment();
2509 , -      hregion regionb = getregion(request.getregionb()); , -        this.replicationsinkhandler.replicatelogentries(request.getentrylist() , -        this.replicationsinkhandler.replicatelogentries(request.getentrylist() , -        this.replicationsinkhandler.replicatelogentries(request.getentrylist()
2510 , -      boolean forcible = request.getforcible(); , -          ((payloadcarryingrpccontroller)controller).cellscanner()); , -          ((payloadcarryingrpccontroller)controller).cellscanner()); , -          ((payloadcarryingrpccontroller)controller).cellscanner());
2511 , -      regiona.startregionoperation(operation.merge_region); , -      } , -      } , -      }
2512 , -      regionb.startregionoperation(operation.merge_region); , -      return replicatewalentryresponse.newbuilder().build(); , -      return replicatewalentryresponse.newbuilder().build(); , -      return replicatewalentryresponse.newbuilder().build();
2513 ," -      log.info(""receiving merging request for  "" + regiona + ""', '"" + regionb ", -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
2514 ," -          + ""', 'forcible="" + forcible); ", -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
2515 , -      regiona.flushcache(); , -    } , -    } , -    }
2516 , -      regionb.flushcache(); , -  } , -  } , -  }
2517 ," -      compactsplitthread.requestregionsmerge(regiona', 'regionb', 'forcible); ", - , - , -
2518 , -      return mergeregionsresponse.newbuilder().build(); , -  /** , -  /** , -  /**
2519 , -    } catch (ioexception ie) { , -   * replay the given changes when distributedlogreplay wal edits from a failed rs. the guarantee is , -   * replay the given changes when distributedlogreplay wal edits from a failed rs. the guarantee is , -   * replay the given changes when distributedlogreplay wal edits from a failed rs. the guarantee is
2520 , -      throw new serviceexception(ie); , -   * that the given mutations will be durable on the receiving rs if this method returns without any , -   * that the given mutations will be durable on the receiving rs if this method returns without any , -   * that the given mutations will be durable on the receiving rs if this method returns without any
2521 , -    } , -   * exception. , -   * exception. , -   * exception.
2522 , -  } , -   * @param controller the rpc controller , -   * @param controller the rpc controller , -   * @param controller the rpc controller
2523 , - , -   * @param request the request , -   * @param request the request , -   * @param request the request
2524 , -  /** , -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
2525 , -   * compact a region on the region server. , -   */ , -   */ , -   */
2526 , -   * , -  @override , -  @override , -  @override
2527 , -   * @param controller the rpc controller , -  @qospriority(priority = hconstants.replay_qos) , -  @qospriority(priority = hconstants.replay_qos) , -  @qospriority(priority = hconstants.replay_qos)
2528 , -   * @param request the request , -  public replicatewalentryresponse replay(final rpccontroller controller , -  public replicatewalentryresponse replay(final rpccontroller controller , -  public replicatewalentryresponse replay(final rpccontroller controller
2529 , -   * @throws serviceexception , -      final replicatewalentryrequest request) throws serviceexception { , -      final replicatewalentryrequest request) throws serviceexception { , -      final replicatewalentryrequest request) throws serviceexception {
2530 , -   */ , -    long before = environmentedgemanager.currenttimemillis(); , -    long before = environmentedgemanager.currenttimemillis(); , -    long before = environmentedgemanager.currenttimemillis();
2531 , -  @override , -    cellscanner cells = ((payloadcarryingrpccontroller) controller).cellscanner(); , -    cellscanner cells = ((payloadcarryingrpccontroller) controller).cellscanner(); , -    cellscanner cells = ((payloadcarryingrpccontroller) controller).cellscanner();
2532 , -  @qospriority(priority=hconstants.high_qos) , -    try { , -    try { , -    try {
2533 , -  public compactregionresponse compactregion(final rpccontroller controller , -      checkopen(); , -      checkopen(); , -      checkopen();
2534 , -      final compactregionrequest request) throws serviceexception { , -      list<walentry> entries = request.getentrylist(); , -      list<walentry> entries = request.getentrylist(); , -      list<walentry> entries = request.getentrylist();
2535 , -    try { , -      if (entries == null || entries.isempty()) { , -      if (entries == null || entries.isempty()) { , -      if (entries == null || entries.isempty()) {
2536 , -      checkopen(); , -        // empty input , -        // empty input , -        // empty input
2537 , -      requestcount.increment(); , -        return replicatewalentryresponse.newbuilder().build(); , -        return replicatewalentryresponse.newbuilder().build(); , -        return replicatewalentryresponse.newbuilder().build();
2538 , -      hregion region = getregion(request.getregion()); , -      } , -      } , -      }
2539 , -      region.startregionoperation(operation.compact_region); , -      hregion region = this.getregionbyencodedname( , -      hregion region = this.getregionbyencodedname( , -      hregion region = this.getregionbyencodedname(
2540 ," -      log.info(""compacting "" + region.getregionnameasstring()); ", -        entries.get(0).getkey().getencodedregionname().tostringutf8()); , -        entries.get(0).getkey().getencodedregionname().tostringutf8()); , -        entries.get(0).getkey().getencodedregionname().tostringutf8());
2541 , -      boolean major = false; , -      regioncoprocessorhost coprocessorhost = region.getcoprocessorhost(); , -      regioncoprocessorhost coprocessorhost = region.getcoprocessorhost(); , -      regioncoprocessorhost coprocessorhost = region.getcoprocessorhost();
2542 , -      byte [] family = null; ," -      list<pair<hlogkey', 'waledit>> walentries = new arraylist<pair<hlogkey', 'waledit>>(); "," -      list<pair<hlogkey', 'waledit>> walentries = new arraylist<pair<hlogkey', 'waledit>>(); "," -      list<pair<hlogkey', 'waledit>> walentries = new arraylist<pair<hlogkey', 'waledit>>();"
2543 , -      store store = null; , -      list<hlogsplitter.mutationreplay> mutations = new arraylist<hlogsplitter.mutationreplay>(); , -      list<hlogsplitter.mutationreplay> mutations = new arraylist<hlogsplitter.mutationreplay>(); , -      list<hlogsplitter.mutationreplay> mutations = new arraylist<hlogsplitter.mutationreplay>();
2544 , -      if (request.hasfamily()) { ," -      // when tag is enabled', 'we need tag replay edits with log sequence number "," -      // when tag is enabled', 'we need tag replay edits with log sequence number "," -      // when tag is enabled', 'we need tag replay edits with log sequence number"
2545 , -        family = request.getfamily().tobytearray(); , -      boolean needaddreplaytag = (hfile.getformatversion(this.conf) >= 3); , -      boolean needaddreplaytag = (hfile.getformatversion(this.conf) >= 3); , -      boolean needaddreplaytag = (hfile.getformatversion(this.conf) >= 3);
2546 , -        store = region.getstore(family); , -      for (walentry entry : entries) { , -      for (walentry entry : entries) { , -      for (walentry entry : entries) {
2547 , -        if (store == null) { , -        if (noncemanager != null) { , -        if (noncemanager != null) { , -        if (noncemanager != null) {
2548 ," -          throw new serviceexception(new ioexception(""column family "" + bytes.tostring(family) + ", -          long noncegroup = entry.getkey().hasnoncegroup() , -          long noncegroup = entry.getkey().hasnoncegroup() , -          long noncegroup = entry.getkey().hasnoncegroup()
2549 ," -            "" does not exist in region "" + region.getregionnameasstring())); ", -              ? entry.getkey().getnoncegroup() : hconstants.no_nonce; , -              ? entry.getkey().getnoncegroup() : hconstants.no_nonce; , -              ? entry.getkey().getnoncegroup() : hconstants.no_nonce;
2550 , -        } , -          long nonce = entry.getkey().hasnonce() ? entry.getkey().getnonce() : hconstants.no_nonce; , -          long nonce = entry.getkey().hasnonce() ? entry.getkey().getnonce() : hconstants.no_nonce; , -          long nonce = entry.getkey().hasnonce() ? entry.getkey().getnonce() : hconstants.no_nonce;
2551 , -      } ," -          noncemanager.reportoperationfromwal(noncegroup', 'nonce', 'entry.getkey().getwritetime()); "," -          noncemanager.reportoperationfromwal(noncegroup', 'nonce', 'entry.getkey().getwritetime()); "," -          noncemanager.reportoperationfromwal(noncegroup', 'nonce', 'entry.getkey().getwritetime());"
2552 , -      if (request.hasmajor()) { , -        } , -        } , -        }
2553 , -        major = request.getmajor(); ," -        pair<hlogkey', 'waledit> walentry = (coprocessorhost == null) ? null : "," -        pair<hlogkey', 'waledit> walentry = (coprocessorhost == null) ? null : "," -        pair<hlogkey', 'waledit> walentry = (coprocessorhost == null) ? null :"
2554 , -      } ," -          new pair<hlogkey', 'waledit>(); "," -          new pair<hlogkey', 'waledit>(); "," -          new pair<hlogkey', 'waledit>();"
2555 , -      if (major) { , -        list<hlogsplitter.mutationreplay> edits = hlogsplitter.getmutationsfromwalentry(entry , -        list<hlogsplitter.mutationreplay> edits = hlogsplitter.getmutationsfromwalentry(entry , -        list<hlogsplitter.mutationreplay> edits = hlogsplitter.getmutationsfromwalentry(entry
2556 , -        if (family != null) { ," -          cells', 'walentry', 'needaddreplaytag); "," -          cells', 'walentry', 'needaddreplaytag); "," -          cells', 'walentry', 'needaddreplaytag);"
2557 , -          store.triggermajorcompaction(); , -        if (coprocessorhost != null) { , -        if (coprocessorhost != null) { , -        if (coprocessorhost != null) {
2558 , -        } else { , -          // start coprocessor replay here. the coprocessor is for each waledit instead of a , -          // start coprocessor replay here. the coprocessor is for each waledit instead of a , -          // start coprocessor replay here. the coprocessor is for each waledit instead of a
2559 , -          region.triggermajorcompaction(); , -          // keyvalue. , -          // keyvalue. , -          // keyvalue.
2560 , -        } ," -          if (coprocessorhost.prewalrestore(region.getregioninfo()', 'walentry.getfirst() "," -          if (coprocessorhost.prewalrestore(region.getregioninfo()', 'walentry.getfirst() "," -          if (coprocessorhost.prewalrestore(region.getregioninfo()', 'walentry.getfirst()"
2561 , -      } , -            walentry.getsecond())) { , -            walentry.getsecond())) { , -            walentry.getsecond())) {
2562 , - ," -            // if bypass this log entry', 'ignore it ... "," -            // if bypass this log entry', 'ignore it ... "," -            // if bypass this log entry', 'ignore it ..."
2563 ," -      string familylogmsg = (family != null)?"" for column family: "" + bytes.tostring(family):""""; ", -            continue; , -            continue; , -            continue;
2564 ," -      log.trace(""user-triggered compaction requested for region "" + ", -          } , -          } , -          }
2565 , -        region.getregionnameasstring() + familylogmsg); , -          walentries.add(walentry); , -          walentries.add(walentry); , -          walentries.add(walentry);
2566 ," -      string log = ""user-triggered "" + (major ? ""major "" : """") + ""compaction"" + familylogmsg; ", -        } , -        } , -        }
2567 , -      if(family != null) { , -        mutations.addall(edits); , -        mutations.addall(edits); , -        mutations.addall(edits);
2568 ," -        compactsplitthread.requestcompaction(region', 'store', 'log ", -      } , -      } , -      }
2569 ," -          store.priority_user', 'null); ", - , - , -
2570 , -      } else { , -      if (!mutations.isempty()) { , -      if (!mutations.isempty()) { , -      if (!mutations.isempty()) {
2571 ," -        compactsplitthread.requestcompaction(region', 'log "," -        operationstatus[] result = doreplaybatchop(region', 'mutations); "," -        operationstatus[] result = doreplaybatchop(region', 'mutations); "," -        operationstatus[] result = doreplaybatchop(region', 'mutations);"
2572 ," -          store.priority_user', 'null); "," [""-        // check if it's a partial success""] "," [""-        // check if it's a partial success""] "," [""-        // check if it's a partial success""]"
2573 , -      } , -        for (int i = 0; result != null && i < result.length; i++) { , -        for (int i = 0; result != null && i < result.length; i++) { , -        for (int i = 0; result != null && i < result.length; i++) {
2574 , -      return compactregionresponse.newbuilder().build(); , -          if (result[i] != operationstatus.success) { , -          if (result[i] != operationstatus.success) { , -          if (result[i] != operationstatus.success) {
2575 , -    } catch (ioexception ie) { , -            throw new ioexception(result[i].getexceptionmsg()); , -            throw new ioexception(result[i].getexceptionmsg()); , -            throw new ioexception(result[i].getexceptionmsg());
2576 , -      throw new serviceexception(ie); , -          } , -          } , -          }
2577 , -    } , -        } , -        } , -        }
2578 , -  } , -      } , -      } , -      }
2579 , - , -      if (coprocessorhost != null) { , -      if (coprocessorhost != null) { , -      if (coprocessorhost != null) {
2580 , -  /** ," -        for (pair<hlogkey', 'waledit> wal : walentries) { "," -        for (pair<hlogkey', 'waledit> wal : walentries) { "," -        for (pair<hlogkey', 'waledit> wal : walentries) {"
2581 , -   * replicate wal entries on the region server. ," -          coprocessorhost.postwalrestore(region.getregioninfo()', 'wal.getfirst() "," -          coprocessorhost.postwalrestore(region.getregioninfo()', 'wal.getfirst() "," -          coprocessorhost.postwalrestore(region.getregioninfo()', 'wal.getfirst()"
2582 , -   * , -            wal.getsecond()); , -            wal.getsecond()); , -            wal.getsecond());
2583 , -   * @param controller the rpc controller , -        } , -        } , -        }
2584 , -   * @param request the request , -      } , -      } , -      }
2585 , -   * @throws serviceexception , -      return replicatewalentryresponse.newbuilder().build(); , -      return replicatewalentryresponse.newbuilder().build(); , -      return replicatewalentryresponse.newbuilder().build();
2586 , -   */ , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
2587 , -  @override , -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
2588 , -  @qospriority(priority=hconstants.replication_qos) , -    } finally { , -    } finally { , -    } finally {
2589 , -  public replicatewalentryresponse replicatewalentry(final rpccontroller controller , -      metricsregionserver.updatereplay(environmentedgemanager.currenttimemillis() - before); , -      metricsregionserver.updatereplay(environmentedgemanager.currenttimemillis() - before); , -      metricsregionserver.updatereplay(environmentedgemanager.currenttimemillis() - before);
2590 , -      final replicatewalentryrequest request) , -    } , -    } , -    }
2591 , -  throws serviceexception { , -  } , -  } , -  }
2592 , -    try { , - , - , -
2593 , -      if (replicationsinkhandler != null) { , -  /** , -  /** , -  /**
2594 , -        checkopen(); , -   * roll the wal writer of the region server. , -   * roll the wal writer of the region server. , -   * roll the wal writer of the region server.
2595 , -        requestcount.increment(); , -   * @param controller the rpc controller , -   * @param controller the rpc controller , -   * @param controller the rpc controller
2596 , -        this.replicationsinkhandler.replicatelogentries(request.getentrylist() , -   * @param request the request , -   * @param request the request , -   * @param request the request
2597 , -          ((payloadcarryingrpccontroller)controller).cellscanner()); , -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
2598 , -      } , -   */ , -   */ , -   */
2599 , -      return replicatewalentryresponse.newbuilder().build(); , -  @override , -  @override , -  @override
2600 , -    } catch (ioexception ie) { , -  public rollwalwriterresponse rollwalwriter(final rpccontroller controller , -  public rollwalwriterresponse rollwalwriter(final rpccontroller controller , -  public rollwalwriterresponse rollwalwriter(final rpccontroller controller
2601 , -      throw new serviceexception(ie); , -      final rollwalwriterrequest request) throws serviceexception { , -      final rollwalwriterrequest request) throws serviceexception { , -      final rollwalwriterrequest request) throws serviceexception {
2602 , -    } , -    try { , -    try { , -    try {
2603 , -  } , -      checkopen(); , -      checkopen(); , -      checkopen();
2604 , - , -      requestcount.increment(); , -      requestcount.increment(); , -      requestcount.increment();
2605 , -  /** , -      hlog wal = this.getwal(); , -      hlog wal = this.getwal(); , -      hlog wal = this.getwal();
2606 , -   * replay the given changes when distributedlogreplay wal edits from a failed rs. the guarantee is , -      byte[][] regionstoflush = wal.rollwriter(true); , -      byte[][] regionstoflush = wal.rollwriter(true); , -      byte[][] regionstoflush = wal.rollwriter(true);
2607 , -   * that the given mutations will be durable on the receiving rs if this method returns without any , -      rollwalwriterresponse.builder builder = rollwalwriterresponse.newbuilder(); , -      rollwalwriterresponse.builder builder = rollwalwriterresponse.newbuilder(); , -      rollwalwriterresponse.builder builder = rollwalwriterresponse.newbuilder();
2608 , -   * exception. , -      if (regionstoflush != null) { , -      if (regionstoflush != null) { , -      if (regionstoflush != null) {
2609 , -   * @param controller the rpc controller , -        for (byte[] region: regionstoflush) { , -        for (byte[] region: regionstoflush) { , -        for (byte[] region: regionstoflush) {
2610 , -   * @param request the request , -          builder.addregiontoflush(hbasezerocopybytestring.wrap(region)); , -          builder.addregiontoflush(hbasezerocopybytestring.wrap(region)); , -          builder.addregiontoflush(hbasezerocopybytestring.wrap(region));
2611 , -   * @throws serviceexception , -        } , -        } , -        }
2612 , -   */ , -      } , -      } , -      }
2613 , -  @override , -      return builder.build(); , -      return builder.build(); , -      return builder.build();
2614 , -  @qospriority(priority = hconstants.replay_qos) , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
2615 , -  public replicatewalentryresponse replay(final rpccontroller controller , -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
2616 , -      final replicatewalentryrequest request) throws serviceexception { , -    } , -    } , -    }
2617 , -    long before = environmentedgemanager.currenttimemillis(); , -  } , -  } , -  }
2618 , -    cellscanner cells = ((payloadcarryingrpccontroller) controller).cellscanner(); , - , - , -
2619 , -    try { , -  /** , -  /** , -  /**
2620 , -      checkopen(); , -   * stop the region server. , -   * stop the region server. , -   * stop the region server.
2621 , -      list<walentry> entries = request.getentrylist(); , -   * , -   * , -   *
2622 , -      if (entries == null || entries.isempty()) { , -   * @param controller the rpc controller , -   * @param controller the rpc controller , -   * @param controller the rpc controller
2623 , -        // empty input , -   * @param request the request , -   * @param request the request , -   * @param request the request
2624 , -        return replicatewalentryresponse.newbuilder().build(); , -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
2625 , -      } , -   */ , -   */ , -   */
2626 , -      hregion region = this.getregionbyencodedname( , -  @override , -  @override , -  @override
2627 , -        entries.get(0).getkey().getencodedregionname().tostringutf8()); , -  public stopserverresponse stopserver(final rpccontroller controller , -  public stopserverresponse stopserver(final rpccontroller controller , -  public stopserverresponse stopserver(final rpccontroller controller
2628 , -      regioncoprocessorhost coprocessorhost = region.getcoprocessorhost(); , -      final stopserverrequest request) throws serviceexception { , -      final stopserverrequest request) throws serviceexception { , -      final stopserverrequest request) throws serviceexception {
2629 ," -      list<pair<hlogkey', 'waledit>> walentries = new arraylist<pair<hlogkey', 'waledit>>(); ", -    requestcount.increment(); , -    requestcount.increment(); , -    requestcount.increment();
2630 , -      list<hlogsplitter.mutationreplay> mutations = new arraylist<hlogsplitter.mutationreplay>(); , -    string reason = request.getreason(); , -    string reason = request.getreason(); , -    string reason = request.getreason();
2631 ," -      // when tag is enabled', 'we need tag replay edits with log sequence number ", -    stop(reason); , -    stop(reason); , -    stop(reason);
2632 , -      boolean needaddreplaytag = (hfile.getformatversion(this.conf) >= 3); , -    return stopserverresponse.newbuilder().build(); , -    return stopserverresponse.newbuilder().build(); , -    return stopserverresponse.newbuilder().build();
2633 , -      for (walentry entry : entries) { , -  } , -  } , -  }
2634 , -        if (noncemanager != null) { , - , - , -
2635 , -          long noncegroup = entry.getkey().hasnoncegroup() , -  /** , -  /** , -  /**
2636 , -              ? entry.getkey().getnoncegroup() : hconstants.no_nonce; , -   * get some information of the region server. , -   * get some information of the region server. , -   * get some information of the region server.
2637 , -          long nonce = entry.getkey().hasnonce() ? entry.getkey().getnonce() : hconstants.no_nonce; , -   * , -   * , -   *
2638 ," -          noncemanager.reportoperationfromwal(noncegroup', 'nonce', 'entry.getkey().getwritetime()); ", -   * @param controller the rpc controller , -   * @param controller the rpc controller , -   * @param controller the rpc controller
2639 , -        } , -   * @param request the request , -   * @param request the request , -   * @param request the request
2640 ," -        pair<hlogkey', 'waledit> walentry = (coprocessorhost == null) ? null : ", -   * @throws serviceexception , -   * @throws serviceexception , -   * @throws serviceexception
2641 ," -          new pair<hlogkey', 'waledit>(); ", -   */ , -   */ , -   */
2642 , -        list<hlogsplitter.mutationreplay> edits = hlogsplitter.getmutationsfromwalentry(entry , -  @override , -  @override , -  @override
2643 ," -          cells', 'walentry', 'needaddreplaytag); ", -  public getserverinforesponse getserverinfo(final rpccontroller controller , -  public getserverinforesponse getserverinfo(final rpccontroller controller , -  public getserverinforesponse getserverinfo(final rpccontroller controller
2644 , -        if (coprocessorhost != null) { , -      final getserverinforequest request) throws serviceexception { , -      final getserverinforequest request) throws serviceexception { , -      final getserverinforequest request) throws serviceexception {
2645 , -          // start coprocessor replay here. the coprocessor is for each waledit instead of a , -    try { , -    try { , -    try {
2646 , -          // keyvalue. , -      checkopen(); , -      checkopen(); , -      checkopen();
2647 ," -          if (coprocessorhost.prewalrestore(region.getregioninfo()', 'walentry.getfirst() ", -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
2648 , -            walentry.getsecond())) { , -      throw new serviceexception(ie); , -      throw new serviceexception(ie); , -      throw new serviceexception(ie);
2649 ," -            // if bypass this log entry', 'ignore it ... ", -    } , -    } , -    }
2650 , -            continue; , -    servername servername = getservername(); , -    servername servername = getservername(); , -    servername servername = getservername();
2651 , -          } , -    requestcount.increment(); , -    requestcount.increment(); , -    requestcount.increment();
2652 , -          walentries.add(walentry); ," -    return responseconverter.buildgetserverinforesponse(servername', 'rsinfo.getinfoport()); "," -    return responseconverter.buildgetserverinforesponse(servername', 'rsinfo.getinfoport()); "," -    return responseconverter.buildgetserverinforesponse(servername', 'rsinfo.getinfoport());"
2653 , -        } , -  } , -  } , -  }
2654 , -        mutations.addall(edits); , - , - , -
2655 , -      } , -// end admin methods , -// end admin methods , -// end admin methods
2657 , -      if (!mutations.isempty()) { , -  /** , -  /** , -  /**
2658 ," -        operationstatus[] result = doreplaybatchop(region', 'mutations); ", -   * find the hregion based on a region specifier , -   * find the hregion based on a region specifier , -   * find the hregion based on a region specifier
2659 ," [""-        // check if it's a partial success""] ", -   * , -   * , -   *
2660 , -        for (int i = 0; result != null && i < result.length; i++) { , -   * @param regionspecifier the region specifier , -   * @param regionspecifier the region specifier , -   * @param regionspecifier the region specifier
2661 , -          if (result[i] != operationstatus.success) { , -   * @return the corresponding region , -   * @return the corresponding region , -   * @return the corresponding region
2662 , -            throw new ioexception(result[i].getexceptionmsg()); , -   * @throws ioexception if the specifier is not null , -   * @throws ioexception if the specifier is not null , -   * @throws ioexception if the specifier is not null
2663 , -          } , -   *    but failed to find the region , -   *    but failed to find the region , -   *    but failed to find the region
2664 , -        } , -   */ , -   */ , -   */
2665 , -      } , -  protected hregion getregion( , -  protected hregion getregion( , -  protected hregion getregion(
2666 , -      if (coprocessorhost != null) { , -      final regionspecifier regionspecifier) throws ioexception { , -      final regionspecifier regionspecifier) throws ioexception { , -      final regionspecifier regionspecifier) throws ioexception {
2667 ," -        for (pair<hlogkey', 'waledit> wal : walentries) { ", -    return getregionbyencodedname(regionspecifier.getvalue().tobytearray() , -    return getregionbyencodedname(regionspecifier.getvalue().tobytearray() , -    return getregionbyencodedname(regionspecifier.getvalue().tobytearray()
2668 ," -          coprocessorhost.postwalrestore(region.getregioninfo()', 'wal.getfirst() ", -        protobufutil.getregionencodedname(regionspecifier)); , -        protobufutil.getregionencodedname(regionspecifier)); , -        protobufutil.getregionencodedname(regionspecifier));
2669 , -            wal.getsecond()); , -  } , -  } , -  }
2670 , -        } , - , - , -
2671 , -      } , -  /** , -  /** , -  /**
2672 , -      return replicatewalentryresponse.newbuilder().build(); , -   * execute an append mutation. , -   * execute an append mutation. , -   * execute an append mutation.
2673 , -    } catch (ioexception ie) { , -   * , -   * , -   *
2674 , -      throw new serviceexception(ie); , -   * @param region , -   * @param region , -   * @param region
2675 , -    } finally { , -   * @param m , -   * @param m , -   * @param m
2676 , -      metricsregionserver.updatereplay(environmentedgemanager.currenttimemillis() - before); , -   * @param cellscanner , -   * @param cellscanner , -   * @param cellscanner
2677 , -    } , -   * @return result to return to client if default operation should be , -   * @return result to return to client if default operation should be , -   * @return result to return to client if default operation should be
2678 , -  } ," -   * bypassed as indicated by regionobserver', 'null otherwise "," -   * bypassed as indicated by regionobserver', 'null otherwise "," -   * bypassed as indicated by regionobserver', 'null otherwise"
2679 , - , -   * @throws ioexception , -   * @throws ioexception , -   * @throws ioexception
2680 , -  /** , -   */ , -   */ , -   */
2681 , -   * roll the wal writer of the region server. , -  protected result append(final hregion region , -  protected result append(final hregion region , -  protected result append(final hregion region
2682 , -   * @param controller the rpc controller ," -      final mutationproto m', 'final cellscanner cellscanner', 'long noncegroup) throws ioexception { "," -      final mutationproto m', 'final cellscanner cellscanner', 'long noncegroup) throws ioexception { "," -      final mutationproto m', 'final cellscanner cellscanner', 'long noncegroup) throws ioexception {"
2683 , -   * @param request the request , -    long before = environmentedgemanager.currenttimemillis(); , -    long before = environmentedgemanager.currenttimemillis(); , -    long before = environmentedgemanager.currenttimemillis();
2684 , -   * @throws serviceexception ," -    append append = protobufutil.toappend(m', 'cellscanner); "," -    append append = protobufutil.toappend(m', 'cellscanner); "," -    append append = protobufutil.toappend(m', 'cellscanner);"
2685 , -   */ , -    result r = null; , -    result r = null; , -    result r = null;
2686 , -  @override , -    if (region.getcoprocessorhost() != null) { , -    if (region.getcoprocessorhost() != null) { , -    if (region.getcoprocessorhost() != null) {
2687 , -  public rollwalwriterresponse rollwalwriter(final rpccontroller controller , -      r = region.getcoprocessorhost().preappend(append); , -      r = region.getcoprocessorhost().preappend(append); , -      r = region.getcoprocessorhost().preappend(append);
2688 , -      final rollwalwriterrequest request) throws serviceexception { , -    } , -    } , -    }
2689 , -    try { , -    if (r == null) { , -    if (r == null) { , -    if (r == null) {
2690 , -      checkopen(); ," -      long nonce = startnonceoperation(m', 'noncegroup); "," -      long nonce = startnonceoperation(m', 'noncegroup); "," -      long nonce = startnonceoperation(m', 'noncegroup);"
2691 , -      requestcount.increment(); , -      boolean success = false; , -      boolean success = false; , -      boolean success = false;
2692 , -      hlog wal = this.getwal(); , -      try { , -      try { , -      try {
2693 , -      byte[][] regionstoflush = wal.rollwriter(true); ," -        r = region.append(append', 'noncegroup', 'nonce); "," -        r = region.append(append', 'noncegroup', 'nonce); "," -        r = region.append(append', 'noncegroup', 'nonce);"
2694 , -      rollwalwriterresponse.builder builder = rollwalwriterresponse.newbuilder(); , -        success = true; , -        success = true; , -        success = true;
2695 , -      if (regionstoflush != null) { , -      } finally { , -      } finally { , -      } finally {
2696 , -        for (byte[] region: regionstoflush) { ," -        endnonceoperation(m', 'noncegroup', 'success); "," -        endnonceoperation(m', 'noncegroup', 'success); "," -        endnonceoperation(m', 'noncegroup', 'success);"
2697 , -          builder.addregiontoflush(hbasezerocopybytestring.wrap(region)); , -      } , -      } , -      }
2698 , -        } , -      if (region.getcoprocessorhost() != null) { , -      if (region.getcoprocessorhost() != null) { , -      if (region.getcoprocessorhost() != null) {
2699 , -      } ," -        region.getcoprocessorhost().postappend(append', 'r); "," -        region.getcoprocessorhost().postappend(append', 'r); "," -        region.getcoprocessorhost().postappend(append', 'r);"
2700 , -      return builder.build(); , -      } , -      } , -      }
2701 , -    } catch (ioexception ie) { , -    } , -    } , -    }
2702 , -      throw new serviceexception(ie); , -    metricsregionserver.updateappend(environmentedgemanager.currenttimemillis() - before); , -    metricsregionserver.updateappend(environmentedgemanager.currenttimemillis() - before); , -    metricsregionserver.updateappend(environmentedgemanager.currenttimemillis() - before);
2703 , -    } , -    return r; , -    return r; , -    return r;
2707 , -   * stop the region server. , -   * execute an increment mutation. , -   * execute an increment mutation. , -   * execute an increment mutation.
2709 , -   * @param controller the rpc controller , -   * @param region , -   * @param region , -   * @param region
2710 , -   * @param request the request , -   * @param mutation , -   * @param mutation , -   * @param mutation
2711 , -   * @throws serviceexception , -   * @return the result , -   * @return the result , -   * @return the result
2712 , -   */ , -   * @throws ioexception , -   * @throws ioexception , -   * @throws ioexception
2713 , -  @override , -   */ , -   */ , -   */
2714 , -  public stopserverresponse stopserver(final rpccontroller controller ," -  protected result increment(final hregion region', 'final mutationproto mutation "," -  protected result increment(final hregion region', 'final mutationproto mutation "," -  protected result increment(final hregion region', 'final mutationproto mutation"
2715 , -      final stopserverrequest request) throws serviceexception { ," -      final cellscanner cells', 'long noncegroup) throws ioexception { "," -      final cellscanner cells', 'long noncegroup) throws ioexception { "," -      final cellscanner cells', 'long noncegroup) throws ioexception {"
2716 , -    requestcount.increment(); , -    long before = environmentedgemanager.currenttimemillis(); , -    long before = environmentedgemanager.currenttimemillis(); , -    long before = environmentedgemanager.currenttimemillis();
2717 , -    string reason = request.getreason(); ," -    increment increment = protobufutil.toincrement(mutation', 'cells); "," -    increment increment = protobufutil.toincrement(mutation', 'cells); "," -    increment increment = protobufutil.toincrement(mutation', 'cells);"
2718 , -    stop(reason); , -    result r = null; , -    result r = null; , -    result r = null;
2719 , -    return stopserverresponse.newbuilder().build(); , -    if (region.getcoprocessorhost() != null) { , -    if (region.getcoprocessorhost() != null) { , -    if (region.getcoprocessorhost() != null) {
2720 , -  } , -      r = region.getcoprocessorhost().preincrement(increment); , -      r = region.getcoprocessorhost().preincrement(increment); , -      r = region.getcoprocessorhost().preincrement(increment);
2721 , - , -    } , -    } , -    }
2722 , -  /** , -    if (r == null) { , -    if (r == null) { , -    if (r == null) {
2723 , -   * get some information of the region server. ," -      long nonce = startnonceoperation(mutation', 'noncegroup); "," -      long nonce = startnonceoperation(mutation', 'noncegroup); "," -      long nonce = startnonceoperation(mutation', 'noncegroup);"
2724 , -   * , -      boolean success = false; , -      boolean success = false; , -      boolean success = false;
2725 , -   * @param controller the rpc controller , -      try { , -      try { , -      try {
2726 , -   * @param request the request ," -        r = region.increment(increment', 'noncegroup', 'nonce); "," -        r = region.increment(increment', 'noncegroup', 'nonce); "," -        r = region.increment(increment', 'noncegroup', 'nonce);"
2727 , -   * @throws serviceexception , -        success = true; , -        success = true; , -        success = true;
2728 , -   */ , -      } finally { , -      } finally { , -      } finally {
2729 , -  @override ," -        endnonceoperation(mutation', 'noncegroup', 'success); "," -        endnonceoperation(mutation', 'noncegroup', 'success); "," -        endnonceoperation(mutation', 'noncegroup', 'success);"
2730 , -  public getserverinforesponse getserverinfo(final rpccontroller controller , -      } , -      } , -      }
2731 , -      final getserverinforequest request) throws serviceexception { , -      if (region.getcoprocessorhost() != null) { , -      if (region.getcoprocessorhost() != null) { , -      if (region.getcoprocessorhost() != null) {
2732 , -    try { ," -        r = region.getcoprocessorhost().postincrement(increment', 'r); "," -        r = region.getcoprocessorhost().postincrement(increment', 'r); "," -        r = region.getcoprocessorhost().postincrement(increment', 'r);"
2733 , -      checkopen(); , -      } , -      } , -      }
2734 , -    } catch (ioexception ie) { , -    } , -    } , -    }
2735 , -      throw new serviceexception(ie); , -    metricsregionserver.updateincrement(environmentedgemanager.currenttimemillis() - before); , -    metricsregionserver.updateincrement(environmentedgemanager.currenttimemillis() - before); , -    metricsregionserver.updateincrement(environmentedgemanager.currenttimemillis() - before);
2736 , -    } , -    return r; , -    return r; , -    return r;
2737 , -    servername servername = getservername(); , -  } , -  } , -  }
2738 , -    requestcount.increment(); , - , - , -
2739 ," -    return responseconverter.buildgetserverinforesponse(servername', 'rsinfo.getinfoport()); ", -  /** , -  /** , -  /**
2740 , -  } ," -   * starts the nonce operation for a mutation', 'if needed. "," -   * starts the nonce operation for a mutation', 'if needed. "," -   * starts the nonce operation for a mutation', 'if needed."
2741 , - , -   * @param mutation mutation. , -   * @param mutation mutation. , -   * @param mutation mutation.
2742 , -// end admin methods , -   * @param noncegroup nonce group from the request. , -   * @param noncegroup nonce group from the request. , -   * @param noncegroup nonce group from the request.
2743 , - , -   * @returns nonce used (can be no_nonce). , -   * @returns nonce used (can be no_nonce). , -   * @returns nonce used (can be no_nonce).
2744 , -  /** , -   */ , -   */ , -   */
2745 , -   * find the hregion based on a region specifier ," -  private long startnonceoperation(final mutationproto mutation', 'long noncegroup) "," -  private long startnonceoperation(final mutationproto mutation', 'long noncegroup) "," -  private long startnonceoperation(final mutationproto mutation', 'long noncegroup)"
2746 , -   * ," -      throws ioexception', 'operationconflictexception { "," -      throws ioexception', 'operationconflictexception { "," -      throws ioexception', 'operationconflictexception {"
2747 , -   * @param regionspecifier the region specifier , -    if (noncemanager == null || !mutation.hasnonce()) return hconstants.no_nonce; , -    if (noncemanager == null || !mutation.hasnonce()) return hconstants.no_nonce; , -    if (noncemanager == null || !mutation.hasnonce()) return hconstants.no_nonce;
2748 , -   * @return the corresponding region , -    boolean canproceed = false; , -    boolean canproceed = false; , -    boolean canproceed = false;
2749 , -   * @throws ioexception if the specifier is not null , -    try { , -    try { , -    try {
2750 , -   *    but failed to find the region ," -      canproceed = noncemanager.startoperation(noncegroup', 'mutation.getnonce()', 'this); "," -      canproceed = noncemanager.startoperation(noncegroup', 'mutation.getnonce()', 'this); "," -      canproceed = noncemanager.startoperation(noncegroup', 'mutation.getnonce()', 'this);"
2751 , -   */ , -    } catch (interruptedexception ex) { , -    } catch (interruptedexception ex) { , -    } catch (interruptedexception ex) {
2752 , -  protected hregion getregion( ," -      throw new interruptedioexception(""nonce start operation interrupted""); "," -      throw new interruptedioexception(""nonce start operation interrupted""); "," -      throw new interruptedioexception(""nonce start operation interrupted"");"
2753 , -      final regionspecifier regionspecifier) throws ioexception { , -    } , -    } , -    }
2754 , -    return getregionbyencodedname(regionspecifier.getvalue().tobytearray() , -    if (!canproceed) { , -    if (!canproceed) { , -    if (!canproceed) {
2755 , -        protobufutil.getregionencodedname(regionspecifier)); ," -      // todo: instead', 'we could convert append/increment to get w/mvcc "," -      // todo: instead', 'we could convert append/increment to get w/mvcc "," -      // todo: instead', 'we could convert append/increment to get w/mvcc"
2756 , -  } ," -      string message = ""the operation with nonce {"" + noncegroup + ""', '"" + mutation.getnonce() "," -      string message = ""the operation with nonce {"" + noncegroup + ""', '"" + mutation.getnonce() "," -      string message = ""the operation with nonce {"" + noncegroup + ""', '"" + mutation.getnonce()"
2757 , - ," -          + ""} on row ["" + bytes.tostring(mutation.getrow().tobytearray()) "," -          + ""} on row ["" + bytes.tostring(mutation.getrow().tobytearray()) "," -          + ""} on row ["" + bytes.tostring(mutation.getrow().tobytearray())"
2758 , -  /** ," -          + ""] may have already completed""; "," -          + ""] may have already completed""; "," -          + ""] may have already completed"";"
2759 , -   * execute an append mutation. , -      throw new operationconflictexception(message); , -      throw new operationconflictexception(message); , -      throw new operationconflictexception(message);
2760 , -   * , -    } , -    } , -    }
2761 , -   * @param region , -    return mutation.getnonce(); , -    return mutation.getnonce(); , -    return mutation.getnonce();
2762 , -   * @param m , -  } , -  } , -  }
2763 , -   * @param cellscanner , - , - , -
2764 , -   * @return result to return to client if default operation should be , -  /** , -  /** , -  /**
2765 ," -   * bypassed as indicated by regionobserver', 'null otherwise "," -   * ends nonce operation for a mutation', 'if needed. "," -   * ends nonce operation for a mutation', 'if needed. "," -   * ends nonce operation for a mutation', 'if needed."
2766 , -   * @throws ioexception , -   * @param mutation mutation. , -   * @param mutation mutation. , -   * @param mutation mutation.
2767 , -   */ , -   * @param noncegroup nonce group from the request. always 0 in initial implementation. , -   * @param noncegroup nonce group from the request. always 0 in initial implementation. , -   * @param noncegroup nonce group from the request. always 0 in initial implementation.
2768 , -  protected result append(final hregion region , -   * @param success whether the operation for this nonce has succeeded. , -   * @param success whether the operation for this nonce has succeeded. , -   * @param success whether the operation for this nonce has succeeded.
2769 ," -      final mutationproto m', 'final cellscanner cellscanner', 'long noncegroup) throws ioexception { ", -   */ , -   */ , -   */
2770 , -    long before = environmentedgemanager.currenttimemillis(); ," -  private void endnonceoperation(final mutationproto mutation', 'long noncegroup "," -  private void endnonceoperation(final mutationproto mutation', 'long noncegroup "," -  private void endnonceoperation(final mutationproto mutation', 'long noncegroup"
2771 ," -    append append = protobufutil.toappend(m', 'cellscanner); ", -      boolean success) { , -      boolean success) { , -      boolean success) {
2772 , -    result r = null; , -    if (noncemanager == null || !mutation.hasnonce()) return; , -    if (noncemanager == null || !mutation.hasnonce()) return; , -    if (noncemanager == null || !mutation.hasnonce()) return;
2773 , -    if (region.getcoprocessorhost() != null) { ," -    noncemanager.endoperation(noncegroup', 'mutation.getnonce()', 'success); "," -    noncemanager.endoperation(noncegroup', 'mutation.getnonce()', 'success); "," -    noncemanager.endoperation(noncegroup', 'mutation.getnonce()', 'success);"
2774 , -      r = region.getcoprocessorhost().preappend(append); , -  } , -  } , -  }
2775 , -    } , - , - , -
2776 , -    if (r == null) { , @override , @override , @override
2777 ," -      long nonce = startnonceoperation(m', 'noncegroup); ", public servernoncemanager getnoncemanager() { , public servernoncemanager getnoncemanager() { , public servernoncemanager getnoncemanager() {
2778 , -      boolean success = false; , return this.noncemanager; , return this.noncemanager; , return this.noncemanager;
2779 , -      try { , } , } , }
2780 ," -        r = region.append(append', 'noncegroup', 'nonce); ",  ,  , 
2781 , -        success = true; , -  /** , -  /** , -  /**
2782 , -      } finally { , -   * execute a list of put/delete mutations. , -   * execute a list of put/delete mutations. , -   * execute a list of put/delete mutations.
2783 ," -        endnonceoperation(m', 'noncegroup', 'success); ", -   * , -   * , -   *
2784 , -      } , -   * @param builder , -   * @param builder , -   * @param builder
2785 , -      if (region.getcoprocessorhost() != null) { , -   * @param region , -   * @param region , -   * @param region
2786 ," -        region.getcoprocessorhost().postappend(append', 'r); ", -   * @param mutations , -   * @param mutations , -   * @param mutations
2787 , -      } , -   */ , -   */ , -   */
2788 , -    } ," -  protected void dobatchop(final regionactionresult.builder builder', 'final hregion region "," -  protected void dobatchop(final regionactionresult.builder builder', 'final hregion region "," -  protected void dobatchop(final regionactionresult.builder builder', 'final hregion region"
2789 , -    metricsregionserver.updateappend(environmentedgemanager.currenttimemillis() - before); ," -      final list<clientprotos.action> mutations', 'final cellscanner cells) { "," -      final list<clientprotos.action> mutations', 'final cellscanner cells) { "," -      final list<clientprotos.action> mutations', 'final cellscanner cells) {"
2790 , -    return r; , -    mutation[] marray = new mutation[mutations.size()]; , -    mutation[] marray = new mutation[mutations.size()]; , -    mutation[] marray = new mutation[mutations.size()];
2791 , -  } , -    long before = environmentedgemanager.currenttimemillis(); , -    long before = environmentedgemanager.currenttimemillis(); , -    long before = environmentedgemanager.currenttimemillis();
2792 , - ," -    boolean batchcontainsputs = false', 'batchcontainsdelete = false; "," -    boolean batchcontainsputs = false', 'batchcontainsdelete = false; "," -    boolean batchcontainsputs = false', 'batchcontainsdelete = false;"
2793 , -  /** , -    try { , -    try { , -    try {
2794 , -   * execute an increment mutation. , -      int i = 0; , -      int i = 0; , -      int i = 0;
2795 , -   * , -      for (clientprotos.action action: mutations) { , -      for (clientprotos.action action: mutations) { , -      for (clientprotos.action action: mutations) {
2796 , -   * @param region , -        mutationproto m = action.getmutation(); , -        mutationproto m = action.getmutation(); , -        mutationproto m = action.getmutation();
2797 , -   * @param mutation , -        mutation mutation; , -        mutation mutation; , -        mutation mutation;
2798 , -   * @return the result , -        if (m.getmutatetype() == mutationtype.put) { , -        if (m.getmutatetype() == mutationtype.put) { , -        if (m.getmutatetype() == mutationtype.put) {
2799 , -   * @throws ioexception ," -          mutation = protobufutil.toput(m', 'cells); "," -          mutation = protobufutil.toput(m', 'cells); "," -          mutation = protobufutil.toput(m', 'cells);"
2800 , -   */ , -          batchcontainsputs = true; , -          batchcontainsputs = true; , -          batchcontainsputs = true;
2801 ," -  protected result increment(final hregion region', 'final mutationproto mutation ", -        } else { , -        } else { , -        } else {
2802 ," -      final cellscanner cells', 'long noncegroup) throws ioexception { "," -          mutation = protobufutil.todelete(m', 'cells); "," -          mutation = protobufutil.todelete(m', 'cells); "," -          mutation = protobufutil.todelete(m', 'cells);"
2803 , -    long before = environmentedgemanager.currenttimemillis(); , -          batchcontainsdelete = true; , -          batchcontainsdelete = true; , -          batchcontainsdelete = true;
2804 ," -    increment increment = protobufutil.toincrement(mutation', 'cells); ", -        } , -        } , -        }
2805 , -    result r = null; , -        marray[i++] = mutation; , -        marray[i++] = mutation; , -        marray[i++] = mutation;
2806 , -    if (region.getcoprocessorhost() != null) { , -      } , -      } , -      }
2807 , -      r = region.getcoprocessorhost().preincrement(increment); , - , - , -
2808 , -    } , -      requestcount.add(mutations.size()); , -      requestcount.add(mutations.size()); , -      requestcount.add(mutations.size());
2809 , -    if (r == null) { , -      if (!region.getregioninfo().ismetatable()) { , -      if (!region.getregioninfo().ismetatable()) { , -      if (!region.getregioninfo().ismetatable()) {
2810 ," -      long nonce = startnonceoperation(mutation', 'noncegroup); ", -        cacheflusher.reclaimmemstorememory(); , -        cacheflusher.reclaimmemstorememory(); , -        cacheflusher.reclaimmemstorememory();
2811 , -      boolean success = false; , -      } , -      } , -      }
2812 , -      try { , - , - , -
2813 ," -        r = region.increment(increment', 'noncegroup', 'nonce); ", -      operationstatus codes[] = region.batchmutate(marray); , -      operationstatus codes[] = region.batchmutate(marray); , -      operationstatus codes[] = region.batchmutate(marray);
2814 , -        success = true; , -      for (i = 0; i < codes.length; i++) { , -      for (i = 0; i < codes.length; i++) { , -      for (i = 0; i < codes.length; i++) {
2815 , -      } finally { , -        int index = mutations.get(i).getindex(); , -        int index = mutations.get(i).getindex(); , -        int index = mutations.get(i).getindex();
2816 ," -        endnonceoperation(mutation', 'noncegroup', 'success); ", -        exception e = null; , -        exception e = null; , -        exception e = null;
2817 , -      } , -        switch (codes[i].getoperationstatuscode()) { , -        switch (codes[i].getoperationstatuscode()) { , -        switch (codes[i].getoperationstatuscode()) {
2818 , -      if (region.getcoprocessorhost() != null) { , -          case bad_family: , -          case bad_family: , -          case bad_family:
2819 ," -        r = region.getcoprocessorhost().postincrement(increment', 'r); ", -            e = new nosuchcolumnfamilyexception(codes[i].getexceptionmsg()); , -            e = new nosuchcolumnfamilyexception(codes[i].getexceptionmsg()); , -            e = new nosuchcolumnfamilyexception(codes[i].getexceptionmsg());
2820 , -      } ," -            builder.addresultorexception(getresultorexception(e', 'index)); "," -            builder.addresultorexception(getresultorexception(e', 'index)); "," -            builder.addresultorexception(getresultorexception(e', 'index));"
2821 , -    } , -            break; , -            break; , -            break;
2822 , -    metricsregionserver.updateincrement(environmentedgemanager.currenttimemillis() - before); , - , - , -
2823 , -    return r; , -          case sanity_check_failure: , -          case sanity_check_failure: , -          case sanity_check_failure:
2824 , -  } , -            e = new failedsanitycheckexception(codes[i].getexceptionmsg()); , -            e = new failedsanitycheckexception(codes[i].getexceptionmsg()); , -            e = new failedsanitycheckexception(codes[i].getexceptionmsg());
2825 , - ," -            builder.addresultorexception(getresultorexception(e', 'index)); "," -            builder.addresultorexception(getresultorexception(e', 'index)); "," -            builder.addresultorexception(getresultorexception(e', 'index));"
2826 , -  /** , -            break; , -            break; , -            break;
2827 ," -   * starts the nonce operation for a mutation', 'if needed. ", - , - , -
2828 , -   * @param mutation mutation. , -          default: , -          default: , -          default:
2829 , -   * @param noncegroup nonce group from the request. , -            e = new donotretryioexception(codes[i].getexceptionmsg()); , -            e = new donotretryioexception(codes[i].getexceptionmsg()); , -            e = new donotretryioexception(codes[i].getexceptionmsg());
2830 , -   * @returns nonce used (can be no_nonce). ," -            builder.addresultorexception(getresultorexception(e', 'index)); "," -            builder.addresultorexception(getresultorexception(e', 'index)); "," -            builder.addresultorexception(getresultorexception(e', 'index));"
2831 , -   */ , -            break; , -            break; , -            break;
2832 ," -  private long startnonceoperation(final mutationproto mutation', 'long noncegroup) ", - , - , -
2833 ," -      throws ioexception', 'operationconflictexception { ", -          case success: , -          case success: , -          case success:
2834 , -    if (noncemanager == null || !mutation.hasnonce()) return hconstants.no_nonce; ," -            builder.addresultorexception(getresultorexception(clientprotos.result.getdefaultinstance()', 'index)); "," -            builder.addresultorexception(getresultorexception(clientprotos.result.getdefaultinstance()', 'index)); "," -            builder.addresultorexception(getresultorexception(clientprotos.result.getdefaultinstance()', 'index));"
2835 , -    boolean canproceed = false; , -            break; , -            break; , -            break;
2836 , -    try { , -        } , -        } , -        }
2837 ," -      canproceed = noncemanager.startoperation(noncegroup', 'mutation.getnonce()', 'this); ", -      } , -      } , -      }
2838 , -    } catch (interruptedexception ex) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) { , -    } catch (ioexception ie) {
2839 ," -      throw new interruptedioexception(""nonce start operation interrupted""); ", -      for (int i = 0; i < mutations.size(); i++) { , -      for (int i = 0; i < mutations.size(); i++) { , -      for (int i = 0; i < mutations.size(); i++) {
2840 , -    } ," -        builder.addresultorexception(getresultorexception(ie', 'mutations.get(i).getindex())); "," -        builder.addresultorexception(getresultorexception(ie', 'mutations.get(i).getindex())); "," -        builder.addresultorexception(getresultorexception(ie', 'mutations.get(i).getindex()));"
2841 , -    if (!canproceed) { , -      } , -      } , -      }
2842 ," -      // todo: instead', 'we could convert append/increment to get w/mvcc ", -    } , -    } , -    }
2843 ," -      string message = ""the operation with nonce {"" + noncegroup + ""', '"" + mutation.getnonce() ", -    long after = environmentedgemanager.currenttimemillis(); , -    long after = environmentedgemanager.currenttimemillis(); , -    long after = environmentedgemanager.currenttimemillis();
2844 ," -          + ""} on row ["" + bytes.tostring(mutation.getrow().tobytearray()) ", -    if (batchcontainsputs) { , -    if (batchcontainsputs) { , -    if (batchcontainsputs) {
2845 ," -          + ""] may have already completed""; ", -      metricsregionserver.updateput(after - before); , -      metricsregionserver.updateput(after - before); , -      metricsregionserver.updateput(after - before);
2846 , -      throw new operationconflictexception(message); , -    } , -    } , -    }
2847 , -    } , -    if (batchcontainsdelete) { , -    if (batchcontainsdelete) { , -    if (batchcontainsdelete) {
2848 , -    return mutation.getnonce(); , -      metricsregionserver.updatedelete(after - before); , -      metricsregionserver.updatedelete(after - before); , -      metricsregionserver.updatedelete(after - before);
2849 , -  } , -    } , -    } , -    }
2850 , - , -  } , -  } , -  }
2851 , -  /** , -  private static resultorexception getresultorexception(final clientprotos.result r , -  private static resultorexception getresultorexception(final clientprotos.result r , -  private static resultorexception getresultorexception(final clientprotos.result r
2852 ," -   * ends nonce operation for a mutation', 'if needed. ", -      final int index) { , -      final int index) { , -      final int index) {
2853 , -   * @param mutation mutation. ," -    return getresultorexception(responseconverter.buildactionresult(r)', 'index); "," -    return getresultorexception(responseconverter.buildactionresult(r)', 'index); "," -    return getresultorexception(responseconverter.buildactionresult(r)', 'index);"
2854 , -   * @param noncegroup nonce group from the request. always 0 in initial implementation. , -  } , -  } , -  }
2855 , -   * @param success whether the operation for this nonce has succeeded. ," -  private static resultorexception getresultorexception(final exception e', 'final int index) { "," -  private static resultorexception getresultorexception(final exception e', 'final int index) { "," -  private static resultorexception getresultorexception(final exception e', 'final int index) {"
2856 , -   */ ," -    return getresultorexception(responseconverter.buildactionresult(e)', 'index); "," -    return getresultorexception(responseconverter.buildactionresult(e)', 'index); "," -    return getresultorexception(responseconverter.buildactionresult(e)', 'index);"
2857 ," -  private void endnonceoperation(final mutationproto mutation', 'long noncegroup ", -  } , -  } , -  }
2858 , -      boolean success) { , - , - , -
2859 , -    if (noncemanager == null || !mutation.hasnonce()) return; , -  private static resultorexception getresultorexception(final resultorexception.builder builder , -  private static resultorexception getresultorexception(final resultorexception.builder builder , -  private static resultorexception getresultorexception(final resultorexception.builder builder
2860 ," -    noncemanager.endoperation(noncegroup', 'mutation.getnonce()', 'success); ", -      final int index) { , -      final int index) { , -      final int index) {
2861 , -  } , -    return builder.setindex(index).build(); , -    return builder.setindex(index).build(); , -    return builder.setindex(index).build();
2862 , - , -  } , -  } , -  }
2863 , -  @override , - , - , -
2864 , -  public servernoncemanager getnoncemanager() { , -  /** , -  /** , -  /**
2865 , -    return this.noncemanager; , -   * execute a list of put/delete mutations. the function returns operationstatus instead of , -   * execute a list of put/delete mutations. the function returns operationstatus instead of , -   * execute a list of put/delete mutations. the function returns operationstatus instead of
2866 , -  } ," [""-   * constructing multiresponse to save a possible loop if caller doesn't need multiresponse.""] "," [""-   * constructing multiresponse to save a possible loop if caller doesn't need multiresponse.""] "," [""-   * constructing multiresponse to save a possible loop if caller doesn't need multiresponse.""]"
2867 , - , -   * @param region , -   * @param region , -   * @param region
2868 , -  /** , -   * @param mutations , -   * @param mutations , -   * @param mutations
2869 , -   * execute a list of put/delete mutations. , -   * @return an array of operationstatus which internally contains the operationstatuscode and the , -   * @return an array of operationstatus which internally contains the operationstatuscode and the , -   * @return an array of operationstatus which internally contains the operationstatuscode and the
2870 , -   * , -   *         exceptionmessage if any , -   *         exceptionmessage if any , -   *         exceptionmessage if any
2871 , -   * @param builder , -   * @throws ioexception , -   * @throws ioexception , -   * @throws ioexception
2872 , -   * @param region , -   */ , -   */ , -   */
2873 , -   * @param mutations , -  protected operationstatus [] doreplaybatchop(final hregion region , -  protected operationstatus [] doreplaybatchop(final hregion region , -  protected operationstatus [] doreplaybatchop(final hregion region
2874 , -   */ , -      final list<hlogsplitter.mutationreplay> mutations) throws ioexception { , -      final list<hlogsplitter.mutationreplay> mutations) throws ioexception { , -      final list<hlogsplitter.mutationreplay> mutations) throws ioexception {
2875 ," -  protected void dobatchop(final regionactionresult.builder builder', 'final hregion region ", -    hlogsplitter.mutationreplay[] marray = new hlogsplitter.mutationreplay[mutations.size()]; , -    hlogsplitter.mutationreplay[] marray = new hlogsplitter.mutationreplay[mutations.size()]; , -    hlogsplitter.mutationreplay[] marray = new hlogsplitter.mutationreplay[mutations.size()];
2876 ," -      final list<clientprotos.action> mutations', 'final cellscanner cells) { ", - , - , -
2877 , -    mutation[] marray = new mutation[mutations.size()]; , -    long before = environmentedgemanager.currenttimemillis(); , -    long before = environmentedgemanager.currenttimemillis(); , -    long before = environmentedgemanager.currenttimemillis();
2878 , -    long before = environmentedgemanager.currenttimemillis(); ," -    boolean batchcontainsputs = false', 'batchcontainsdelete = false; "," -    boolean batchcontainsputs = false', 'batchcontainsdelete = false; "," -    boolean batchcontainsputs = false', 'batchcontainsdelete = false;"
2879 ," -    boolean batchcontainsputs = false', 'batchcontainsdelete = false; ", -    try { , -    try { , -    try {
2880 , -    try { , -      int i = 0; , -      int i = 0; , -      int i = 0;
2881 , -      int i = 0; , -      for (hlogsplitter.mutationreplay m : mutations) { , -      for (hlogsplitter.mutationreplay m : mutations) { , -      for (hlogsplitter.mutationreplay m : mutations) {
2882 , -      for (clientprotos.action action: mutations) { , -        if (m.type == mutationtype.put) { , -        if (m.type == mutationtype.put) { , -        if (m.type == mutationtype.put) {
2883 , -        mutationproto m = action.getmutation(); , -          batchcontainsputs = true; , -          batchcontainsputs = true; , -          batchcontainsputs = true;
2884 , -        mutation mutation; , -        } else { , -        } else { , -        } else {
2885 , -        if (m.getmutatetype() == mutationtype.put) { , -          batchcontainsdelete = true; , -          batchcontainsdelete = true; , -          batchcontainsdelete = true;
2886 ," -          mutation = protobufutil.toput(m', 'cells); ", -        } , -        } , -        }
2887 , -          batchcontainsputs = true; , -        marray[i++] = m; , -        marray[i++] = m; , -        marray[i++] = m;
2888 , -        } else { , -      } , -      } , -      }
2889 ," -          mutation = protobufutil.todelete(m', 'cells); ", -      requestcount.add(mutations.size()); , -      requestcount.add(mutations.size()); , -      requestcount.add(mutations.size());
2890 , -          batchcontainsdelete = true; , -      if (!region.getregioninfo().ismetatable()) { , -      if (!region.getregioninfo().ismetatable()) { , -      if (!region.getregioninfo().ismetatable()) {
2891 , -        } , -        cacheflusher.reclaimmemstorememory(); , -        cacheflusher.reclaimmemstorememory(); , -        cacheflusher.reclaimmemstorememory();
2892 , -        marray[i++] = mutation; , -      } , -      } , -      }
2893 , -      } , -      return region.batchreplay(marray); , -      return region.batchreplay(marray); , -      return region.batchreplay(marray);
2894 , - , -    } finally { , -    } finally { , -    } finally {
2895 , -      requestcount.add(mutations.size()); , -      long after = environmentedgemanager.currenttimemillis(); , -      long after = environmentedgemanager.currenttimemillis(); , -      long after = environmentedgemanager.currenttimemillis();
2896 , -      if (!region.getregioninfo().ismetatable()) { , -      if (batchcontainsputs) { , -      if (batchcontainsputs) { , -      if (batchcontainsputs) {
2897 , -        cacheflusher.reclaimmemstorememory(); , -        metricsregionserver.updateput(after - before); , -        metricsregionserver.updateput(after - before); , -        metricsregionserver.updateput(after - before);
2899 , - , -      if (batchcontainsdelete) { , -      if (batchcontainsdelete) { , -      if (batchcontainsdelete) {
2900 , -      operationstatus codes[] = region.batchmutate(marray); , -        metricsregionserver.updatedelete(after - before); , -        metricsregionserver.updatedelete(after - before); , -        metricsregionserver.updatedelete(after - before);
2901 , -      for (i = 0; i < codes.length; i++) { , -      } , -      } , -      }
2902 , -        int index = mutations.get(i).getindex(); , -    } , -    } , -    }
2903 , -        exception e = null; , -  } , -  } , -  }
2904 , -        switch (codes[i].getoperationstatuscode()) { , - , - , -
2905 , -          case bad_family: , -  /** , -  /** , -  /**
2906 , -            e = new nosuchcolumnfamilyexception(codes[i].getexceptionmsg()); , -   * mutate a list of rows atomically. , -   * mutate a list of rows atomically. , -   * mutate a list of rows atomically.
2907 ," -            builder.addresultorexception(getresultorexception(e', 'index)); ", -   * , -   * , -   *
2908 , -            break; , -   * @param region , -   * @param region , -   * @param region
2909 , - , -   * @param actions , -   * @param actions , -   * @param actions
2910 , -          case sanity_check_failure: ," - * @param cellscanner if non-null', 'the mutation data -- the cell content. "," - * @param cellscanner if non-null', 'the mutation data -- the cell content. "," - * @param cellscanner if non-null', 'the mutation data -- the cell content."
2911 , -            e = new failedsanitycheckexception(codes[i].getexceptionmsg()); , -   * @throws ioexception , -   * @throws ioexception , -   * @throws ioexception
2912 ," -            builder.addresultorexception(getresultorexception(e', 'index)); ", -   */ , -   */ , -   */
2913 , -            break; ," -  protected void mutaterows(final hregion region', 'final list<clientprotos.action> actions "," -  protected void mutaterows(final hregion region', 'final list<clientprotos.action> actions "," -  protected void mutaterows(final hregion region', 'final list<clientprotos.action> actions"
2914 , - , -      final cellscanner cellscanner) , -      final cellscanner cellscanner) , -      final cellscanner cellscanner)
2915 , -          default: , -  throws ioexception { , -  throws ioexception { , -  throws ioexception {
2916 , -            e = new donotretryioexception(codes[i].getexceptionmsg()); , -    if (!region.getregioninfo().ismetatable()) { , -    if (!region.getregioninfo().ismetatable()) { , -    if (!region.getregioninfo().ismetatable()) {
2917 ," -            builder.addresultorexception(getresultorexception(e', 'index)); ", -      cacheflusher.reclaimmemstorememory(); , -      cacheflusher.reclaimmemstorememory(); , -      cacheflusher.reclaimmemstorememory();
2918 , -            break; , -    } , -    } , -    }
2919 , - , -    rowmutations rm = null; , -    rowmutations rm = null; , -    rowmutations rm = null;
2920 , -          case success: , -    for (clientprotos.action action: actions) { , -    for (clientprotos.action action: actions) { , -    for (clientprotos.action action: actions) {
2921 ," -            builder.addresultorexception(getresultorexception(clientprotos.result.getdefaultinstance()', 'index)); ", -      if (action.hasget()) { , -      if (action.hasget()) { , -      if (action.hasget()) {
2922 , -            break; ," -        throw new donotretryioexception(""atomic put and/or delete only', 'not a get="" + "," -        throw new donotretryioexception(""atomic put and/or delete only', 'not a get="" + "," -        throw new donotretryioexception(""atomic put and/or delete only', 'not a get="" +"
2923 , -        } , -          action.getget()); , -          action.getget()); , -          action.getget());
2925 , -    } catch (ioexception ie) { , -      mutationtype type = action.getmutation().getmutatetype(); , -      mutationtype type = action.getmutation().getmutatetype(); , -      mutationtype type = action.getmutation().getmutatetype();
2926 , -      for (int i = 0; i < mutations.size(); i++) { , -      if (rm == null) { , -      if (rm == null) { , -      if (rm == null) {
2927 ," -        builder.addresultorexception(getresultorexception(ie', 'mutations.get(i).getindex())); ", -        rm = new rowmutations(action.getmutation().getrow().tobytearray()); , -        rm = new rowmutations(action.getmutation().getrow().tobytearray()); , -        rm = new rowmutations(action.getmutation().getrow().tobytearray());
2929 , -    } , -      switch (type) { , -      switch (type) { , -      switch (type) {
2930 , -    long after = environmentedgemanager.currenttimemillis(); , -      case put: , -      case put: , -      case put:
2931 , -    if (batchcontainsputs) { ," -        rm.add(protobufutil.toput(action.getmutation()', 'cellscanner)); "," -        rm.add(protobufutil.toput(action.getmutation()', 'cellscanner)); "," -        rm.add(protobufutil.toput(action.getmutation()', 'cellscanner));"
2932 , -      metricsregionserver.updateput(after - before); , -        break; , -        break; , -        break;
2933 , -    } , -      case delete: , -      case delete: , -      case delete:
2934 , -    if (batchcontainsdelete) { ," -        rm.add(protobufutil.todelete(action.getmutation()', 'cellscanner)); "," -        rm.add(protobufutil.todelete(action.getmutation()', 'cellscanner)); "," -        rm.add(protobufutil.todelete(action.getmutation()', 'cellscanner));"
2935 , -      metricsregionserver.updatedelete(after - before); , -        break; , -        break; , -        break;
2936 , -    } , -      default: , -      default: , -      default:
2937 , -  } ," -          throw new donotretryioexception(""atomic put and/or delete only', 'not "" + type.name()); "," -          throw new donotretryioexception(""atomic put and/or delete only', 'not "" + type.name()); "," -          throw new donotretryioexception(""atomic put and/or delete only', 'not "" + type.name());"
2938 , -  private static resultorexception getresultorexception(final clientprotos.result r , -      } , -      } , -      }
2939 , -      final int index) { , -    } , -    } , -    }
2940 ," -    return getresultorexception(responseconverter.buildactionresult(r)', 'index); ", -    region.mutaterow(rm); , -    region.mutaterow(rm); , -    region.mutaterow(rm);
2942 ," -  private static resultorexception getresultorexception(final exception e', 'final int index) { ", - , - , -
2943 ," -    return getresultorexception(responseconverter.buildactionresult(e)', 'index); ", private static class movedregioninfo { , private static class movedregioninfo { , private static class movedregioninfo {
2944 , -  } , private final servername servername; , private final servername servername; , private final servername servername;
2945 , - , private final long seqnum; , private final long seqnum; , private final long seqnum;
2946 , -  private static resultorexception getresultorexception(final resultorexception.builder builder ," @@ -4455', '7 +2578', '7 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa "," @@ -4455', '7 +2578', '7 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa "," @@ -4455', '7 +2578', '7 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa"
2947 , -      final int index) { ," movedregions.put(encodedname', 'new movedregioninfo(destination', 'closeseqnum)); "," movedregions.put(encodedname', 'new movedregioninfo(destination', 'closeseqnum)); "," movedregions.put(encodedname', 'new movedregioninfo(destination', 'closeseqnum));"
2948 , -    return builder.setindex(index).build(); , } , } , }
2949 , -  } ,  ,  , 
2950 , - , -  private void removefrommovedregions(string encodedname) { , -  private void removefrommovedregions(string encodedname) { , -  private void removefrommovedregions(string encodedname) {
2951 , -  /** , +  void removefrommovedregions(string encodedname) { , +  void removefrommovedregions(string encodedname) { , +  void removefrommovedregions(string encodedname) {
2952 , -   * execute a list of put/delete mutations. the function returns operationstatus instead of , movedregions.remove(encodedname); , movedregions.remove(encodedname); , movedregions.remove(encodedname);
2953 ," [""-   * constructing multiresponse to save a possible loop if caller doesn't need multiresponse.""] ", } , } , }
2954 , -   * @param region ,  ,  , 
2955 , -   * @param mutations ," @@ -4533', '20 +2656', '6 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa "," @@ -4533', '20 +2656', '6 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa "," @@ -4533', '20 +2656', '6 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa"
2956 , -   * @return an array of operationstatus which internally contains the operationstatuscode and the ," return zkutil.joinznode(this.zookeeper.rsznode', 'getservername().tostring()); "," return zkutil.joinznode(this.zookeeper.rsznode', 'getservername().tostring()); "," return zkutil.joinznode(this.zookeeper.rsznode', 'getservername().tostring());"
2957 , -   *         exceptionmessage if any , } , } , }
2958 , -   * @throws ioexception ,  ,  , 
2959 , -   */ , -  /** , -  /** , -  /**
2960 , -  protected operationstatus [] doreplaybatchop(final hregion region , -   * holder class which holds the regionscanner and nextcallseq together. , -   * holder class which holds the regionscanner and nextcallseq together. , -   * holder class which holds the regionscanner and nextcallseq together.
2961 , -      final list<hlogsplitter.mutationreplay> mutations) throws ioexception { , -   */ , -   */ , -   */
2962 , -    hlogsplitter.mutationreplay[] marray = new hlogsplitter.mutationreplay[mutations.size()]; , -  private static class regionscannerholder { , -  private static class regionscannerholder { , -  private static class regionscannerholder {
2963 , - , -    private regionscanner s; , -    private regionscanner s; , -    private regionscanner s;
2964 , -    long before = environmentedgemanager.currenttimemillis(); , -    private long nextcallseq = 0l; , -    private long nextcallseq = 0l; , -    private long nextcallseq = 0l;
2965 ," -    boolean batchcontainsputs = false', 'batchcontainsdelete = false; ", -    private hregion r; , -    private hregion r; , -    private hregion r;
2966 , -    try { , - , - , -
2967 , -      int i = 0; ," -    public regionscannerholder(regionscanner s', 'hregion r) { "," -    public regionscannerholder(regionscanner s', 'hregion r) { "," -    public regionscannerholder(regionscanner s', 'hregion r) {"
2968 , -      for (hlogsplitter.mutationreplay m : mutations) { , -      this.s = s; , -      this.s = s; , -      this.s = s;
2969 , -        if (m.type == mutationtype.put) { , -      this.r = r; , -      this.r = r; , -      this.r = r;
2970 , -          batchcontainsputs = true; , -    } , -    } , -    }
2971 , -        } else { , -  } , -  } , -  }
2972 , -          batchcontainsdelete = true; , - , - , -
2973 , -        } , private boolean ishealthcheckerconfigured() { , private boolean ishealthcheckerconfigured() { , private boolean ishealthcheckerconfigured() {
2974 , -        marray[i++] = m; , string healthscriptlocation = this.conf.get(hconstants.health_script_loc); , string healthscriptlocation = this.conf.get(hconstants.health_script_loc); , string healthscriptlocation = this.conf.get(hconstants.health_script_loc);
2975 , -      } , return org.apache.commons.lang.stringutils.isnotblank(healthscriptlocation); , return org.apache.commons.lang.stringutils.isnotblank(healthscriptlocation); , return org.apache.commons.lang.stringutils.isnotblank(healthscriptlocation);
2976 , -      requestcount.add(mutations.size()); ," @@ -4636', '18 +2745', '4 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa "," @@ -4636', '18 +2745', '4 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa "," @@ -4636', '18 +2745', '4 @@ public class hregionserver implements clientprotos.clientservice.blockinginterfa"
2977 , -      if (!region.getregioninfo().ismetatable()) { , } , } , }
2978 , -        cacheflusher.reclaimmemstorememory(); , return result; , return result; , return result;
2979 , -      } , } , } , }
2980 , -      return region.batchreplay(marray); , - , - , -
2981 , -    } finally { , -  @override , -  @override , -  @override
2982 , -      long after = environmentedgemanager.currenttimemillis(); , -  public updatefavorednodesresponse updatefavorednodes(rpccontroller controller , -  public updatefavorednodesresponse updatefavorednodes(rpccontroller controller , -  public updatefavorednodesresponse updatefavorednodes(rpccontroller controller
2983 , -      if (batchcontainsputs) { , -      updatefavorednodesrequest request) throws serviceexception { , -      updatefavorednodesrequest request) throws serviceexception { , -      updatefavorednodesrequest request) throws serviceexception {
2984 , -        metricsregionserver.updateput(after - before); , -    list<updatefavorednodesrequest.regionupdateinfo> openinfolist = request.getupdateinfolist(); , -    list<updatefavorednodesrequest.regionupdateinfo> openinfolist = request.getupdateinfolist(); , -    list<updatefavorednodesrequest.regionupdateinfo> openinfolist = request.getupdateinfolist();
2985 , -      } , -    updatefavorednodesresponse.builder respbuilder = updatefavorednodesresponse.newbuilder(); , -    updatefavorednodesresponse.builder respbuilder = updatefavorednodesresponse.newbuilder(); , -    updatefavorednodesresponse.builder respbuilder = updatefavorednodesresponse.newbuilder();
2986 , -      if (batchcontainsdelete) { , -    for (updatefavorednodesrequest.regionupdateinfo regionupdateinfo : openinfolist) { , -    for (updatefavorednodesrequest.regionupdateinfo regionupdateinfo : openinfolist) { , -    for (updatefavorednodesrequest.regionupdateinfo regionupdateinfo : openinfolist) {
2987 , -        metricsregionserver.updatedelete(after - before); , -      hregioninfo hri = hregioninfo.convert(regionupdateinfo.getregion()); , -      hregioninfo hri = hregioninfo.convert(regionupdateinfo.getregion()); , -      hregioninfo hri = hregioninfo.convert(regionupdateinfo.getregion());
2988 , -      } , -      updateregionfavorednodesmapping(hri.getencodedname() , -      updateregionfavorednodesmapping(hri.getencodedname() , -      updateregionfavorednodesmapping(hri.getencodedname()
2989 , -    } , -          regionupdateinfo.getfavorednodeslist()); , -          regionupdateinfo.getfavorednodeslist()); , -          regionupdateinfo.getfavorednodeslist());
2990 , -  } , -    } , -    } , -    }
2991 , - , -    respbuilder.setresponse(openinfolist.size()); , -    respbuilder.setresponse(openinfolist.size()); , -    respbuilder.setresponse(openinfolist.size());
2992 , -  /** , -    return respbuilder.build(); , -    return respbuilder.build(); , -    return respbuilder.build();
2993 , -   * mutate a list of rows atomically. , -  } , -  } , -  }
2994 , -   * , } , } , }
